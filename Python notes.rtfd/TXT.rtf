{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 CourierNewPSMT;\f1\fswiss\fcharset0 Arial-BoldMT;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;
}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000\c87059;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww16640\viewh18900\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf0 \cb2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 ==================================================\
PYTHON PROGRAMMING NOTES\
==================================================\
====================================================================\
		Real time Applications of Python Programming\
====================================================================\
1. Web Application Development\
2. Gaming Application Development\
3. Artificial Intelligence and Machine Learning , Deep Learning , Data Science\
4. Desktop GUI Applications\
5. Image Processing \
6. Text Processing\
7. Business Applications\
8. Education Programs and Training Programs.\
9. Audio and Video Based Application\
10.Web Scrapping / Web Harvesting Application.\
11. Data Visualization in Data Science\
12. Scientific and Numerical Operation \
13. Software Development\
14. Operating Development\
15. CAD Based Application\
16. Embedded Application \
17. Console based Applications.\
18. Computer Vision\
19. Language Development\
20. Automation of Testing\
21. Animation applications\
22. Data Analysis and Data Analystics\
23. Development of IOT \
==================================================================\
\pard\pardeftab720\partightenfactor0
\cf0 ===================================================\
		Introduction to Python Programming\
===================================================\
History Of Python:\
---------------------------\
=>The Python Programming Languge foundation stone   done in the late 1980\
=>The implementation of Python Programming Languge was started in December 1989 \
=>The Python(0.9) Programming Languge officially released in the year 1991 Feb 20.\
=>The Python Programming Languge Developed by " GUIDO VAN ROSSUM ".\
=>The ABC Programming Languge is the predecessor of Python Programming Languge.\
=>There is fact behind chhosing the name python is that there is a popular BBC comedy series "Monty python's Flying Circus---late 1970"\
---------------------------------\
   Python Versions:\
---------------------------------\
=> Python Programming Languge contains Two Types of Versions. They are\
	1) Python 2.x     here x ---> 0, 1,2,3............\
\
	2) Python 3.x      here x----> 0  1 2 3 4 5 6 7 8 9    \
=>As on Today Python 2.x   out dated, we are not using Industry.\
\
=>As on Today Python 3.x( LTS )---->we are using in Industry.\
\
=>The Python3.x   does not support    Python 2.x. Hence Python 3.x does not contain backward compatability.\
\
=>The Python Software maintanined by \
    non-commerial Organization "Python Software Foundation"----(PSF)\
=>we can download python software freey from www.python.org\
-----------------------------------------------------------------------------------------------------\
Various of Version of Python 2.x /  3.x\
------------------------------------------------------------------\
Python Version			Released Date\
------------------------------------------------------------------\
   python1.0----------------------> Jan 1994\
   python 1.5---------------------> Dec 1997\
   python1.6----------------------> Sep 2000\
\
   python 2.0---------------------> OCT 2000\
   python2.1---------------------> APR 2001\
   python 2.2--------------------> DEC 2001\
   python 2.3-------------------->  JUL 2003\
   python 2.4--------------------> NOV 2004\
   python 2.5-------------------> Sep 2006\
   python 2.6------------------> OCT 2008\
   python 2.7------------------>JUL 2010\
-----------------------------------------------------------------------------------\
   Python 3.0----------------> \
   python 3.1---------------->\
   python 3.2---------------->FEB 2011\
   python 3.3--------------->Sep 2012\
   python 3.4--------------> Mar 2014\
   python 3.5--------------> Sep 2015\
   python 3.6-------------->Dec 2016\
   python 3.7-------------> June 2018\
   python 3.8-------------> Oct 2019\
   python 3.9--(stable release---LTS)--->3rd May 2021\
   python 3.10-----------------------------------> 3rd may 2021\
================================================================\
Python Software  Down Loading Process:\
---------------------------------------------------------------------------\
=>Goto www.python.org\
=>Choose downloads--->windows (OS)---->click on python3.9.5\
=>Ensure that downloading process completes and install by adding to the path.\
-------------------------------------------------------------------------------------------------------------------\
\pard\pardeftab720\partightenfactor0
\cf0 =================================================================\
PYTHON PROGRAMMING PROVIDES 11 FEATURES THEY ARE\
=================================================================\
1) SIMPLE\
2) FREWER AND OPEN SOURCE\
3) DYNAMICALLY TYPED\
4) PLATFORM INDEPENDANT AND PORTABLE\
5) INTERPRETED\
6) HIGH LEVEL\
7) ROBUST(STRONG)\
8) EXTENDIBLE\
9) EMBEDDED\
10)BOTH OBJECT ORIENTED AND FUNCTION PROGRAMMING\
11)EXTENSIVE THIRD PARTY APT SUPPORT NUMPY,PANDAS,SCIKIT,SCIPY\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\partightenfactor0
\cf0 ===============================================\
							Data Types\
			===============================================\
=>The purpose of Data Types is that to allocate memory space for input data .\
=>Python Programming  provides 14 data types and classfied into 6 types  . They are\
\
I. Fundamental Data Types\
		1. int\
		2. float\
		3. bool\
		4. complex\
II. Sequence Data Types:\
                5. str\
		6. bytes\
		7.bytearray\
		8.range\
III List Data Types (Collection Data Types)\
		9. list\
		10. tuple\
IV. Set Data Types ( Collection Data Types)\
		11. set\
		12. frozenset\
V. Dict  data types: ( Collection Data Types)\
		13. dict\
VI. None Type data type\
		14. nonetype\
=================================================================\
===========================================\
			I. Fundamental Data Types\
		===========================================\
=>The purpose of Fundamental Data Types is that to store Single Value.\
=>we have 4 data types in Fundamental Data Types. They are\
		1. int\
		2. float\
		3. bool\
		4. complex\
---------------------------------------------------------------------------------------------------------------------------\
============================================\
				1.  int\
		============================================\
=>'int' is one of the pre-defined class and it is treated as data type.\
=>The purpose of int data type is to store Integral values / whole numbers (numbers without               decimal places) and we can also store All Number System data.\
Example:\
-------------\
>>>a=100\
>>>print(a)--------------------------100\
>>>type(a)-------------------------<class,'int'>\
>>>a=123\
>>>print(a, type(a))----------------   123  <class, 'int'>\
	-------------------------------------------------------------------------------------------------------------\
=>With int data type, we store all number system data. \
>We have 4 types of number Systems.They are\
a) Decimal Number System(default):\
			Digits:-   0,1,2,3,4,5,6,7,8,9-------- 10 digits\
			Base: -  10\
b) Binary Number System :\
                       Digits:    0 1-----------  2 digits\
		       Base:     2\
c) Octal Number System:\
			digits:- 0,1,2,3,4,5,6,7-------- 8 digits\
			Base:  8\
d) Hexa Decimnal Number System:\
		    Digits:  0,1,2,3,4,5,6,7,8,9, A,B,C,D,E,F---- 16 digits\
		    base:   16\
========================================\
				Base Conversion Functions\
		=========================================\
=>The purpose of Base Conversion Functions is that to convert one base type value into	  another base type value.\
=>We have three type of Base Conversion Functions. They are\
		a) bin()     \
		b) oct()\
		c) hex()\
----------------------------------------------------------------------------------------------------------\
a) bin():\
   ---------\
=>This function is used for converting any number System value into binary format.\
=>Syntax:-   varname=bin( Decimal / Octal / Hexa Decimal Value)\
=>here varname is of type <class 'str'>\
Examples:\
-----------------\
>>> a=15\
>>> b=bin(a)\
>>> print(b)-------------------0b1111\
>>> print(type(a))-----------<class 'int'>\
>>> print(type(b))-----------<class 'str'>\
>>> a=10\
>>> b=bin(a)\
>>> print(b)----------------0b1010\
>>> print(type(b))-----------<class 'str'>\
===============================================================\
b) oct():\
   ---------\
=>This function is used for converting any number System value into octal format.\
\
=>Syntax:-   varname=oct( Decimal / Binary / Hexa Decimal Value)\
=>here varname is of type <class 'str'>\
\
Examples:\
---------------\
>>> a=18\
>>> b=oct(a)\
>>> print(b)---------------0o22\
>>> print(type(b))----------<class 'str'>\
>>> a=0b1111\
>>> b=oct(a)\
>>> print(b)--------------0o17\
>>> a=0xAB\
>>> b=oct(a)\
>>> print(b)-------------0o253\
>>> print(type(b))-------------<class 'str'>\
-----------------------------------------------------------------------------------------\
c) hex():\
   ---------\
=>This function is used for converting any number System value into Hexa Decimal  format.\
=>Syntax:-   varname=hex( Decimal / Binary / Octal Value)\
=>here varname is of type <class 'str'>\
\
Examples:\
-----------------\
>>> a=15\
>>> b=hex(a)\
>>> print(b)--------------0xf\
>>> a=171\
>>> b=hex(a)\
>>> print(b)------------0xab\
>>> a=0o253\
>>> b=hex(a)\
>>> print(b)-----------0xab\
>>> a=0b1010\
>>> b=hex(a)\
>>> print(b)--------------0xa\
>>> print(type(b))-------------<class 'str'>\
==================================================================\
\
-------------------------------------------------------------------------------------------\
Storing Binary Number System data in Python Programming:\
--------------------------------------------------------------------------------------------\
=>To Store Binary Number System data in Python Programming, the binary data must be proceded with 0b (or) 0B        \
\
	Syntax:      varname=0B binary data\
	Syntax:      varname=0b binary data\
Examples:\
---------------\
>>>a=0b1010\
>>>print(a, type(a))------------ 10  <class, 'int'>\
>>>b=0B1111\
>>>print(b, type(b))------------ 15  <class, 'int'>\
>>>b=0B10000\
>>>print(b, type(b))------------ 1b  <class, 'int'>\
\
>>>c=0b10102 ---SyntaxError---Invalid Literal 2 in binary\
-------------------------------------------------------------------------------------------------\
Storing Octal Number System data in Python Programming:\
--------------------------------------------------------------------------------------------\
=>To Store Octal Number System data in Python Programming, the Octal data must be proceded with 0o (or) 0O       \
\
	Syntax:      varname=0o octal data\
				(or)\
	Syntax:      varname=0O octal data\
Examples:\
-----------------\
>>>a=0o22\
>>>print(a, type(a))------------->18 <class, 'int'>\
>>>a=0o345\
>>>print(a, type(a))------------->229  <class, 'int'>\
>>>a=0o18   SyntaxError---Invalid Literal 8 in octal\
--------------------------------------------------------------------------\
Storing Hexa decimal Number System data in Python Programming:\
--------------------------------------------------------------------------------------------\
=>To Store Hexa decimal Number System data in Python Programming, the Hexa decimal data must be proceded with 0x (or) 0X       \
\
	Syntax:      varname=0x Hexa dercimal data\
				(or)\
	Syntax:      varname=0X Hexa dercimal data\
\
Examples:\
-----------------\
>>>a=0xAB\
>>>print(a, type(a))------------->171  <class, 'int'>\
>>>a=0xBEE\
>>>print(a, type(a))------------->3054  <class, 'int'>\
\
============================================\
			2.	float data type\
		============================================\
=>'float' is one the pre-defined class and treated as Fundamental data type\
=>This data type is used for storing Real Constant values (or) floating point values.\
Math Example:-            23.45\
                 here  23 is called  Integer part\
		           0.45 is called Decimal part\
\
=>float data never allows us store Binary , Octal and Hexa Decimal Number System		  values.\
=>this data type can also be used for storing scientific data (mantisa e exponent)\
\
\
Examples:\
-----------------\
>>> a=12.34\
>>> print(a)-------------12.34\
>>> print(type(a))--------<class 'float'>\
>>> a=0.9999\
>>> print(a)----------------0.9999\
>>> print(type(a))-------------<class 'float'>\
-------------------------------------------------------------\
Special Examples:\
--------------------------\
>>> a=0b1010.0b1010-------->SyntaxError: invalid syntax\
>>> a=0b1010.0o22----------SyntaxError: invalid syntax\
>>> a=0xA.0xF---------------SyntaxError: invalid syntax\
----------------------------------------------------------------------------\
Scientific Notation Examples:\
-----------------------------------------\
>>> a=3e2\
>>> print(type(a))-------------<class 'float'>\
>>> print(a)----------300.0\
>>> a=4e-2\
>>> print(a,type(a))----------0.04 <class 'float'>\
>>> a=34e-4\
>>> print(a, type(a))------------0.0034 <class 'float'>		\
========================================================\
=========================================\
			3. bool\
		========================================\
=>'bool' is one of the pre-defined class and treated as fundamental data type.\
=>The purpose of bool data type that to store True and False values. These values are logical values.\
=>Internally the value True is 1 and the value False is 0\
\
Examples:\
---------------\
>>> a=True\
>>> print(a)------------True\
>>> print(type(a))----------<class 'bool'>\
>>> a=False\
>>> print(a)------------False\
>>> print(type(a))-------------<class 'bool'>\
-----------------------------------------------------------\
Special Examples:-\
--------------------------------\
>>> a=True\
>>> b=False\
>>> c=a+b\
>> print(c)----------------1\
>>> c=a-b\
>>> print(c)--------------1\
>>> print(2*True+True-False)-------------3\
>>> print(2*False-False)-----------0\
>>> print(bin(2*True+True-False))-------------0b11\
>>> print(hex(2*True+True-False))-------------0x3\
>>> print(oct(2*True+True-False))-------------0o3\
--------------------------------------------------------------------\
=============================================\
				Complex  data type\
		=============================================\
=>'complex' os one of the pre-defined class and treated as fundamental data type.\
=>The purpose of complex data type is to store complex data.\
=>The general format of Complex Data Type is shown Bellow\
\
			Syntax1:      a + bj\
			Syntax2:      a - b j				\
=>here 'a' is called real part and b is called imaginary part and 'j' represents sqrt(-1)\
=>By default , the values of real and imaginary are belongs to 'float'\
=>To extract the real and imgnary values from complex object, we use two pre-defined attributes / variables. They are\
			a) real\
			b) img\
Syntax:   complex obj.real---->Gives real part of complex objectSyntax:					complex obj.imag---->Gives imaginary part of complex object\
============\
Examples:\
============\
>>> a=2+3j\
>>> b=2-3j\
>>> print(a, type(a))---------(2+3j) <class 'complex'>\
>>> print(b, type(b))--------(2-3j) <class 'complex'>\
>>> c=2.5+3.6j\
>>> d=-3.4-6.7j\
>>> print(c, type(c))-------------(2.5+3.6j) <class 'complex'>\
>>> print(d, type(d))----------(-3.4-6.7j) <class 'complex'>\
---------------------------------------------------------------------------\
Examples:\
--------------------\
>>> a=2+3j\
>>> print(a.real)-----------2.0\
>>>\
>>> print(a.img)----------3.0\
>>> a=-3.5+4j\
>>> print(a.real, a.img)-------     -3.5    4.0\
>>> a=-2.3-4.5j\
>>> print(a.real, a.img)--------     -2.3     -4.5\
===========================================================\
===============================================\
		Sequence Type Data Types\
	===============================================\
=>The purpose of Sequence Type Data Types is that "To store Sequence of Values"\
     in single object.\
=>In python , we have 4 data types in Sequence Type. They are\
		a) str\
		b) bytes\
		c) byte array\
		d) range					\
================================================================\
======================\
					str\
				======================\
=>'str' is one of the prte-defined terated as sequence data type\
=>The purpose of str is that to store String data\
=>The string can be organized in two ways. They are\
		a) Single line string data\
		b) multi line string data\
a) Single line string data:\
-----------------------------------\
Syntax:    " single line string data"\
\
		(or)\
Syntax:    ' single line string data '\
Examples::\
>>> s1="PYTHON"\
>>> print(s1)-------------PYTHON\
>>> print(type(s1))--------------<class 'str'>\
>>> s2='PYTHON'\
>>> print(s2, type(s2))------------PYTHON <class 'str'>\
>>> s3='K'\
>>> print(s3, type(s3))----  K <class 'str'>\
\
Note:- With double and single quotes we can organize single line string data but not multiple strting data.\
>>> s4="Rossum   -------------------SyntaxError: EOL while scanning string literal\
----------------------------------------------------------------------------------------------------\
b) multi line string data:\
-----------------------------------\
=>To organize multi line string data , we use tripple double quotes or tripple single          quotes.\
Syntax:-    " " "      String data1\
                                String data 2\
				-----------------\
				String data -n  " " "\
			(OR)\
\
Syntax:-    ' ' '      String data1\
                                String data 2\
				-----------------\
				String data -n  ' ' ' \
Examples:\
---------------\
>>> s4=" " "Rossum\
... H.NO:3-4-12, Hill Towers\
... CWI Nether Lands"""\
>>> print(s4)-------  output\
				Rossum\
				H.NO:3-4-12, Hill Towers\
				CWI Nether Lands\
>>> s5='''James Godling\
... H-NO: 4-5, Fort Side\
... Sun Micxro System\
... USA'''\
>>> print(s5)----------output\
				James Godling\
				H-NO: 4-5, Fort Side\
				Sun Micxro System\
				USA\
>>> s6=" " "Python is an OOP lang " " "\
>>> print(s6)-----Python is an OOP lang\
>>> s6=' ' ' Python is an OOP lang  ' ' '\
>>> print(s6)-------Python is an OOP lang\
==============================================================\
=========================================\
			Operations on str data\
	=========================================\
=>On str data, we can two types of operations. They are\
		a) Indexing\
		b) Slicing\
---------------------------------------------------------------------------------\
a) Indexing:\
------------------\
=>The process of obtaining perticular character from given str object by passing valid existing Index / Position ( +ve / -ve) is called Indexing\
=>If we enter Invalid Index then we get IndexError\
\
Syntax:    strobj[index]\
here Index can be either +ve   or  -ve\
\
Examples:\
----------------\
>>> s="PYTHON"\
>>> print(s)--------------------------PYTHON\
>>> print(s[0])------------------P\
>>> print(s[-6])---------------P\
>>> print(s[5])---------------N\
>>> print(s[-1])---------------N\
>>> print(s[3])---------------H\
>>> print(s[-3])--------------H\
>>> print(s[10])----------IndexError: string index out of range\
==============================================================\
b) Slicing:\
----------------\
=>The process obtaining range of characters (or) sequence of  characters (or) sub string from Given String is called Slicing.\
\
=>Syntax1:-  strobj[start:stop]----------->start<stop\
\
=>This syntax gives range of character from start Index to stop-1 index  provided start<stop otherwise we never get any output\
------------------------\
Examples:\
------------------------\
>>> s="PYTHON"\
>>> print(s[0:4])--------------PYTH\
>>> print(s[2:6])--------------THON\
>>> print(s[3:6])---------------HON\
>>> print(s[6:2])---------------no output bcoz 6 <  2 is false\
=========================================\
			 Type Casting Techniques in Python\
		=========================================\
=>The process of converting one type of value into another type value is called Type Cating.\
=>In Python programming , we have 5 Type casting Functions. They are\
		a) int()\
		b) float()\
		c) bool()\
		d) complex()\
		e) str()\
-------------------------------------------------------------------------------------------------\
a) int()\
   -------\
=>This function is used for converting any type of Possible  value into int type value.\
=>Syntax:-   varname=int(float / bool / complex / str)\
\
Examples: (float----->int--->Possible)\
----------------------------------------------------\
>>> a=12.34\
>>> print(a, type(a))----------12.34 <class 'float'>\
>>> b=int(a)\
>>> print(b, type(b))----------12 <class 'int'>\
-------------------------------------------------------------------\
Examples: (bool----->int--->Possible)\
-------------------------------------------------------------------\
>>> a=True\
>>> print(a, type(a))--------------True <class 'bool'>\
>>> b=int(a)\
>>> print(b, type(b))------------1 <class 'int'>\
>>> a=False\
>>> print(a, type(a))------------False <class 'bool'>\
>>> b=int(a)\
>>> print(b, type(b))----------0 <class 'int'>\
----------------------------------------------------------------------------\
Examples: (complex----->int--->Not Possible   )\
-------------------------------------------------------------------\
>>> a=2+3j\
>>> print(a, type(a))-------------(2+3j) <class 'complex'>\
>>> b=int(a)---------TypeError: can't convert complex to int\
>>> print(a.real)\
2.0\
>>> b=int(a.real)\
>>> print(b, type(b))---------2 <class 'int'>\
>>> b=int(a.imag)\
>>> print(b, type(b))-------3 <class 'int'>\
----------------------------------------------------------------------------------------------------\
Examples: (int str----->int--->Possible )\
-------------------------------------------------------------------\
>>> a="123"\
>>> print(a, type(a))\
123 <class 'str'>\
>>> b=int(a)\
>>> print(b, type(b))\
123 <class 'int'>\
-------------------------------------------------------------------\
Examples: (float str----->int--->Not Possible )\
-------------------------------------------------------------------\
>>> a="12.45"\
>>> print(a, type(a))---------12.45 <class 'str'>\
>>> b=int(a)----------ValueError: invalid literal for int() with base 10: '12.45'\
-------------------------------------------------------------------------------------------\
Examples: (bool str----->int--->Not Possible          )\
-------------------------------------------------------------------\
>>> a="True"\
>>> print(a, type(a))----------True <class 'str'>\
>>> b=int(a)----------ValueError: invalid literal for int() with base 10: 'True'\
---------------------------------------------------------------------------------\
Examples: (complex str----->int--->Not Possible          )\
-------------------------------------------------------------------\
>>> a="2+3.4j"\
>>> print(a, type(a))-----------2+3.4j <class 'str'>\
>>> b=int(a)------------ValueError: invalid literal for int() with base 10: '2+3.4j'\
------------------------------------------------------------------------------------\
Examples: (pure str----->int--->Not Possible          )\
-------------------------------------------------------------------\
>>> a="KVR"\
>>> print(a, type(a))-----------KVR <class 'str'>\
>>> b=int(a)------------ValueError: invalid literal for int() with base 10: 'KVR'\
====================================X===================================\
========================================\
						b) float()\
		========================================\
=>This function is used for converting any type of Possible  value into float type value.\
\
=>Syntax:-   varname=float(int / bool / complex / str)\
\
Examples(int---->float-->Possible:\
------------------------------------------------\
>>> a=100\
>>> print(a,type(a))--------100 <class 'int'>\
>>> b=float(a)\
>>> print(b,type(b))--------100.0 <class 'float'>	\
--------------------------------------------------------------------\
Examples(bool---->float-->Possible)\
--------------------------------------------------\
>>> a=True\
>>> print(a,type(a))-----------------True <class 'bool'>\
>>> b=float(a)\
>>> print(b,type(b))-------------1.0 <class 'float'>\
>>> a=False\
>>> print(a,type(a))-------------False <class 'bool'>\
>>> b=float(a)\
>>> print(b,type(b))----------0.0 <class 'float'>\
----------------------------------------------------------------------\
Examples(complex---->float-->Not Possible)\
-----------------------------------------------------------------------\
>>> a=2+4.5j\
>>> print(a,type(a))-------------(2+4.5j) <class 'complex'>\
>>> b=float(a)----------TypeError: can't convert complex to float\
------------------------------------------------------------------------------------------\
Examples(int str---->float-->Possible)\
-----------------------------------------------------------------------\
>>> a="12"\
>>> print(a,type(a))---------12 <class 'str'>\
>>> b=float(a)\
>>> print(b,type(b))-------12.0 <class 'float'>\
------------------------------------------------------------------------\
Examples(float str---->float-->Possible)\
-----------------------------------------------------------------------\
>>> a="12.34"\
>>> print(a,type(a))-----------12.34 <class 'str'>\
>>> b=float(a)\
>>> print(b,type(b))-----------12.34 <class 'float'>\
------------------------------------------------------------------------\
Examples(bool str---->float-->Not Possible     )\
-----------------------------------------------------------------------\
>>> a="True"\
>>> print(a,type(a))-----------True <class 'str'>\
>>> b=float(a)---------ValueError: could not convert string to float: 'True'\
-------------------------------------------------------------------------------------\
Examples(complex str---->float--> Not Possible    )\
-----------------------------------------------------------------------\
>>> a="2+6.7j"\
>>> print(a,type(a))---------(2+6.7j) <class 'str'>\
>>> b=float(a)--------TypeError: can't convert complex to float\
-------------------------------------------------------------------------------------------\
Examples(pure str---->float--> Not Possible    )\
-----------------------------------------------------------------------\
>>> a="KVR.34"\
>>> print(a,type(a))-------------KVR.34 <class 'str'>\
>>> b=float(a)---------ValueError: could not convert string to float: 'KVR.34'\
====================================\
				c) bool()\
		====================================\
=>This function is used for converting any type of Possible  value into bool type value.\
\
=>Syntax:-   varname=bool(int / float / complex / str)		\
\
=>HINT:- ALL NON-ZERO VALUES ARE TRUE\
                ALL ZERO VALUES ARE  FALSE\
------------------\
Examples:\
-----------------------------------------------\
Examples(int---->bool-->Possible)\
------------------------------------------------\
>>> a=123\
>>> print(a,type(a))------------123 <class 'int'>\
>>> b=bool(a)\
>>> print(b,type(b))----------True <class 'bool'>\
>>> a=-134\
>>> print(a,type(a))-----------134 <class 'int'>\
>>> b=bool(a)\
>>> print(b,type(b))---------True <class 'bool'>\
>>> a=0\
>>> print(a,type(a))----------0 <class 'int'>\
>>> b=bool(a)\
>>> print(b,type(b))--------False <class 'bool'>\
-----------------------------------------------\
Examples(float---->bool-->Possible)\
------------------------------------------------\
>>> a=12.34\
>>> print(a,type(a))-------------12.34 <class 'float'>\
>>> b=bool(a)\
>>> print(b,type(b))----------True <class 'bool'>\
>>> a=0.0\
>>> print(a,type(a))----------0.0 <class 'float'>\
>>> b=bool(a)\
>>> print(b,type(b))---------False <class 'bool'>\
>>> a=0.0000000000000000000000000000000000001\
>>> print(a,type(a))------- 1e-37 <class 'float'>\
>>> b=bool(a)\
>>> print(b,type(b))---------True <class 'bool'>\
-------------------------------------------------------------------------------\
Examples(complex---->bool-->Possible)\
------------------------------------------------\
>>> a=2+3j\
>>> print(a,type(a))--------------(2+3j) <class 'complex'>\
>>> b=bool(a)\
>>> print(b,type(b))---------True <class 'bool'>\
>>> a=0+0j\
>>> print(a,type(a))-------0j <class 'complex'>\
>>> b=bool(a)\
>>> print(b,type(b))--------False <class 'bool'>\
---------------------------------------------------------------------------\
Examples(str---->bool-->Possible   )\
--------------------------------------------------------------\
>>> a="PYTHON"\
>>> print(a,type(a))----------------PYTHON <class 'str'>\
>>> b=bool(a)\
>>> print(b,type(b))-------------True <class 'bool'>\
>>> a="$%#12kvr"\
>>> print(a,type(a))-----------$%#12kvr <class 'str'>\
>>> b=bool(a)\
>>> print(b,type(b))----------True <class 'bool'>\
>>> a=" "\
>>> print(a,type(a))-----------  <class 'str'>\
>>> b=bool(a)\
>>> print(b,type(b))---------True <class 'bool'>\
>>> a=""\
>>> print(a,type(a))---------- <class 'str'>\
>>>b=bool(a)\
>>> len(a)----------0\
>>> print(b,type(b))---------False <class 'bool'>\
>>> bool(str())----------False\
>>> len(str())------------0\
=======================================================================================\
==========================================\
				d) complex()\
		==========================================\
=>This function is used for converting any type of Possible  value into complex type value.\
\
=>Syntax:-   varname=complex(int / float / bool / str)			\
------------------------------------------------\
Examples:(int---->complex---Possible)\
-----------------------\
>>> a=10\
>>> print(a, type(a))----------10 <class 'int'>\
>>> b=complex(a)\
>>> print(b, type(b))--------(10+0j) <class 'complex'>\
------------------------------------------------\
Examples:(float---->complex---Possible)\
--------------------------------------------------------\
>>> a=2.3\
>>> print(a, type(a))------------2.3 <class 'float'>\
>>> b=complex(a)\
>>> print(b, type(b))-------------(2.3+0j) <class 'complex'>\
------------------------------------------------\
Examples:(bool---->complex---Possible)\
--------------------------------------------------------\
>>> a=True\
>>> print(a, type(a))-----------True <class 'bool'>\
>>> b=complex(a)\
>>> print(b, type(b))-------(1+0j) <class 'complex'>\
----------------------------------------------------------------------------\
Examples:(Str type(int, float)---->complex---Possible)\\\
                  ( Str Type(bool, pure str)--->Complex--Not Possible)\
-------------------------------------------------------------------------------------------\
>>> s="2"\
>>> print(s, type(s))-----------2 <class 'str'>\
>>> b=complex(s)\
>>> print(b, type(b))-----------(2+0j) <class 'complex'>\
>>> s="2.5"\
>>> print(s, type(s))-----------2.5 <class 'str'>\
>>> b=complex(s)\
>>> print(b, type(b))-----------(2.5+0j) <class 'complex'>\
>>> s="True"\
>>> print(s, type(s))----------True <class 'str'>\
>>> b=complex(s)----------ValueError: complex() arg is a malformed string\
>>> s="Python"\
>>> print(s, type(s))---------Python <class 'str'>\
>>> b=complex(s)----------ValueError: complex() arg is a malformed string\
------------------------------------------------------------------------------\
(Str complex------Complex--Possible)\
------------------------------------------------------------------------------\
>>> a="2+3j"\
>>> print(a, type(a))------------2+3j <class 'str'>\
>>> b=complex(a)\
>>> print(b, type(b))--------------(2+3j) <class 'complex'>\
\
===================================\
					e) str()\
			===================================\
=>This function is used for converting any type of Possible  value into str type value.\
\
=>Syntax:-   varname=str(int / float / bool / complex)		\
-------------------------------------\
Examples:\
------------------------------------\
>>> a=12\
>>> print(a, type(a))---------12 <class 'int'>\
>>> b=str(a)\
>>> b----------'12'\
>>> print(b, type(b))-------12 <class 'str'>\
>>> a=12.34\
>>> print(a, type(a))------------12.34 <class 'float'>\
>>> b=str(a)\
>>> print(b, type(b))---------12.34 <class 'str'>\
>>> a=True\
>>> print(a, type(a))--------True <class 'bool'>\
>>> b=str(a)\
>>> print(b, type(b))---------True <class 'str'>\
>>> a=23.45+45.67j\
>>> print(a, type(a))-------------(23.45+45.67j) <class 'complex'>\
>>> b=str(a)\
>>> print(b, type(b))---------(23.45+45.67j) <class 'str'>\
>>> a="KVR"\
>>> print(a, type(a))---------KVR <class 'str'>\
>>> b=str(a)\
>>> print(b, type(b))---------------KVR <class 'str'>\
================================X=====================================\
=========================================\
				bytes\
		==========================================\
=>'bytes' is one of the pre-defined class and treated as sequence data type\
=>The purpose of bytes data type is that to store Numerical Possitive Integer Values         ranges from 0 to 256 i.e it store the values from 0 to 255 (256-1)\
=>bytes data type does not contain any symbolic notation to represent bytes values.        But we can convert other type values into bytes type values by using bytes().\
	\
	Syntax:-    varname=bytes(list/ tuple/ set/ frozenset)\
=>On the object bytes data type, we can perform Indexing and slicing Operations.\
=>An object of bytes maintains Insertion Order (or) Preserves insertion Order ( In whichever order, we insert the data, in the same order data will be displayed)\
=>An object of bytes is immutable.\
Examples:\
-----------------\
>>> l1=[12,0,10,30,40,56,255]\
>>> b=bytes(l1)\
>>> print(type(b))-------------<class 'bytes'>\
>>> print(l1)-------------[12, 0, 10, 30, 40, 56, 255]\
>>> print(b)-----------    b'\\x0c\\x00\\n\\x1e(8\\xff'   (encrypted Format )(\
>>> for v in b:\
...              print(v)\
					...\
					12\
					0\
					10\
					30\
					40\
					56\
					255\
>>> print(b[0])----------------------12\
>>> print(b[1])---------------------0\
>>> print(b[2])------------------10\
>>> print(b[0:5])--------------b'\\x0c\\x00\\n\\x1e('\
>>> for x in b[0:5]:\
...           print(x)\
					...\
					12\
					0\
					10\
					30\
					40\
================================================================================================\
===================================================\
					bytearray\
	====================================================\
=>'bytearray' is one of the pre-defined class and treated as sequence data type\
=>The purpose of bytearray data type is that to store Numerical Possitive Integer Values  ranges from 0 to 256 i.e it store the values from 0 to 255 (256-1)\
=>bytearray data type does not contain any symbolic notation to represent bytearray values. But we can convert other type values into bytearray type values by using bytearray().\
\
	Syntax:-    varname=bytearray(list/ tuple/ set/ frozenset)\
\
=>On the object bytearray data type, we can perform Indexing and slicing Operations.\
=>An object of bytearray maintains Insertion Order (or) Preserves insertion Order ( In whichever order, we insert the data, in the same order data will be displayed)\
=>An object of bytearray is mutable.\
\
Note:- The Functionality of bytearray is exactly  similar to bytes data type but an object bytearray belongs  to mutable and bytes object belongs immutable.\
------------------------------------------------------------------------------------------------------------\
Examples:\
-----------------\
>>> l=[10,23,45,255]\
>>> ba=bytearray(l)\
>>> print(ba)-------------------bytearray(b'\\n\\x17-\\xff')\
>>> print(type(ba))----------<class 'bytearray'>\
>>> for x in ba:\
...     print(x)\
				...\
				10\
				23\
				45\
				255\
>>> print(id(ba))---------------2433089030064\
>>> print(ba[0])--------------10\
>>> print(ba[1])-------------23\
>>> ba[0]=123\
>>> for x in ba:\
...     print(x)\
				...\
				123\
				23\
				45\
				255\
>>> print(id(ba))---------------2433089030064\
=========================================\
				range	\
		========================================\
=>'range' is on the pre-defined class and treated as sequence data type.\
=>The purpose of range data type that to store seqeunce of values with equal interval\
=>On the range object we can perform indexing and slicing operations\
=>An object of range belongs to immutable.\
=>range data type provides the following syntaxes:\
-------------------------------------------------------------------------\
Syntax1:-   varname=range(value):\
=>here varname is an object <class,'range'>\
=>This syntax generates range object from 0 to value-1\
\
Examples:-	\
>>> r=range(11)\
>>> print(r)\
range(0, 11)\
>>> print(type(r))\
<class 'range'>\
>>> for x in r:\
...     print(x)\
...\
			0\
			1\
			2\
			3\
			4\
			5\
			6\
			7\
			8\
			9\
			10\
>>> for x in range(5):\
...     print(x)\
			...\
			0\
			1\
			2\
			3\
			4\
--------------------------------------------------------------------------\
Syntax2:-  varname= range(start,stop)\
=>This syntax generates range object from start to stop-1 values\
Examples:\
---------------\
>>> r=range(1,11)\
>>> print(r)----------range(1, 11)\
>>> print(type(r))-------------<class 'range'>\
>>> for x in r:\
...     print(x)\
...\
1\
2\
3\
4\
5\
6\
7\
8\
9\
10\
>>> for x in range(1000,1006):\
...     print(x)\
...\
1000\
1001\
1002\
1003\
1004\
1005\
-----------------------------------------------------------------------------\
Syntax1:-    range(start,stop,step)\
\
=>This syntax generates range object from start to stop-1 values with spoecified interval value called step.\
\
Examples:\
--------------\
>>> r=range(10,101,10)\
>>> print(r, type(r))\
range(10, 101, 10) <class 'range'>\
>>> for x in r:\
...     print(x)\
...\
10\
20\
30\
40\
50\
60\
70\
80\
90\
100\
>>> for x in range(1000,1101,20):\
...     print(x)\
...\
1000\
1020\
1040\
1060\
1080\
1100\
>>> for k in range(100,9,-30):\
...     print(k)\
...\
100\
70\
40\
10\
>>> for x in range(-1,-11,-1):\
...     print(x)\
...\
-1\
-2\
-3\
-4\
-5\
-6\
-7\
-8\
-9\
-10\
---------------------------------\
>>> for x in range(-10,0):\
...     print(x)\
...\
-10\
-9\
-8\
-7\
-6\
-5\
-4\
-3\
-2\
-1\
>>> for x in range(-10,0,1):\
...     print(x)\
...\
-10\
-9\
-8\
-7\
-6\
-5\
-4\
-3\
-2\
-1\
-----------------------------------------------------\
>>> for k in range(-5,6):\
...     print(k)\
...\
-5\
-4\
-3\
-2\
-1\
0\
1\
2\
3\
4\
5\
>>> for k in range(-5,6,1):\
...     print(k)\
...\
-5\
-4\
-3\
-2\
-1\
0\
1\
2\
3\
============================================\
>>> r=range(10,21)\
>>> print(r[0])\
10\
>>> print(r[-11])\
10\
>>> print(r[-10])\
11\
>>> print(r[-1])\
20\
>>> print(r[-111])----------IndexError: range object index out of range\
>>> print( r[2:7] )---------range(12, 17)\
>>> for x in r[2:7]:\
...     print(x)\
...\
12\
13\
14\
15\
16\
>>> for x in r[2:7:2]:\
...     print(x)\
...\
12\
14\
16\
--------------------------------\
Special Examples:\
-------------------------------\
>>> print(range(20,31)[1])\
21\
>>> print(range(20,31)[-1])\
30\
>>> for x in range(-5,6)[2:5]:\
...     print(x)\
...\
-3\
-2\
-1\
>>>\
=============================================================================================\
Mutable and Immutable objects\
=============================================================================================\
1) Mutable object:-\
				-Whose content can be changed as same address\
\
2)Immutable object:-\
				-Whose content can\'92t changed same address\
				\
				-whose content can changed and modified\
=============================================================================================\
===============================================\
		III) List type data types (Collections Data Types )\
	===============================================\
=>The purpose of List type data types is that to store multiple values either of same type or different type or both types with unique and duplicates values.\
=>We have two types of List type data types. They are\
		a) list  (mutable)\
		b) tuple (immutable)\
===================================================================\
a) list  \
===================================================\
=>'list' is one of the pre-defined class and treated as list type data type \
=>The purpose of List type  is that to store multiple values either of same type or different type or both types with unique and duplicates values.\
=>The elements of list must be written within square brackets [ ] and elements must seprated by comma .\
=>An object of list maintains insertion order.\
=>On the object of list , we can perform indexing and slicing operations.\
=>An object of list belongs to mutable.\
=>We have two types of list objects.\
=>To convert ont type elements into list type elements, we use list()\
		a) empty list\
		b) non-empty list\
a) empty list:\
-------------------\
=>An empty list is one, which does not contain any elements and wose length =0\
Syntax:-     listobj=[]\
		      (or)\
                   listobj=list()\
================================================================\
Examples:\
-----------------\
>>> l1=[10,20,30,10,34]\
>>> print(l1, type(l1))----------------[10, 20, 30, 10, 34] <class 'list'>\
>>> l2=[10,"KVR","OUCET",94.25,"HYD"]\
>>> print(l2, type(l2))---------------[10, 'KVR', 'OUCET', 94.25, 'HYD'] <class 'list'>\
>>> print(l2[0])--------------10\
>>> print(l2[2])--------------OUCET\
>>> print(l2[4])----------------HYD\
>>> print(l2[14])------------IndexError: list index out of range\
>>> print(l2[0:4])------------[10, 'KVR', 'OUCET', 94.25]\
>>> print(id(l2))------------2908432554304\
>>> l2[0]=123\
>>> print(l2)-------------[123, 'KVR', 'OUCET', 94.25, 'HYD']\
>>> print(id(l2))-----------------2908432554304\
>>> l3=[]\
>>> print(l3, type(l3))---------------[] <class 'list'>\
>>> l4=list()\
>>> print(l4, type(l4))---------------------[] <class 'list'>\
>>> len(l3)------------0\
>>> len(l4)--------------0\
>>> print(len(l3), len(l4))--------------0 0\
\
==========================================================\
========================================\
			Functions in list object\
		=========================================\
=>To perform additional operations on list object along with slicing and indexing, we use the following prte-defined functions.\
\
1) append():\
    -------------\
 =>This function is used for adding any element to list object at end (knows appending).\
 	Syntax:-     listobj.append(element)\
Examples:\
--------------\
>>> l1=[]\
>>> print(l1, len(l1), type(l1))----------[] 0 <class 'list'>\
>>> l1.append(10)\
>>> print(l1, len(l1), type(l1))-----------[10]  1  <class 'list'>\
>>> l1.append("Rossum")\
>>> print(l1, len(l1))---------------[10, 'Rossum'] 2\
>>> l1.append(12.34)\
>>> print(l1, len(l1))----------[10, 'Rossum', 12.34]     3\
>>> l2=[10,"Bharat"]\
>>> print(l2)-----------------[10, 'Bharat']\
>>> l2.append(23.45)\
>>> print(l2)---------------[10, 'Bharat', 23.45]\
>>> l2.append("Hyd")-----------\
>>> print(l2)-------------[10, 'Bharat', 23.45, 'Hyd']\
--------------------------------------------------------------------------------\
2) insert();\
=>This function is used for inserting the specified element in list object by specifying valid existing index.\
Syntax:-    listobj.insert(index, element)\
Examples:\
--------------\
>> l2=[10,"Bharat",23.45,"HYD"]\
>>> print(l2)-------------[10, 'Bharat', 23.45, 'HYD']\
>>> l2.insert(2,"python")\
>>> print(l2)-------------[10, 'Bharat', 'python', 23.45, 'HYD']\
>>> l2.insert(2,"ampt")\
>>> print(l2)-----------[10, 'Bharat', 'ampt', 'python', 23.45, 'HYD']\
>>> l2[4]=43.45\
>>> print(l2)------------[10, 'Bharat', 'ampt', 'python', 43.45, 'HYD']\
-----------------------------------------------------------------------\
3) remove():\
----------------------\
=>This function is used for removing the first occurentce of specified element.\
    if the specified element then we get  ValueError: list.remove(x): x not in list\
=>  syntax:   listobj.remove(element)\
Examples:\
------------------\
>>> l3=[10,"Raju",23.45,10,"Raju","HYD"]\
>>> print(l3)--------------[10, 'Raju', 23.45, 10, 'Raju', 'HYD']\
>>> l3.remove(10)\
>>> print(l3)-------------['Raju', 23.45, 10, 'Raju', 'HYD']\
>>> l3.remove(10)\
>>> print(l3)----------------['Raju', 23.45, 'Raju', 'HYD']\
>>> l3.remove(10)-----------ValueError: list.remove(x): x not in list\
-------------------------------------------------------------------------------\
4) pop(index):\
---------------------------\
=>This function is used for removing the element of list based on valid index.\
=>if the index is invalid then we get IndexError\
=>Syntax:-   listobj.pop(index)\
Examples:\
-----------------------\
>>>l3=[10, 23.45, 10, 'Raju', 'HYD']\
>>> l3.pop(0)------------10\
>>> print(l3)---------[23.45, 10, 'Raju', 'HYD']\
>>> l3.pop(11)-----------IndexError: pop index out of range\
>>> print(list().pop(0))-----IndexError: pop from empty list\
---------------------------\
5) pop():\
-------------------------\
=>This function is used for removing last element of list object.\
=>when we call pop() upon empty list object then we get IndexError\
=>Syntax:-  listobj.pop()\
\
Examples:\
------------------\
>>> l3=[10,"Raju",23.45,10,"Raju","HYD"]\
>>> l3.pop()-----------'HYD'\
>>> print(l3)------[10, 'Raju', 23.45, 10, 'Raju']\
>>> l3.pop()-----------'Raju'\
>>> print(l3)-------------[10, 'Raju', 23.45, 10]\
>>> l3.pop()----------10\
>>> print(l3)------------[10, 'Raju', 23.45]\
>>> l3.pop()------------23.45\
>>> print(l3)-------------[10, 'Raju']\
>>> l3.pop()----------------'Raju'\
>>> print(l3)--------------[10]\
>>> l3.pop()------------10\
>>> print(l3)--------------[]\
>>> l3.pop()-------------IndexError: pop from empty list\
\
Special Case\
---------------------------\
>>> print([].pop())----------IndexError: pop from empty list\
>>> print(list().pop())----------IndexError: pop from empty list\
-----------------------------------------------------------------------------------------\
6) count():\
   ---------------\
=>This function is used for finding number of occurences of a specified  element.\
=>The specified eleemnt does not exists then whose count 0.\
=>Syntax:   listobj.count(element)\
Examples:\
----------------\
>>> l1=[10,20,30,40,10,20,10,20]\
>>> print(l1)------------------[10, 20, 30, 40, 10, 20, 10, 20]\
>>> l1.count(10)--------------3\
>>> l1.count(20)--------------3\
>>> l1.count(40)---------------1\
>>> l1.count(50)-----------------0\
>>> l1.count("KVR")-------------0\
------------------------------------------------------------------\
7) reverse():\
--------------------\
=>This function is used for obtaing reverse order oginial elements of list.\
=>Syntax:-   listobj.reverse()\
-----------------\
Examples:\
-----------------\
>>> l1=[10,20,30,40,40-50,0,12]\
>>> print(l1)------------[10, 20, 30, 40, -10, 0, 12]\
>>> l1.reverse()\
>>> print(l1)-----------[12, 0, -10, 40, 30, 20, 10]\
------------------------------------------------------------------\
8) sort()\
--------------\
=>This function is used for sorting similar type data of list object in ASCending order by default.\
=>Syntax:   listobj.sort()   (or)  listobj.sort(reverse=False)\
=>Syntax:   listobj.sort(reverse=True)------DESC order\
\
\
Examples:\
-----------------\
>>> l1=[10,20,30,40,40-50,0,12]\
>>> print(l1)----------[10, 20, 30, 40, -10, 0, 12]\
>>> l1.sort()\
>>> print(l1)-----------[-10, 0, 10, 12, 20, 30, 40]----ASC \
>>> l1.reverse()\
>>> print(l1)----------[40, 30, 20, 12, 10, 0, -10]---DESC\
-------------------------------------------------------------------\
Special Case:\
----------------------\
>>> l1=[10,20,30,40,40-50,0,12]\
>>> print(l1)---------------[10, 20, 30, 40, -10, 0, 12]\
>>> l1.sort(reverse=True)\
>>> print(l1)---------------[40, 30, 20, 12, 10, 0, -10]\
>>> l1.reverse()\
>>> print(l1)-----------------[-10, 0, 10, 12, 20, 30, 40]\
>>> l1=[10,20,30,40,40-50,0,12]\
>>> print(l1)--------------[10, 20, 30, 40, -10, 0, 12]\
>>> l1.sort(reverse=False)\
>>> print(l1)--------------[-10, 0, 10, 12, 20, 30, 40]\
--------------------------------------------------------------------------------------------------\
9) copy():\
----------------\
=>This function is used for copying the content of one list object into another list object(shallow copy).\
\
=>Syntyax:-      listobj2= listobj1.copy()\
\
=>We have We have two types of copy mechanisma. They are	\
		a) Shallow Copy\
		b) Deep Copy\
\
a) Shallow Copy\
------------------------\
=>In this Copy process,	\
		a) Initially, Both the objects content is same\
		b) Both objects memory address are different.\
		c) Modification on both the objects are Indepenedent (or) modifications are     not reflected to each other.\
=>To implement shallow copy, we use copy()\
b) Deep Copy\
---------------------\
=>In this Copy process,	\
		a) Initially, Both the objects content is same\
		b) Both objects memory address are Same.\
		c) Modification on both the objects are depenedent (or) modifications are      reflected to each other.\
=>=>To implement deep copy, we use assignment operator ( = )\
=>Syntax:-     listobj2=listobj1\
-----------------------------------------------------------------------------\
Examples of shallow copy:-\
---------------------------------------\
>>> l1=[10,"KVR","Hyd","Python"]\
>>> l2=l1.copy()\
>>> print(l1)------------------[10, 'KVR', 'Hyd', 'Python']\
>>> print(l2)----------------[10, 'KVR', 'Hyd', 'Python']\
>>> print(id(l1))-------------2868252301184\
>>> print(id(l2))-------------2868252275008\
>>> l1.append(11.11)\
>>> l2.insert(2,"India")\
>>> print(l1, id(l1))---------[10, 'KVR', 'Hyd', 'Python', 11.11] 2868252301184\
>>> print(l2, id(l2))--------[10, 'KVR', 'India', 'Hyd', 'Python'] 2868252275008\
-------------------------------------------\
Examples of deep copy:-\
---------------------------------------\
>>> l1=[10,"KVR","Hyd","Python"]\
>>> l2=l1  # DEEP COPY \
>>> print(l1, id(l1))-------------[10, 'KVR', 'Hyd', 'Python'] 2868252591232\
>>> print(l2, id(l2))------------------[10, 'KVR', 'Hyd', 'Python'] 2868252591232\
>>> l1.append(22.22)\
>>> print(l1, id(l1))----------[10, 'KVR', 'Hyd', 'Python', 22.22] 2868252591232\
>>> print(l2, id(l2))------------[10, 'KVR', 'Hyd', 'Python', 22.22] 2868252591232\
>>> l2.insert(2,"India")-\
>>> print(l1, id(l1))--------[10, 'KVR', 'India', 'Hyd', 'Python', 22.22] 2868252591232\
>>> print(l2, id(l2))---------[10, 'KVR', 'India', 'Hyd', 'Python', 22.22] 2868252591232\
=================================================================\
10) extend():\
------------------\
=>This function is used for extending functionality of one list object with another list object. In otherwords, we can add one list elements to another list.\
Syntax:-     listobj1.extend(listobj2)\
\
Note:- Bysuing opereator +, we can add two or more list objects into another list object.\
\
Examples:\
---------------\
>>> l1=[10,"Anurag","Hyd"]\
>>> print(l1, id(l1))---------[10, 'Anurag', 'Hyd'] 2868252275008\
>>> l2=["PYTHON","JAVA","DS with AI"]\
>>> print(l2, id(l2))------['PYTHON', 'JAVA', 'DS with AI'] 2868252301184\
>>> l1.extend(l2)\
>>> print(l1)-------[10, 'Anurag', 'Hyd', 'PYTHON', 'JAVA', 'DS with AI']\
>>> l1=[10,"Anurag","Hyd"]\
>>> l2=["PYTHON","JAVA","DS with AI"]\
>>> l3=["Oracle","MySql","SQLITE3"]\
>>> l1.extend(l2,l3)---------TypeError: list.extend() takes exactly one argument (2 given)\
>>> l1=l1+l2+l3   # using + we can extend the functionality two or more list objects.\
>>> print(l1)--[10, 'Anurag', 'Hyd', 'PYTHON', 'JAVA', 'DS with AI', 'Oracle', 'MySql', 'SQLITE3']\
>>> print(l2)------['PYTHON', 'JAVA', 'DS with AI']\
>>> print(l3)-------['Oracle', 'MySql', 'SQLITE3']\
-------------------------------------------------------------------------------\
=========================================\
				inner (or ) nested list\
		==========================================\
=>The process of defining one list in another list is called inner or nested list.\
=>Syntax:\
---------------\
	listobj=[ elements of list, [ inner list elements]......[inner list elements]..  ]\
\
\
Syntax accessing the lements of inner list:\
--------------------------------------------------------------\
listobj[innerlist index]\
---------------------------------------------------------------\
=>We can apply indexing and slicing Operations.\
=>We can apply all the functions of list on inner list.,\
\
Example:\
requirement:-  i want to store student details like stno,name, Inernal marks of 4 subjects and external marks of 4 subs and college name\
--------------------------------------------------------------------------------------------------------\
>>> sl=[10,"Mukul",[20,15,16,19],[66,77,80,78],"OUCET"]\
>>> print(sl)------------------------[10, 'Mukul', [20, 15, 16, 19], [66, 77, 80, 78], 'OUCET']\
>>> print(sl[0])-------------10\
>>> print(sl[1])------------Mukul\
>>> print(sl[2])------------[20, 15, 16, 19]\
>>> print(sl[-2])-------------[66, 77, 80, 78]\
>>> print(sl[-1])-------------OUCET\
>>> print(sl[2][-1])------------19\
>>> print(sl[-3][-4])-----------20\
>>> sl[2][-3]=17\
>>> print(sl)----[10, 'Mukul', [20, 17, 16, 19], [66, 77, 80, 78], 'OUCET']\
>>> sl[2].append(20)\
>>> print(sl)-----[10, 'Mukul', [20, 17, 16, 19, 20], [66, 77, 80, 78], 'OUCET']\
>>> sl[-2].insert(1,80)\
>>> print(sl)--------[10, 'Mukul', [20, 17, 16, 19,
\fs18 \cb2 \strokec3  
\fs28 \cb2 \strokec3 20], [66, 80, 77, 80, 78], 'OUCET']\
>>> sl[-2].count(80)--------2\
=======================================\
				tuple\
		========================================\
=>'tuple' is one of the pre-defined class and treated as list type data type \
=>The purpose of tuple type  is that to store multiple values either of same type or different type or both types with unique and duplicates values.\
=>The elements of tuple must be written within braces ( ) and elements must seprated by comma .\
=>An object of tuple maintains insertion order.\
=>On the object of tuple , we can perform indexing and slicing operations.\
=>An object of tuple belongs to immutable.\
=>To convert one type value into tuple type, we use tuple()\
=>We have two types of tuple objects.\
		a) empty tuple\
		b) non-empty tuple\
a) empty tuple:\
--------------------\
=>It does not contain any elements and whose size is 0\
		Syntax:-   varname= ()\
					(or)\
				  varname= tuple()\
b) non-empty tuple:\
--------------------\
=>It  contain  elements and whose size is > 0\
		Syntax:-   varname= (list elements)\
Note:- The functionality of tuple is extactly similar to the functionality of list but an object tuple belongs to immutable and list object belongs to mutable.\
--------------------------------------------------------------------------------------------------\
Examples:\
-----------------\
>>> t1=()\
>>> print(t1, type(t1))------------() <class 'tuple'>\
>>> t2=tuple()\
>>> print(t2, type(t2))-------------() <class 'tuple'>\
>>> len(t1)-----------0\
>>> len(t2)-----------0\
>>> t3=(10,30,20,10,30,45)\
>>> print(t3, type(t3))------------(10, 30, 20, 10, 30, 45) <class 'tuple'>\
>>> t3=(10,"Rossum","hyd",34.56)\
>>> print(t3, type(t3))---------(10, 'Rossum', 'hyd', 34.56) <class 'tuple'>\
>>> t4=110,"JG","SUN",45.67\
>>> print(t4, type(t4))-----------(110, 'JG', 'SUN', 45.67) <class 'tuple'>\
>>> a=10\
>>> print(a, type(a))-------------10 <class 'int'>\
>>> b=10,\
>>> print(b, type(b))--------(10,) <class 'tuple'>\
>>> b=(100,200,)\
>>> print(b, type(b))-----------(100, 200) <class 'tuple'>\
------------------------------------------------------------------------------\
>>> t3=(10,30,20,10,30,45)\
>>> print(t3[0])----------10\
>>> print(t3[1])----------30\
>>> len(t3)-------6\
>>> print(t3[5])---------45\
>>> print(t3[len(t3)-1])------45\
>>> print(t3[len(t3)])-------IndexError: tuple index out of range\
>>> print(t3[1:4])--------(30, 20, 10)\
>>> print(t3,id(t3))------(10, 30, 20, 10, 30, 45) 2868252533280\
>>> t3[0]=100------TypeError: 'tuple' object does not support item assignment\
-------------------------------------------------------------------------------------------------------\
==========================================\
				a) set (Mutable and Immutable)\
		==========================================\
=>'set' is one of the pre-defined class and treated as set data type.\
=>The purpose of set data type is that to  store multiple values either of same type or different type or both types with unique values.\
=>The elements of set must be written within curly braces \{  \} and elements must	            separated by comma.\
=>An object of set never maiontains insertion order bcoz it can display any its                     possibility among multple possibilites.\
=>On the object of set, we can't perform indexing and slicing operations bcoz it never maintains insertion order.\
=>To convert one type value into set type value, we use set().\
=>An object of set belongs to both mutable(in the case of add() ) and immutable (in the case of item assignment )\
=>We have two types of sets. They are\
		a) empty set\
		b) non-empty set\
a) empty set:\
------------------\
=>empty set does not contain elements and whose size is 0\
Syntax: -     varname=set()\
\
b) non-empty set:\
------------------\
=>non-empty set  contains elements and whose size is >0\
Syntax: -     varname=\{set of elements \}\
----------------------------------------------------------------------------------------------------\
Examples-:\
------------------\
>>> s1=()\
>>> s2=set()\
>>> s3=\{10,20,30,-4,50,10\}\
>>> s4=\{10,"Rossum",23.45,True\}\
>>> print(s1, type(s1))---------() <class 'tuple'>\
>>> print(s2, type(s2))-----------set() <class 'set'>\
>>> print(s3, type(s3))--------\{50, 20, 10, -4, 30\} <class 'set'>\
>>> print(s4, type(s4))---------\{True, 10, 'Rossum', 23.45\} <class 'set'>\
>>> print(s3[0])----TypeError: 'set' object is not subscriptable\
>>> print(s3[0:3])--------TypeError: 'set' object is not subscriptable\
--------------------------------------------------------------------------------------------------------\
=========================================\
				Functions in set\
		==========================================\
\
a) add():\
------------\
=>This function is used for adding any type element to the set object\
=>Syntax:-      setobj.add(element)\
\
Examnples:\
-----------------\
>>> s1=set()\
>>> print(s1, type(s1), len(s1))-------set() <class 'set'> 0\
>>> s1.add(100)\
>>> s1.add("Rossum")\
>>> s1.add(23.45)\
>>> s1.add(True)\
>>> print(s1, type(s1), len(s1))-----\{True, 'Rossum', 100, 23.45\} <class 'set'> 4\
-----------------------------------------------------------------------------------\
b)remove()\
=>This function is used for remoiving a perticular element from set object.\
=>If the specified element does not exists then we get KeyError\
=>Syntax:-         setobj.remove(element)\
----------------\
Examples:\
----------------\
>>> s1=\{True, 'Rossum', 100, 23.45\}\
>>> print(s1)\
\{True, 'Rossum', 100, 23.45\}\
>>> s1.remove(100)\
>>> print(s1)\
\{True, 'Rossum', 23.45\}\
>>> s1.remove(100)\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
KeyError: 100\
------------------------------------------------------------------------------------------\
c)discard()\
---------------\
=>This function is used for removing / discarding  a perticular element from set object otherwise never removed.\
=>If the specified element does not exists then we never get any error\
Syntax:-    setobj.discard(element)\
Examples:-\
----------------\
>>> s1=\{True, 'Rossum', 100, 23.45\}\
>>> print(s1)-----------\{True, 'Rossum', 100, 23.45\}\
>>> s1.discard(23.45)\
>>> print(s1)------------\{True, 'Rossum', 100\}\
>>> s1.discard(123.45)\
>>> print(s1)-------------\{True, 'Rossum', 100\}\
----------------------------------------------------------------------------\
d)pop():\
---------------\
=>This function is used for removing any arbitrary element from set object.\
Syntax:-     setobj.pop()\
Examples:\
----------------\
>>> s1=\{True, 'Rossum', 100, 23.45\}\
>>> print(s1)-----------\{True, 'Rossum', 100, 23.45\}\
>>> s1.pop()---------True\
>>> print(s1)-------\{'Rossum', 100, 23.45\}\
>>> s1.pop()----------'Rossum'\
>>> print(s1)----------\{100, 23.45\}\
>>> s1.pop()----------100\
>>> print(s1)----------\{23.45\}\
>>> s1.pop()---------23.45\
>>> print(s1)---------set()\
>>> s1.pop()-------KeyError: 'pop from an empty set'\
>>> print(set().pop())-----KeyError: 'pop from an empty set'\
>>> s2=\{10,20,300,30,450,60\}\
>>> s2.pop()----------450\
>>> s2.pop()---------20\
>>> s2.pop()---------30\
>>> print(s2)--------\{10, 300, 60\}\
>>> s2.pop()---------10\
-----------------------------------------------------------------------------------------\
e) isdisjoint():\
  ------------------\
  =>This function returns True provided the two set objects are  disjoint sets [ no common elements--called disjoint sets) otherwise returns False\
  Syntax:-     setobj1.isdisjoint(setobj2)\
  Examples:\
---------------------------------\
>>> s1=\{10,20,30\}\
>>> s2=\{40,50,60\}\
>>> s3=\{30,40,70\}\
>>> s1.isdisjoint(s2)--------True\
>>> s1.isdisjoint(s3)-------False\
>>> s2.isdisjoint(s3)---------False\
>>> set().isdisjoint(set())------True\
>>> set().isdisjoint(s1)---------True\
------------------------------------------------------------------------------\
f) issuperset():\
-------------------\
=>This function returns True provided all  elements of setobj2 present in setobj1 otherwise it returns False\
		Syntax:-    setobj1.issuperset(setobj2)\
Examples:\
---------------\
>>> s1=\{10,20,30\}\
>>> s2=\{40,50,60\}\
>>> s3=\{30,40,70\}\
>>> s1.issuperset(s2)-----------False\
>>> s1.issuperset(s3)--------False\
>>> s4=\{10,20\}\
>>> s1.issuperset(s4)-----------True\
>>> s1.issuperset(set())---------True\
-----------------------------------------------------------\
f) issubset():\
-------------------\
=>This function returns True provided all the elements of setobj1 present  setobj2 otherwise it returns False\
Sytntax:-    setobj1.issubset(setobj2)\
Examples:\
-----------------\
>>> s1=\{10,20,30\}\
>>> s4=\{10,20\}\
>>> s2=\{40,50,60\}\
>>> s2.issubset(s1)---------False\
>>> s4.issubset(s1)-------True\
>>> set().issubset(s1)--------True\
>>> set().issubset(set())----------True\
>>> s2=\{10,50,60\}\
>>> s2.issubset(s1)------------False\
-------------------------------------------------------------------------------\
g) union():\
---------------\
=>This function is used for combining all specifed sets by condiderring duplicate elements as single element.\
\
Syntax:-     setobj3=setobj1.union(setobj2)\
\
>>> s1=\{10,20,30,40\}\
>>> s2=\{20,30,50,60\}\
>>> s3=s1.union(s2)\
>>> print(s3)------------\{40, 10, 50, 20, 60, 30\}\
-----------------------------------------------------------------------------\
h)intersection():\
-----------------------\
=>This function is used for extracting common elements from specified sets.\
\
=>Syntax:-    setobj3=setobj1.intersection(setobj2)\
>>> s1=\{10,20,30,40\}\
>>> s2=\{20,30,50,60\}\
>>> s4=s1.intersection(s2)\
>>> print(s4)----------\{20, 30\}\
------------------------------------------------------------------------------------------------\
i) difference()\
--------------------\
Syntax:-      setobj3=setobj1.difference(setobj2)\
\
=>This function is used for removing common elements from setobj1 and setobj2 and extract remaining from setobj1 and place them setobj3.\
Example:\
-------------\
>>> s1=\{10,20,30,40\}\
>>> s2=\{20,30,50,60\}\
>>> s5=s1.difference(s2)\
>>> print(s5)---------\{40, 10\}\
>>> s6=s2.difference(s1)\
>>> print(s6)-----------\{50, 60\}\
-----------------------------------------------------------\
j) symmetric_difference():\
-------------------------------------\
=>This function is used for obtaining exclusive elements of specified sets by elementing common elements from all the sets.\
Syntax:-   setobj3=setobj1.symmetric_difference(setobj2)\
Example:\
>>> s1=\{10,20,30,40\}\
>>> s2=\{20,30,50,60\}\
>>> s7=s1.symmetric_difference(s2)\
>>> print(s7)----------\{40, 10, 50, 60\}\
>>> s8=s2.symmetric_difference(s1)\
>>> print(s8)----------\{40, 10, 50, 60\}\
-------------------------------------------------------------------------------------\
Special case:-\
---------------------\
>>> s1=\{10,20,30,40\}\
>>> s2=\{20,30,50,60\}\
>>> s3=\{10,70,80,20\}\
>>> s4=s1.union(s2,s3)\
>>> print(s4)------------\{70, 40, 10, 80, 50, 20, 60, 30\}\
>>> s4=s1.union(s2).union(s3)\
>>> print(s4)---------------\{70, 40, 10, 80, 50, 20, 60, 30\}\
>>> s5=s1.intersection(s2,s3)\
>>> print(s5)------------\{20\}\
>>> s5=s1.intersection(s2).intersection(s3)\
>>> print(s5)-----------\{20\}\
>>> s6=s1.difference(s2,s3)\
>>> print(s6)---------\{40\}\
>>> s6=s1.difference(s2).difference(s3)\
>>> print(s6)-----------\{40\}\
>>> s7=s1.symmetric_difference(s2,s3)------TypeError: set.symmetric_difference() takes exactly one argument (2 given)\
>>> s7=s1.symmetric_difference(s2).symmetric_difference(s3)\
>>> print(s7)----------\{70, 40, 80, 50, 20, 60\}\
---------------------------------------------------------------------------------------------------------\
Most Special Cases:\
------------------------------\
>>> s1=\{10,20,30,40\}\
>>> s2=\{20,30,50,60\}\
>>> s3=s1|s2  #bitwise OR\
>>> print(s3)------------\{40, 10, 50, 20, 60, 30\}\
>>> s3=s1.union(s2)\
>>> print(s3)------------\{40, 10, 50, 20, 60, 30\}\
>>> s4=s1&s2  # bitwise AND\
>>> print(s4)--------------\{20, 30\}\
>>> s4=s1.intersection(s2)\
>>> print(s4)------------\{20, 30\}\
>>> s3=s1-s2  # Arithmetic operator minus(-)\
>>> print(s3)------------\{40, 10\}\
>>> s3=s2-s1\
>>> print(s3)-------------\{50, 60\}\
>>> s4=s1^s2-------------Bitwise  XOR\
>>> print(s4)-----------------\{40, 10, 50, 60\}\
------------------------------------------------------------------------------------------------\
======================================\
					frozenset (immutable)\
		========================================\
=>'frozenset' is one of the pre-defined class and treated as set data type.\
=>The purpose of frozenset data type is that to  store multiple values either of same type or different type or both types with unique values.\
=>we don't have any symbolic notation to represent the elements in frozenset. But we can conver list type elements and set type elements into frozenset by using frozenset()\
		Syntax:-   varname=frozenset(list / tuple / set)\
\
=>An object of frozenset never maiontains insertion order bcoz it can display any its                     possibility among multple possibilites.\
=>On the object of frozenset, we can't perform indexing and slicing operations bcoz it never maintains insertion order.\
=>An object of frozenset belongs to immutable (in the case of item assignment )\
\
Note:- The functionality of frozenset is exactly similar to set but an object of frozenset belongs to immutable and an object of set is both mutable (in the case add() ) and also immutable (in the case item assignment )\
\
Examples:\
----------------\
>>> s1=\{10,20,30,"Hyd"\}\
>>> print(s1, type(s1))-------------\{10, 'Hyd', 20, 30\} <class 'set'>\
>>> fs=frozenset(s1)\
>>> print(fs, type(fs))-----------frozenset(\{10, 'Hyd', 20, 30\}) <class 'frozenset'>\
>>> lst=[10,20,10,"python","java"]\
>>> print(lst, type(lst))---------[10, 20, 10, 'python', 'java'] <class 'list'>\
>>> fs1=frozenset(lst)\
>>> print(fs1, type(fs1))-----------frozenset(\{10, 20, 'python', 'java'\}) <class 'frozenset'>\
>>> tpl=(10,20,10,20,"python","PYTHON")\
>>> fs2=frozenset(tpl)\
>>> print(fs2, type(fs2))------frozenset(\{10, 'PYTHON', 20, 'python'\}) <class 'frozenset'>\
\
Examples:\
-----------------\
>>> lst=[10,20,10,"python","java"]\
>>> print(lst, type(lst))-----------[10, 20, 10, 'python', 'java'] <class 'list'>\
>>> fs1=frozenset(lst)\
>>> print(fs1, type(fs1))-------frozenset(\{10, 20, 'python', 'java'\}) <class 'frozenset'>\
>>> tpl=(10,20,10,20,"python","PYTHON")\
>>> fs2=frozenset(tpl)\
>>> print(fs2, type(fs2))---frozenset(\{10, 'PYTHON', 20, 'python'\}) <class 'frozenset'>\
>>> a=10\
>>> fs=frozenset(a)-------TypeError: 'int' object is not iterable\
>>> fs=frozenset(a,)-------TypeError: 'int' object is not iterable\
>>> fs=list(a)-----------TypeError: 'int' object is not iterable\
>>> x=a,\
>>> fs=frozenset(x)\
>>> print(fs)-------------frozenset(\{10\})\
>>> a=10\
>>> fs=frozenset((a,))---------\
>>> print(fs)-------frozenset(\{10\})\
>>> fs=frozenset([a,])\
>>> print(fs)--------frozenset(\{10\})\
>>> fs=frozenset(\{a,\})\
>>> print(fs)----------frozenset(\{10\})\
------------------------------------------------------------------------------------------------\
Examples:;\
-------------------\
>>> tpl=(10,20,10,20,"python","PYTHON")\
>>> fs=frozenset(tpl)\
>>> print(fs)----------frozenset(\{10, 'PYTHON', 20, 'python'\})\
>>> print(fs[0])------TypeError: 'frozenset' object is not subscriptable\
>>> print(fs[0:3])-----TypeError: 'frozenset' object is not subscriptable\
>>> fs[0]=123---------TypeError: 'frozenset' object does not support item assignment\
>>> fs.add(100)-----AttributeError: 'frozenset' object has no attribute 'add'\
----------------------------------------------------------------------------------------------------------------\
functions in frozenset\
-----------------------------------\
1) union()\
2) intersection()\
3) difference()\
4) symmetric_difference()\
5) issuperset()\
6)issubset()\
7)isdisjoint()\
-----------------------------------------------------\
functions not in frozenset:\
----------------------------------------\
add()\
remove()\
discard()\
pop()\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
========================================\
			Dict Data Type (Collection data type )\
		=========================================\
=>'dict' is one of the pre-defined class treated as dict data type\
=>The purpose of dict data type is that "To store (Key,value) in a single object"\
=>In (Key,value) , the values of Key must be unique and the values of Value may or           may not be unique\
=>The elements of dict must be represented in curly brace \{ \} with (key,value)\
   Syntax  for non-empty dict: -  \
		   varname=\{key1:val1,  key2:val2........key-n:val-n \}\
=>The object of dict maintains insertion order\
=>An object of dict is mutable. Internally Values of Key is immutable and Values of Value is Mutable\
=>On the object of dict , we can't perform indexing and slicing.\
--------------------------------------------------------------------------------------\
Examples:\
>>> d1=\{\}\
>>> print(d1,type(d1))-----------------\{\} <class 'dict'>\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> print(d2,type(d2))-----------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\} <class 'dict'>\
>>> d3=\{"Rossum":9999,"Gosling":8888,"Ritche":7777\}\
>>> print(d3,type(d3))-----\{'Rossum': 9999, 'Gosling': 8888, 'Ritche': 7777\} <class 'dict'>\
>>> d4=\{"sub1":"python",10:20,40:"Java","DS":50\}\
>>> print(d4,type(d4))--------\{'sub1': 'python', 10: 20, 40: 'Java', 'DS': 50\} <class 'dict'>\
>>> print(d4[0])-----KeyError: 0\
>>> print(d4["sub1"])------------python\
>>> print(d4["DS"])-------------50\
>>> print(id(d4))---------2041082686784\
>>> d4["sub1"]="JAVA"\
>>> print(d4)-----------\{'sub1': 'JAVA', 10: 20, 40: 'Java', 'DS': 50\}\
>>> print(id(d4))----------2041082686784\
========================================================\
Syntax for empty dict:\
--------------------------------------\
		varname=\{\}\
Syntax for adding (Key,Value) to the empty object\
\
		dictobj[key1]=val1\
		dictobj[key2]=val2\
		-------------------------\
		dictobj[keyn]=valn\
Examples:\
-----------------------\
>>> d1=\{\}\
>>> print(d1, type(d1))---------\{\} <class 'dict'>\
>>> len(d1)--------0\
>>> d1["stno"]=12\
>>> d1["name"]="Rossum"\
>>> d1["marks"]=23.45\
>>> print(d1, type(d1))----\{'stno': 12, 'name': 'Rossum', 'marks': 23.45\} <class 'dict'>\
>>> d1["marks"]=45.67\
>>> print(d1, type(d1))--\{'stno': 12, 'name': 'Rossum', 'marks': 45.67\} <class 'dict'>\
>>> d1["city"]="NL"\
>>> print(d1)---\{'stno': 12, 'name': 'Rossum', 'marks': 45.67, 'city': 'NL'\} \
==============================\
			Functions in dict\
		===============================\
=>On the object of dict , we can perform the following operation by using functions           present in dict\
\
1) clear():\
  ------------\
  =>This function is used for removing all the enties of dict object\
  Syntax:-    dictobj.clear()\
Examples:\
----------------\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> print(d2)-----------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\}\
>>> print(len(d2))----------3\
>>> d2.clear()\
>>> print(d2)----------\{\}\
>>> print(len(d2))---------0\
---------------------------------------\
2) copy():\
--------------\
=>This function is used for copying the content of one dict into another dict object.\
(Implementing Shallow copy)\
=>Syntax:   dictobj2=dictobj1.copy()\
Examples:\
---------------\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> d3=d2.copy()\
>>> print(d2, id(d2))---------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\} 2041082686080\
>>> print(d3, id(d3))---\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\} 2041082686400\
>>> d2[40]="Sberry"\
>>> d3[50]="Guava"\
>>> print(d3, id(d3))---\{10: 'Apple', 20: 'Mango', 30: 'Kiwi', 50: 'Guava'\} 2041082686400\
>>> print(d2, id(d2))---\{10: 'Apple', 20: 'Mango', 30: 'Kiwi', 40: 'Sberry'\} 2041082686080\
-----------------------------------------------------------------------------------------------------------\
3)popitem():\
----------------\
=>This function always removes last element from non-empty dict.\
=>we call popitem() on empty dict object we get KeyError: 'popitem(): dictionary is empty'\
\
Syntax:-     dictobj.popitem()\
\
---------------\
Examples:\
---------------\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> print(d2)----------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\}\
>>> d2.popitem()-------(30, 'Kiwi')\
>>> print(d2)-------\{10: 'Apple', 20: 'Mango'\}\
>>> d2.popitem()-----(20, 'Mango')\
>>> print(d2)--------\{10: 'Apple'\}\
>>> d2.popitem()-------(10, 'Apple')\
>>> print(d2)--------\{\}\
>>> d2.popitem()--------KeyError: 'popitem(): dictionary is empty'\
--------------------------------------------------------------------------------------------\
4) pop():\
-----------\
=>This function is used for removing (Key,Value) from dict object by passing Value of Key . if the value of Key does not exists then we get KeyError\
\
Syntax:-   dictobj.pop(key)\
\
Example:\
------------\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> d2.pop(10)-----------'Apple'\
>>> print(d2)----------\{20: 'Mango', 30: 'Kiwi'\}\
>>> d2.pop(30)---------'Kiwi'\
>>> print(d2)----------\{20: 'Mango'\}\
>>> d2.pop(100)---------KeyError: 100\
----------------------------------------------------------------------------------------\
5) get() :\
-----------\
=>This function is used for finding the value of Value by passing value of Key.\
=>If the Value of Key does noy exist then we get None ( It indicates no value found on the that key)\
Syntax:-           varname=dictobj.get(key)\
\
here varname is "not None(value)" provided Key present\
here varname is "None" provided Key does not exist\
Examples:\
--------------\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> print(d2)------------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\}\
>>> d2.get(10)------'Apple'\
>>> print(d2.get(10))---------Apple\
>>> print(d2.get(30))----------Kiwi\
>>> print(d2.get(300))--------None\
>>> print(d2.get(20))-------Mango\
>>> print(d2.get(200))---------None\
-----------------------------------------------------------------------------\
6) keys():\
 ------------\
=>This function gives list of keys from dict object.\
Syntax:-    dictobj.keys()\
			(or)\
		  varname=dictobj.keys()\
\
Examples:\
--------------\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> print(d2)--------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\}\
>>> print(d2.keys())------dict_keys([10, 20, 30])\
>>> d3=\{\}\
>>> print(d3.keys())----dict_keys([])\
>>> k=d2.keys()\
>>> print(k)-------dict_keys([10, 20, 30])\
>>> for x in k:\
...     print(x)\
				...\
				10\
				20\
				30\
>>> for x in d2.keys():\
...     print(x)\
				...\
				10\
				20\
				30\
------------------------------------------------------------------------\
 7) values() :\
 ----------------\
=>This function gives list of Values from dict object.\
Syntax:-    dictobj.values()\
			(or)\
		  varname=dictobj.values()\
\
Examples:\
-------------\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> print(d2)\
\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\}\
>>> v=d2.values()\
>>> print(v)-----------dict_values(['Apple', 'Mango', 'Kiwi'])\
>>> for value in v:\
...     print(value)\
				...\
				Apple\
				Mango\
				Kiwi\
>>> for value in d2.values():\
...     print(value)\
				...\
				Apple\
				Mango\
				Kiwi\
------------------------------------------------------------------------------\
8)items():\
--------------\
=>This function gives (Key,value) entries of dict object\
=>Syntax:-       dictobj.items()\
				(or)\
			varname=dictobj.items()		\
Examples:\
----------------\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> print(d2)-------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\}\
>>> kv=d2.items()\
>>> print(kv)-------dict_items([(10, 'Apple'), (20, 'Mango'), (30, 'Kiwi')])\
>>> for entry in kv:\
...     print(entry)\
...\
			(10, 'Apple')\
			(20, 'Mango')\
			(30, 'Kiwi')\
>>> for entry in d2.items():\
...     print(entry)\
...\
				(10, 'Apple')\
				(20, 'Mango')\
				(30, 'Kiwi')\
>>> for k,v in d2.items():\
...     print(k,"--->",v)\
					...\
					10 ---> Apple\
					20 ---> Mango\
					30 ---> Kiwi\
-----------------------------------------------------------------------------------------	\
9)update()\
=>This function is used for updating source dict object with target dict object\
Syntax:-   sourcedictobj.update(targetdictobj)\
----------------\
Examples:\
----------------\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> print(d2)-----------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\}\
>>> d3=\{40:"Guava",50:"banana"\}\
>>> d2.update(d3)\
>>> print(d2)-------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi', 40: 'Guava', 50: 'banana'\}\
>>> print(d3)---\{40: 'Guava', 50: 'banana'\}\
Examples:\
>>> d2=\{10:"Apple",20:"Mango",30:"Kiwi"\}\
>>> print(d2)----------\{10: 'Apple', 20: 'Mango', 30: 'Kiwi'\}\
>>> d3=\{40:"Guava",50:"banana",30:"Sberry"\}\
>>> d2.update(d3)\
>>> print(d2)-----------\{10: 'Apple', 20: 'Mango', 30: 'Sberry', 40: 'Guava', 50: 'banana'\}\
------------------------------------------------------------------------------------------\
=====================================\
			None Data Type\
		=====================================\
=>"NoneType" is one of the pre-defined class treated as None Type data type\
=>None is the value of NoneType\
=>The Value None is not space , false and zero\
-----------------\
Examples:\
----------------\
>>> a=None\
>>> print(type(a))---------<class 'NoneType'>\
>>> d=\{10:"Rossum",20:"Ritche"\}\
>>> print(d)---------\{10: 'Rossum', 20: 'Ritche'\}\
>>> print(d.get(10))--------Rossum\
>>> print(d.get(100))--------None\
================================================\
			No. Of approaches to develop Python program\
		=================================================\
=>We can develop the program in python in 2 ways. they are\
		a) Interactive Approach\
		b) Batch Mode Approach\
------------------------------------------------------------------------------------------------\
a) Interactive Approach:\
---------------------------------\
=>In This approach, As a programmer, we can give one statement at a time and getting one result at a time.\
\
Example:-    Python Command Prompt\
		     Python IDLE Shell\
=>This Approach is most useful to test one statement at a time but not recomended  to batch of instructions for problems solving.\
=================================================================\
b) Batch Mode Approach:\
------------------------------------\
=>In this approach we write group (or) batch of valid instructions which are used for solving problem statements and these batch of statements must saved on file name with an extension .py (Filename.py----source Code)\
\
Examples:     \
--------------	Python IDLE Shell (comes along with Python Software Installatio)\
			Edit Plus (External Installation)\
			PyCharm (External Installation)\
			Spider (External Installation)\
			Jupiter Note Book (External Installation)----etc\
\
============================================================\
Steps to develop program in Python IDLE Shell :\
-------------------------------------------------------------------\
=>launch Python IDLE shell\
=>Choose the File-->New File\
=>Ensure that a new Window will be opened and Write the source Code and save it on     some file name with an extension   .py   Example: sum.py\
=>Run the python Program\
	a) Through IDLE shell--->Run--->Run Module ( f5)\
	b) goto cmd prompt and locate the folder where we saved the program. To       run the python from command prompt, we use a tool called "python" or "py"\
\
		Syntax:-    python  filename.py\
					(or)\
				  py   filename.py\
		Example:-\
			E:\\KVR-PYTHON-11AM\\FUNDAS> python  sum.py\
					(or)\
			E:\\KVR-PYTHON-11AM\\FUNDAS> py  sum.py\
		=>View the result			\
================================================================\
===========================================\
		Displaying The result (or) output of python program\
		===========================================\
=>To display result (or) output of the python program, we use print()\
\
------------------------------\
=>Formats of print():\
------------------------------\
Syntax1:-    print(msg), here msg represents str\
\
Examples:\
---------------\
>>> print("Hello")-------------Hello\
>>> print("Python")----------Python\
>>> print("Val of a")----------Val of a\
---------------------------------------------------------------------\
Syntax2:-    print(var1,var2....var-n),\
   here var1,var2...var-n  represents valid variable names of any data type.\
Examples:\
---------------\
>>> a=10\
>>> print(a)-----------10\
>>> lst=[10,"abc",23.45]\
>>> print(lst)----------[10, 'abc', 23.45]\
>>> print(a,lst)-------10 [10, 'abc', 23.45]\
-----------------------------------------------------------------------------------\
Syntax3:-    print(Message sum Variables list),\
   here var1,var2...var-n  represents valid variable names of any data type.\
\
Examples:  \
-----------------\
>>>print("Val of a=",a)---------val of a=10\
>>>print(a, "Val of a")-------	10  val of a\
>>> a=10\
>>> b=20\
>>> c=a+b\
>>>print("sum of ",a," and ",b,"=",c)-------sum of 10 and 20 = 30\
---------------------------------------------------------------------------------------------\
Syntax4:-    print(Message with curly braces with format() ),\
\
Examples:  \
-----------------\
>>>print("Val of a=\{\}".format(a))---------val of a=10\
>>>print("\{\}  Val of a".format(a) )-------	10  val of a\
>>> a=10\
>>> b=20\
>>> c=a+b\
>>>print("sum of \{\} and \{\} = \{\}".format(a,b,c))\
---------------------------------------------------------------------------\
Syntax5:-    print(Message with format specifiers)\
\
Examples:  \
-----------------\
>>>print("Val of a=%" %a)\
>>>print("%f  Val of a" %a)\
>>> a=10\
>>> b=20\
>>> c=a+b\
>>>print("sum of %d  and %f = %f" %(a,b,c))\
=================================================================\
==========================================\
			reading The input data to the python program\
		===========================================\
=>To read the data from keyboard , we use a pre-defined function called input().\
=>The input() is available in two forms.\
		1)input()\
		2) input(msg)\
1)input():\
-------------\
=>This function is used for reading any type of value from key board in the form of str.\
Syntax:-    varname=input()\
\
=>here 'varname' represents an object of str and we can convert any type of str value into another type Type Conversion Functions.\
=>input() is predefined functions\
-------------------------------------------------------------------------------------------------------------\
2) input(msg):\
------------------------\
=>This funmction is used for reading any type of value from key board in the form of str by giving user-prompting message.\
Syntax:-    varname=input(Msg)\
\
=>here 'varname' represents an object of str and we can convert any type of str value into another type Type Conversion Functions.\
=>input() is predefined functions\
=>Msg represents User-Prompting Message \
========================================\
				Operators in Python\
		=========================================\
=>An Operator is a symbol, which is used to perform some type of operations.\
=>In Python Programming, we have 7 Operators. They are\
\
		1) Arithmetic Operators\
		2) Assignment Operator\
		3) Relational Operators\
		4) Logical Operators\
		5) Bitwise Operators.(Most Imp)\
		6) Membership Operators \
		7) Identity Operators \
\
Note:-   we don't have  Pre / Post increment (++ -- ) Ternary Operator(? :)\
====================================\
			1) Arithmetic Operators\
		====================================\
=>The purpose of  Arithmetic Operators is to perform Arithmetic Operations such as addtion, substraction, mul...etc.\
=>We have 7  Arithmetic Operators and they are given in the following Table.\
==============================================================\
SlNo	   Symbol		Meaning			Example: a=10 b=3\
==============================================================\
1			+			Addition			print(a+b)-----13\
\
2			-			substraction		print(a-b)-----7\
\
3.			*			multiplication        print(a*b)-----30\
\
4.			/			Division			print(10/3)---3.33333333\
					  (float quotient)		print(10.0/3)-->3.333333\
\
5.			//		     floor Division		print(10//3)--->3\
					( Int  quotient )		print(10//3.0)-->3.0\
\
6.                    %		Modulo division		print(10%3)----1\
\
7.			**		Exponentation		print(a**b)--1000\
\
=================================================================================================\
=====================================\
		2) Assignment Operator\
	======================================\
=>The  symbol of Assignment Operator = \
=>The purpose of  Assignment Operator is  transfering RHS Value / Expression  value to the LHS variable.\
\
=>We can assignment operator two ways. They are\
		a) Single line assignment\
		b) Multi line assignment\
a) Single line assignment:\
-------------------------------------\
Syntax:-    var1=val1\
			(or)\
		   var1=expression\
=>With Single line assignment, we can assign single of RHS to the LHS variable\
\
Examples:\
------------------\
			>>> a=10\
			>>> b=20\
			>>> c=a+b  # Arithgmetic Expression\
			>>> print(c)-------30\
----------------------------------------------------------------------------------------------------\
b) Multi line assignment:\
----------------------------------\
Syntax:-        var1,var2...var-n=val1,val2...val-n\
				(or)\
			var1,var2...var-n=expr1,expr2,....expr-n\
=>With Multi line assignment, we can assign multiple RHS values to LHS variables.\
Examples:-\
			>>>a,b=10,20\
			>>>c=a+b\
			>>>d=a-b\
			(or)\
			>>>a,b=10,20\
			>>>c,d,e=a+b,a-b,a*b\
-----------------------------------------------------------------------------------------------\
=====================================\
			3) Relational Operators\
		=====================================\
=>The purpose of Relational Operators is that "To Compare two Values "\
=>If the relational operator is connected with two variables then it is called Relational Expression (or) Test Condition\
=>The Result of Relational Expression (or) Test Condition is either True or False depends on the values of variables.\
=>The following shows the list of Relational Operators.\
===========================================================\
SlNo		Symbol		Meaning				Example a=10,b=20,c=10\
===========================================================\
1			>			greater than			a>b----False\
											b>c----True\
\
2.			<			Less than			a<b-----True\
											b<c-----False\
\
3.			==			equality				a==b-----False\
					(double equal to)			a==c-----True\
4			!=			not equal to			a!=b-----True\
											a!=c-----False\
\
5.			>=		greater than				a>=b----False\
					or equal to				a>=c----True\
\
6.			<=		less than					a<=c----True\
					or equal to				a<=-5---False\
===========================================================\
============================================\
				4) Logical Operators\
		=============================================\
=>The Purpose of Logical Operators is that "To combine two or more relational Expressions"\
=>If any Logical Operator connected with  two or more relational Expressions then it is called Logical Expression (or) compund Condition and it gives Either True or False.\
=>The following Shows List of Logical Operators,\
===========================================================\
SLNO		Symbol		Meaning\
===========================================================\
1.			and			Physical ANDing\
\
2.			or			Physical ORing\
\
3.			not                  ------------------------\
===========================================================\
1) and operator:\
------------------------\
Truth Table\
--------------------------------------------------------------------\
RelExpr1     RelExpr2    RelExpr1  and RelExpr2\
--------------------------------------------------------------------\
    False		False		False\
    True		False		False\
    False		True			False\
    True		True			True\
--------------------------------------------------------------------\
Example:\
>>> a,b,c=10,20,10\
>>> print(a,b,c)------------10 20 10\
>>> (a>b) and (b>c)-----------False\
>>> (a<b) and (b>c)-----------True\
>>> (a<b) and (b<c)------------False\
>>> (a!=b) and (a==c)----------True\
>>> (a==b) and (a==c)--------False\
=========================================================\
2) or operator:\
------------------------\
Truth Table\
--------------------------------------------------------------------\
RelExpr1     RelExpr2    RelExpr1  or  RelExpr2\
--------------------------------------------------------------------\
    False		False		False\
    True		False		True\
    False		True			True\
    True		True			True\
--------------------------------------------------------------------\
Examples:\
-----------------\
>>> a,b,c=10,20,10\
>>> print(a,b,c)--------10 20 10\
>>> (a>b) or (b>c)----------True\
>>> (a<b) or (b<c)--------True\
>>> (a!=b) and (a==c)--------True\
>>> (a!=b) or (a==c)--------True\
>>> (a==b) or (a!=c)-------False\
------------------------------------------------------------------------------------------------\
3) not operator:\
------------------------\
Truth Table\
--------------------------------------------------------------------\
Rel Expr    not RelExpr\
--------------------------------------------------------------------\
False		True\
	\
True			False\
-----------------------------------------------------------------------\
Examples:;\
-------------------\
>>> a=10\
>>> b=20\
>>> not (a!=b)---------False\
>>> not (a==b)----------True\
>>> a,b,c=10,20,10\
>>> not ((a!=b) and (a==c))--------False\
>>> not((a==b) or (a==c))----------False\
>>> not((a!=b) or (a==c))-----------False\
>>> not((a!=b) or (a!=c))-----------False\
>>> not((a==b) or (a!=c))----------True\
==================================================================================================\
4) Bitwise operators\
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \outl0\strokewidth0 -------------------------------------------------------------\
-The purpose of bitwise operator to perform operations on data on integer data on basic of bits bit since there operator are performing on the basis of bit by bit and they named as bitwise operators\
-Bitwise can be applicable only on integer data but not float type data\
-Internally bitwise operators only on integer data into binary format and operations carried out on the basis of bit by bit\
\
\pard\pardeftab720\partightenfactor0
\cf0 \cb2 \outl0\strokewidth0 \strokec3 =========================================\
			Bitwise Left shift Operator ( << )\
		=========================================\
=>The leftshift operator moves (or) filpped-off given number of bits toward left side. \
=>Syntax:  resultvar=Given number << no. of bits\
=>Examples:\
>>> a=10\
>>> b=a<<3\
>>> print(b)-----------80\
>>> print(15<<2)----------60\
>>> print(12<<3)-----------96\
>>> print(120<<0)----------120\
>>> print(120<<-3)----------ValueError: negative shift count\
====================================================================\
			Bitwise Right shift Operator ( >> )\
=========================================\
=>The Right shift operator moves (or) filpped-off given number of bits toward Right side. \
=>Syntax:  resultvar=Given number >> no. of bits\
Examples:\
---------------\
>>> a=10\
>>> b=a>>3\
>>> print(b)--------1\
>>> print(15>>2)------3\
>>> print(120>>4)-------7\
===============================================================\
			3) Bitwise OR operator ( | )\
===============================================================\
truth table Bitwise OR operator ( | ):\
-------------------------------------------------\
Input1        Input2       Input1 |  Input2\
----------------------------------------------------\
   0                 0			0\
\
   0                 1			1\
\
   1		      0			1\
\
   1                 1			1\
-----------------------------------------------------------\
Examples:\
----------------\
>>>a=4-------------------     0 1 0 0  \
>>>b=3-------------------     0 0 1 1\
--------------------------------------------\
>>>c=a | b-----------------  0  1  1 1------result is 7\
>>>print(c)-------------7\
----------------------------------------------------------------\
>>>a=15---------------------  1  1  1  1\
>>>b=14---------------------  1  1  1  0\
------------------------------------------------\
>>>c=a|b--------------------   1  1  1  1-----result is 15\
>>>print(c)---------15\
-----------------------------------------------------------------------\
Special Examples:\
-----------------------------\
s1=\{10,20,30\}\
s2=\{30,40,50\}\
s3= s1 | s2          # s3=s1.union(s2)--10 20,30,40,50\
>>>print(s3)-----\{10,20,30,40,50\}\
>>> print(\{10,20,30\}|\{10,20,30,40\})---------\{20, 40, 10, 30\}\
\
==========================================================\
4) Bitwise AND operator ( & )\
-------------------------------------------------\
truth table Bitwise AND operator ( & ):\
-------------------------------------------------\
Input1        Input2       Input1 &  Input2\
----------------------------------------------------\
   0                 0			0\
\
   0                 1			0\
\
   1		      0			0\
\
   1                 1			1\
-----------------------------------------------------------\
Examples:\
----------------\
>>>a=4-------------------     0 1 0 0  \
>>>b=3-------------------     0 0 1 1\
--------------------------------------------\
>>>c=a & b----------------- 0 0 0 0---result 0\
>>>print(c)------------- 0\
\
>>>a=15---------------------  1  1  1  1\
>>>b=14---------------------  1  1  1  0\
------------------------------------------------\
>>>c=a&b-------------------- 1  1  1  0-----result is 14\
>>>print(c)---------14\
>>> print(5&10)-----------0\
--------------------------------------------------------------------\
Special Examples:\
-----------------------------\
s1=\{10,20,30\}\
s2=\{30,40,50\}\
s3= s1 & s2          # s3=s1.intersection(s2)-- 30\
print(s3)----\{30\}\
-------------------------------------------------------------------------------------------------------\
5) Bitwise Complement operator ( ~ ):\
------------------------------------------------------\
=>\
Example:\
--------------\
>>>a=10--------------- 1 0 1 0\
\
>>>b=~a--------------  ~ (1010)=> - (1010+1)-------  1 0 1 0\
										 0 0 0 1  (sum rule---Bitiwse Or)\
										-----------\
									       - 1 0 1 1------Result -11\
										-----------\
>>>print(b)-------  -11\
\
NOTE:\
----------------\
Formula:--      ~n  ===>  - (n+1)\
			~ (-98)---> -(-98+1)\
			                 - (-97)==> 97\
\
=============================================================\
6)Bitwise XOR operator ( ^ ):\
------------------------------------------\
truth table Bitwise XOR operator ( ^ ):\
-------------------------------------------------\
Input1        Input2       Input1 ^  Input2\
----------------------------------------------------\
   0                 0			0\
\
   0                 1			1\
\
   1		      0			1\
\
   1                 1			0\
-----------------------------------------------------------\
Examples:-\
----------------\
>>>a=4------------------  0 1 0 0\
>>>b=3------------------  0 0 1 1\
-------------------------------------------\
>>>c=a^b--------------- 0  1 1 1 ------------Result is 7\
>>>print(c)------7\
\
Examples:-\
---------------\
>>>a=15---------------  1  1  1  1\
>>>b=14---------------  1  1  1  0\
-------------------------------------------------\
>>>c=a^b-------------  0   0  0  1 --------------Result is 1\
>>>print(c)------------  1\
-------------------------------------------------------------------------\
Special Case:\
--------------------\
>>>s1=\{10,20,30,40\}\
>>>s2=\{30,40,50,60\}\
>>>s3=s1^s2----10   20  50  60           #   or    s3=s1.symmetric_difference(s2)\
>>>print(s3)----\{10,20,50,60\}\
-----------------------------------------------------------------------------------------------------\
Special Case:   Swapping Logic by using  Bitwise XOR\
---------------------\
		>>>a=4\
		>>>b=3\
		>>>print(a,b)-------  4    3\
		>>>a=a^b\
		>>>b=a^b\
		>>>a=a^b\
		>>>print(a,b)--------- 3   4\
=========================================\
				 Membership Operators \
		==========================================\
=>Membership Operators are use for  checking the existence of the specified value in an object which contains multiple values like sequence type, list, set, dict types  etc.\
=>We have two types of Membership Operators. they are\
\
		a) in\
		b) not in\
a) in:\
-------\
	Syntax:   \
			value in sequence / list / set / dict \
=>if the"value" present in sequence / list / set / dict  objects then "in" operator retrurns True otherwise it returns False.\
\
b) not in:\
---------------\
Syntax:   \
			value not in sequence / list / set / dict \
\
=>if the"value"   not present in sequence / list / set / dict  objects then "not in" operator retrurns True otherwise it returns False.\
\
Examples:-\
-----------------\
>>> s="PYTHON"\
>>> "HON" in s-----------True\
>>> "HON" not in s----------False\
>>> "hon" not in s--------True\
>>> "hon" in s---------False\
>>> "pon" in s----------False\
>>> "PON" not in s--------True\
>>> "ON" in s[::-1]--------False\
>>> "NO" in s[::-1]---------True\
>>> "NOP" in s[::-1]--------False\
>>> "PON" in s[::-1]-------False\
\
>>> tp=(10,"bipin",34.56,"MH")\
>>> print(tp)----------(10, 'bipin', 34.56, 'MH')\
>>> "bipin" not in tp---------False\
>>> "bipin" in tp----------True\
>>> "pin" in tp-----------False\
>>> "pin" in tp[1]---------True\
>>> "nip" in tp[::-1]----------False\
>>> "nip" in tp[1][::-1]---------True\
>>> "MH" in tp[2:4]--------True\
>>> "HM" not in tp[2:4]--------True\
=============================================================\
=========================================\
				7) Identity Operators \
		=========================================\
=>Identity operator are always used for comparing memory address (id()). \
=>We have two types of Identity Operators .They are\
		1) is \
		2) is not \
\
a) is:\
---------\
Syntax:-            var1(or) val1    is    var (or) val2\
\
=>This "is" operator returns Ture provide both var1 and var2 contains Same Address otherwise it returns False.\
\
b) is not:\
---------\
Syntax:-            var1(or) val1    is not    var (or) val2\
\
=>This "is not" operator returns Ture provide both var1 and var2 contains Different  Address otherwise it returns False.\
\
>>> d1=\{10:"KVR",20:"Ramu"\}\
>>> d2=\{10:"KVR",20:"Ramu"\}\
>>> print(d1, id(d1))------------\{10: 'KVR', 20: 'Ramu'\} 1685664901888\
>>> print(d2, id(d2))------------\{10: 'KVR', 20: 'Ramu'\} 1685664902080\
>>> print(d1 is d2)---------False\
>>> print(d1 is not d2)--------True\
>>> fs1=frozenset([10,20,30])\
>>> fs2=frozenset([10,20,30])\
>>> print(fs1, id(fs1))---------frozenset(\{10, 20, 30\}) 1685665249088\
>>> print(fs2, id(fs2))---------frozenset(\{10, 20, 30\}) 1685665249312\
>>> print(fs1 is fs2)----------False\
>>> print(fs1 is not fs2)---------True\
>>> s1=set([10,20,30,40])\
>>> s2=set([10,20,30,40])\
>>> print(s1,id(s1))----------\{40, 10, 20, 30\} 1685665251104\
>>> print(s2,id(s2))---------\{40, 10, 20, 30\} 1685665248640\
>>> print(s1 is s2)-----------False\
>>> print(s1 is not s2)-------True\
>>> tp1=(10,"KVR","HYD")\
>>> tp2=(10,"KVR","HYD")\
>>> print(tp1,id(tp1))-----------(10, 'KVR', 'HYD') 1685665012160\
>>> print(tp2,id(tp2))------------(10, 'KVR', 'HYD') 1685665236928\
>>> print(tp1 is tp2)---------False\
>>> print(tp1 is not  tp2)-----------True\
>>> l1=[10,"KVR"]\
>>> l2=[10,"KVR"]\
>>> print(l1,id(l1))--------[10, 'KVR'] 1685665011328\
>>> print(l2,id(l2))----------[10, 'KVR'] 1685665011584\
>>> print(l1 is l2)---------False\
>>> print(l1 is not l2)---------True\
>>> s1="KVR"\
>>> s2="KVR"\
>>> print(s1,id(s1))-----------KVR 1685665303344\
>>> print(s2,id(s2))---------KVR 1685665303344\
>>> print(s1 is s2)-------True\
>>> print(s1 is not s2)-------False\
>>> s3="KvR"\
>>> print(s3,id(s3))---------KvR 1685665302768\
>>> print(s1 is not s3)--------True\
>>> print(s1 is s3)----------False\
>>> r1=range(1,10)\
>>> r2=range(1,10)\
>>> print(r1,id(r1))-----------range(1, 10) 1685664407792\
>>> print(r2,id(r2))---------range(1, 10) 1685665209824\
>>> print(r1 is r2)----------False\
>>> print(r1 is not r2)----------True\
>>> ba=bytes([10,20,30])\
>>> bb=bytes([10,20,30])\
>>> print(ba, id(ba))--------b'\\n\\x14\\x1e' 1685665207952\
>>> print(bb, id(bb))-----b'\\n\\x14\\x1e' 1685665209920\
>>> print(ba is bb)-------False\
>>> print(ba is not bb)---True\
>>> ba=bytearray([10,20,30])\
>>> bb=bytearray([10,20,30])\
>>> print(ba, id(ba))---------bytearray(b'\\n\\x14\\x1e') 1685665302640\
>>> print(bb, id(bb))--------bytearray(b'\\n\\x14\\x1e') 1685665302704\
>>> print(ba is bb)-------False\
>>> print(ba is not bb)-------True\
>>> a=True\
>>> b=True\
>>> print(a, id(a))------True 140721665988712\
>>> print(b, id(b))-------True 140721665988712\
>>> print(a is b)----------True\
>>> print(a is not b)--------False\
>>> a=2+3j\
>>> b=2+3j\
>>> print(a, id(a))--------(2+3j) 1685665061360\
>>> print(b, id(b))-------(2+3j) 1685665061296\
>>> print(a is b)---------False\
>>> print(a is not b)------True\
>>> a=12.34\
>>> b=12.34\
>>> print(a, id(a))-------12.34 1685664581008\
>>> print(b, id(b))------12.34 1685665060944\
>>> print(a is b)------False\
>>> print(a is not b)--------True\
>>> a=10\
>>> b=10\
>>> print(a, id(a))-------10 1685663935056\
>>> print(b, id(b))-------10 1685663935056\
>>> print(a is b)-------True\
>>> print(a is not  b)-----False\
>>> a=300\
>>> b=300\
>>> print(a, id(a))--------300 1685665061520\
>>> print(b, id(b))------300 1685665061168\
>>> print(a is b)---------False\
>>> print(a is not b)-------True\
>>> a=256\
>>> b=256\
>>> print(a, id(a))--------256 1685664131472\
>>> print(b, id(b))-------256 1685664131472\
>>> print(a is b)-----------True\
>>> print(a is not  b)-------False\
>>> a=-20\
>>> b=-20\
>>> print(a, id(a))------       -20 1685664176720\
>>> print(b, id(b))---------   -20 1685665061520\
>>> print(a is b)------False\
>>> print(a is not b)-----True\
>>> a=-2\
>>> b=-2\
>>> print(a, id(a))---------      -2 1685663934672\
>>> print(b, id(b))---------      -2 1685663934672\
>>> print(a is b)----------True\
>>> print(a is not  b)----------False\
>>> a=-5\
>>> b=-5\
>>> print(a, id(a))------------    -5 1685663934576\
>>> print(b, id(b))------------   -5 1685663934576\
>>> print(a is b)----------   True\
>>> print(a is not b)-------- False\
>>> a=-6\
>>> b=-6\
>>> print(a, id(a))------     -6 1685664176720\
>>> print(b, id(b))--------- -6 1685665061168\
>>> print(a is b)----------- False\
>>> print(a is not  b)--------- True\
-------------------------------------------------------------------\
Special Case:\
----------------------\
>>> a,b=300,300\
>>> print(a, id(a))-----------300 1685665061520\
>>> print(b, id(b))---------300 1685665061520\
>>> print(a is b)-----------True\
>>> print(a is not b)----------False\
>>> a,b=-25,-25\
>>> print(a, id(a))----------   -25 1685664176720\
>>> print(b, id(b))---------   -25 1685664176720\
>>> print(a is b)-------- True\
>>> print(a is not  b)--------False\
>>> a,b=[10,"KVR"], [10,"KVR"]\
>>> print(a, id(a))-----------[10, 'KVR'] 1685665301504\
>>> print(b, id(b))----------[10, 'KVR'] 1685665302336\
>>> print(a is b)----------False\
>>> print(a is not b)----- True\
===========================================\
         	     Flow Control (or) Control Structures in Python\
		===========================================\
=>The purpose of Control Structures in Python is that "To perform certain operation only once (X-Operation in the case of True  or Y-Operation in the case of False ) only once (OR)\
Perform ceratin opoeration repeatedly for finite number of times until condition is False".\
=>In Python programming, we have Three type Flow Control (or) Control Structures. They are\
			a) Conditional (or) Selection (or) Branching Statements\
			b)  Looping / Iterative / Repetative Statements\
			c) MiSc flow control statements.\
====================================================		\
     		     a) Conditional (or) Selection (or) Branching Statements\
		====================================================\
=>The purpose Conditional (or) Selection (or) Branching Statements "To perform certain operation only once (X-Operation in the case of True  or Y-Operation in the case of False ) only once.\
=>We have 3 Conditional (or) Selection (or) Branching Statements. They are\
		a) Simple  if statement\
		b) if...else statement\
		c) if..elif..else statement\
--------------------------------------------------------------------------------------------------------------------------------\
===================================\
				break statement\
		===================================\
=>break is one the keyword\
=>break statement is used for terminating the execution of loop and comes out of loop  and PVM exeutes other statements which are written after looping statement.\
=>Syntax1:-\
   ------------\
   		while (test cond1):\
		     ------------------\
		     if (test cond-2):\
		          break\
		     --------------------\
	        -----------------------------------\
		other statements in Program\
		------------------------------------------\
\
=>Syntax2:-\
   ------------\
   		for varname in iterable-object\
		     ------------------\
		     if (test cond-2):\
		          break\
		     --------------------\
	        -----------------------------------\
		other statements in Program\
		------------------------------------------\
Examples:\
----------------\
s="PYTHON"\
for val in s:\
	if(val=='O'):\
		break\
	else:\
		print("\\t\{\}".format(val))\
print("Program finished")\
==================================================\
					Continue statement\
		===================================================\
=>continue is one of the keyword\
=>The purpose of continue statement is that to make control to top of the loop for that current iteration without executing the following statement  writtng after continue statement\
\
Syntax1:-\
--------------\
			while(Test cond1):\
			       --------------------\
			       --------------------\
			       if(Test cond2):\
			            ---------------\
				    continue\
				    ---------------\
			        statements written - after continue statement\
			--------------------------------------------------------\
			--------------------------------------------------------\
\
Syntax2:-\
--------------\
			for varname in iterable-object\
			       --------------------\
			       --------------------\
			       if(Test cond):\
			            ---------------\
				    continue\
				    ---------------\
			        statements written - after continue statement\
			--------------------------------------------------------\
			--------------------------------------------------------\
============================================\
			Nested Loops (or)  Inner Loops in Python\
		============================================\
=>The process of defining one loop inside of another loop is called Inner Loops or nested loops.\
=>For Every value of Outer loop , Inner loop will execute multiple time until inner loop condition     False.\
\
\
Syntax1:-\
		     for var1 jn Iterbale-obj1:   # outer for loop\
		           -----------------------------\
			   for var2 in Iterable-obj2:  # inner for loop\
			          --------------------------\
		           ----------------------------------\
		     -------------------------------------------\
\
Syntax2:\
			while (Test Cond1):  # outer while loop\
			      ---------------------\
			      while(test cond2):  # inner while loop\
			            --------------------\
			      --------------------------\
			---------------------------------\
\
Syntax3:-\
		     for var1 jn Iterbale-obj1:   # outer for loop\
		           -----------------------------\
			    while(test cond2):  # inner while loop\
			            --------------------\
			      --------------------------\
		     -------------------------------------------\
\
Syntax4:\
			while (Test Cond1):  # outer while loop\
			      ---------------------\
			       for var2 in Iterable-obj2:  # inner for loop\
			          --------------------------\
			        ----------------------------------\
			---------------------------------\
============================================\
			Importance of Functions in Python\
		============================================\
=>In Most of the Programming Languages , we use the concept of FUNCTION. \
=>The Purpose of Functions concept is that "To perform Certain Operation and Provides Code Re-Usability"\
\
=>In the context of Functions, we have two types of Programming languages. They are\
		a) Un-Structured Programming Languages.\
		b) Structured Programming Languages.\
----------------------------------------------------------------------------------------------------------\
a) Un-Structured Programming Languages:\
  ---------------------------------------------------------------\
Example:  GW-BASIC\
=>Un-Structured Programming Languages does not contain the concept of                FUNCTIONS.\
=>Since Un-Structured Programming Languages does not contain the concept of    FUNCTIONS, we get the following Limitations.\
	1) Application Develoment Time is More\
	2) Application Memory Space is More\
	3) Application Execution Time is More\
	4) Application Perfromnace is Degraded.\
	5) Redundency of the code More.\
=>To Overcome these Limitation of Un-Structured Programming Languages , Industry always recommeded to to use Structured Programming Languages where it contains Functions concept.\
========================================================\
b)Structured Programming Languages:\
 ------------------------------------------------------------------\
=>Structured Programming Languages contains the concept of FUNCTIONS.\
=>Since Structured Programming Languages contains the concept of    FUNCTIONS, we get the following Advantages.\
	1) Application Develoment Time is Less\
	2) Application Memory Space is Less\
	3) Application Execution Time is Less\
	4) Application Perfromnace is Enhanced\
	5) Redundency of the code Minimized\
Examples:  C, CPP, JAVA, .NET, PYTHON...etc\
---------------------------------------------------------------------------------------------------------\
===================================\
			Part of Functions\
		===================================\
=>At time dealing with Functions development, we must ensure there must exists Two parts. They are\
	\
			a) Function Definition\
			b) Function Call(s)\
=>For Every Function Call, There Must exists a Function Definition otherwise we get "NameError"\
=>For a Function Definition , there can exists one or more Function Calls.\
=>Function Definition will execute , when we call that Function Definition otherwise Function Definition will not execute.\
----------------------------------------------------------------------------------------------------------------\
			Phases in Functions\
---------------------------------------------------------------------------------------------------------------\
=>As we know that, Functions are meant for "Performing Operations and code Re-usability", There must exists three Phases. They are\
		1) Function Taking INPUT\
		2) Function PROCESS the Input\
		3) Function Gives OUTPUT / RESULT\
-----------------------------------------------------------------------------------------------------------\
============================================\
		Syntax for Defining the Function in Python\
	============================================\
\
	def     function-name(list of formal params if any):\
	           """  doc string  """\
		   statement-1\
		   statement-2\
		   ----------------\
		   ----------------\
		   statement-n\
-------------------------------------------------------------------------------------------------------\
Explanation:\
-------------------\
1) "def" is a keyword used for defining the functions\
2) "function-name" is an valid varviable name of python and it is treated as                function name.\
3) "formal parameters" represents list of variables  used in Function heading and They are used for hodling (or) stroing the inputs coming from Function Calls.\
4)   """  doc string  """ represents Description(or) commonts about Funtion and         optional to write\
5) statement-1, statement-2,......,statement-n represents Block of statements meant for problem solving Logic which is common for many programmers.\
6) The variable(s) used in Function Body is called "Local Variable". The purpose of local variables is that to store the temporary result of the functions\
==========================X===================================\
Number of approaches to Develop Functions\
	===========================================================\
Approach1:\
------------------\
In This approach\
=>We take INPUT from Function Call\
=>We do PROCESS in Function Definition\
=>We Give OUTPUT to Function Call.\
\
Examples:-\
-----------------\
#approach1.py\
#This program calculates a number and find its square  using Functions concept\
def  square( n ):   # here 'n' is called formal Parameter\
	res=n*n\
	return res\
\
#main program\
x1=float(input("Enter a number:"))\
res1=square(x1)\
print("Square(\{\})=\{\}".format(x1,res1))\
=====================================X===================================\
Approach2:\
-----------------\
In This approach\
=>We take INPUT  in Function Definition\
=>We do PROCESS in Function Definition\
=>We Give OUTPUT to Function Definition\
\
Examples:\
---------------\
#approach2.py\
#This program calculates a number and find its square  using Functions concept\
def  square():\
	n=float(input("Enter a number:"))  # input\
	res=n**2   # processing\
	print("Square(\{\})=\{\}".format(n,res))  # result\
\
#main program\
square()\
=====================================X===================================\
Approach3\
-----------------\
In This approach\
=>We take INPUT from Function Call\
=>We do PROCESS in Function Definition\
=>We Give OUTPUT in  Function Definition.\
\
Examples:\
----------------\
#approach3.py\
#This program calculates a number and find its square  using Functions concept\
def   square( n ):\
	res= n**2  # processing\
	print("Square(\{\})=\{\}".format(n,res))  # result\
\
\
#main program\
x=float(input("Enter a number:"))\
square(x)\
===================================X================================\
Approach4\
------------------\
In This approach\
=>We take INPUT  in Function Definition\
=>We do PROCESS in Function Definition\
=>We Give OUTPUT to Function Call\
\
Examples:\
----------------\
#approach4.py\
#This program calculates a number and find its square  using Functions concept\
def   square():\
	x=float(input("Enter a number:"))  #input\
	res=x**2\
	return x, res   #  In python , by using return statement, we can return one or more values\
\
#main program\
n,res=square()\
print("Square(\{\})=\{\}".format(n,res))  # result\
print("===========OR===================")\
kvr=square()\
print("Square(\{\})=\{\}".format(kvr[0], kvr[1]))  # result\
===========================================\
		   Argument (or) Parameter Passing Mechanisms\
		===========================================\
=>Based on Arguments values are passing to Parameters from Function call to Function Definition, the arguments (or) Parameters are classfied into 5 types.\
\
	1) Possitional Parameters (or) Arguments\
	2) Default Parameters (or) Arguments\
	3) Key word Parameters (or) Arguments\
	4) Variable length Parameters (or) Arguments\
	5) Key word Variable length Parameters (or) Arguments\
============================================\
			Arguments and Parameters concept\
		============================================\
Arguments:- \
-------------------\
=>Arguments are variables used in Function Calls and they are also Global Variables\
--------------------\
Parameters:-\
--------------------\
=>Parameters are the variables used in Function Heading and also called as "Formal Parameters"\
=>Parameters are variables used in Function Body and They are called Local Parameters (or) Local Variables.\
\
=>The values of Formal and Local  Parameters can be accesed in the corresponding Function Definition only but not posssible to access in the context of other Functions and other part of the program\
=>The values of argumenrs can be accessed in the entire Program.\
=========================================\
		2) Default Parameters (or) Arguments\
	=========================================\
=>If we come across the common value for many function calls and if we use use Possitional parameter mechanism then Program takes more excution time bcoz the common values are transfered from function calls to function definition every time.\
=>To overcome this problem, It is recommended to use default Parameter mechanism. The advantage of Default Parameters is that to represent common values for all Function calls.\
\
Syntax for Function Definition:\
---------------------------------------------\
def  functionname(param1, param2......param-n-1=Val1, param-n=val2):\
         --------------------------------------------------------------\
	 Block of statements--Operation\
	 --------------------------------------------------------------\
\
Here param-n-1=Val1, param-n=val2 are called default Parameters.\
\
Rule:- The default Parameters must as last parameter(s) in function heading but not as First or middle\
=============================================\
		1) Possitional Parameters (or) Arguments\
	==============================================\
=>The concept of Possitional Parameters (or) Arguments says that The number of arguments values must be equal to the number of formal parameters by ensuring Order and Meaning.\
=>By default Function concept following Possitional Parameters (or) Arguments as Parameter passing mechanism.\
\
Syntax for Function Definition:\
---------------------------------------------\
		def   functionname(param1,param2...,param-n):\
		           -------------------------------------\
			   Block of statements--Operation\
			   ------------------------------------\
\
Syntax for Function call\
-------------------------------------\
  functionname(arg1,arg2,...arg-n)\
\
=>here the values of arg1,arg2....,arg-n are passing to param-1, param-2...param-n by ensuring number, order and meaning\
\
---------------------------------------------------------------------------------------------------------\
Examples:\
-----------------\
#posparamex1.py\
def  dispstuddet(stno,sname,marks,cname):\
	print("\{\}\\t\{\}\\t\{\}\\t\{\}".format(stno,sname,marks,cname))\
\
#main program\
print("Number\\tName\\tMarks\\tColl name")\
dispstuddet(10,"Rossum",34.56,"NLU")\
dispstuddet(12,"Ritche",44.56,"BLU")\
dispstuddet(14,"Gosling",34.56,"SUN")\
\
\
Result:\
-------------\
E:\\KVR-PYTHON-11AM\\FUNCTIONS>py posparamex1.py\
Number  Name    Marks   Coll name\
10      Rossum  34.56   NLU\
12      Ritche  44.56   BLU\
14      Gosling 34.56   SUN\
=======================================\
			3) Key word Parameters (or) Arguments\
		========================================\
=>When we know the formal parameter names of any function and if we don't know the order of parameters  and if we pass the data then we get  Inconsistant Result. To overcome this process , we must use the concept of Keyword arguments.\
=>In otherwords, we know the formal parameter names of any function and if we don't know the order of parameters  and if we pass the data accurateley then we must use Keyword arguments.\
=>To implement Keyword arguments concept, we must take Formal Parameter names as keys in function Call as arguments.\
\
=>The Rule of Key words args in function call is that First write use Possional arguments and latter we use Key word arguments other we get SyntaxError.\
\
Syntax for function definition:\
------------------------------------------------\
=>def    functionname(param1, param2......param-n):\
             ---------------------------------\
	     ---------------------------------\
	     block of statements\
	     --------------------------------\
\
Syntax for Function Calls\
---------------------------------------\
	functionname(param-n=val-n, param2=val2,param1=val1)\
\
-------------------------------------------------------------------------------------------\
#kwdparamex1.py\
def  display(a,b,c):\
	print("\{\}\\t\{\}\\t\{\}".format(a,b,c))\
\
#main program\
print("a\\tb\\tc")\
display(10,20,30)\
display(b=20,c=30,a=10)\
display(c=30,a=10,b=20)\
display(b=20,a=10,c=30)\
display(10,c=30,b=20)\
#display(c=30,b=20,10) error\
display(10,20,c=30)\
======================================\
         	    Variable length Parameters (or) Arguments\
		========================================\
=>When we have family of similar Function calls with Variable number of values with normal python programming , we must defined Multiple  Function Definitions and leads to more development time.\
=>To overcome this problem, we use the conept of  Variable length Parameters (or) Arguments.\
=>To Implement  Variable length Parameters (or) Arguments, we must define single function definition irrespective of family of Function calls by taking single formal parameter preceded with a symbol astrek (*) and the formal parameter is called Variable length Parameter and whose  type   is tuple.\
\
=>The Rule of Variable length Parameter is that in the function definitiion, we take single Variable length parameter only at last possition in Function Heading otherwise get Syntax Error\
\
Syntax for function definition:\
-----------------------------------------------\
def   functionname(list of formal params, *param):\
         -----------------------------------------\
	 -----------------------------------------\
\
Here *param is called Variable length parameter\
============================X=======================\
================================================\
		5) Key word Variable length Parameters (or) Arguments\
		================================================\
=>When we have family of similar Function calls with Key word Variable number of values with normal python programming , we must define Multiple  Function Definitions and leads to more development time.\
=>To overcome this problem, we use the conept of Key word  Variable length Parameters (or) Arguments.\
=>To Implement  Key word Variable length Parameters (or) Arguments, we must define single function definition irrespective of family of Function calls by taking single formal parameter preceded with a symbol double astrek (**) and the formal parameter is called Key word Variable length Parameter and whose  type   is dict.\
\
=>The Rule of Key word Variable length Parameter is that in the function definitiion, we take single Key word Variable length parameter only at last possition in Function Heading otherwise get Syntax Error\
\
Syntax for function definition:\
-----------------------------------------------\
def   functionname(list of formal params, **param):\
         -----------------------------------------\
	 -----------------------------------------\
\
Here **param is called Key word Variable length parameter\
==========================================\
			Global Variables and Local Variables\
		==========================================\
=>The purpose of Global Variables is that to Store Common Values, which are used in all the function Definition.\
=>Global Variables are those which are used before all the function definitions.\
=>Global Variable values can be accessed in all the functions of same program.\
\
=>Local Variables are those which are defined within body of Function Definition.\
=>Local Variables are used for storing temporary results of corresponding                  Functions only.\
=>Local Variables can be accessed in the corresponding Function Definition only      but not possible to access in the context of other part of the program\
========================================================\
		Accessing the  Global Variables inside of Function Definition\
	=========================================================\
=>When we want to modify the global variables values inside of function defeintion then the global variable values must be refered (or) accessed w.r.t global keyword otherwise those global variables are treated by PVM as Local Variables and Gives UnboundLocalError \
\
		\
=>Syntax:-\
			----------------------------\
			var1=val1\
			var2=val2\
			--------------\
			var-n=val-n  # here var1, var2...var-n are called Global Variables\
\
			def   functionname(list of formal params if any):\
			     ----------------------------------------\
			     ----------------------------------------\
			     global var1,var2.....var-n\
			     ---------------------------------------\
			     #Modification stmts on Global variables--var1,var2..var-n\
			     ----------------------------------------\
\
Examples:\
-----------------\
#GlobalVarModEx1.py\
a=10   # global variable\
def   update1():\
	global a\
	print("Val of a(Gloabla Variable) in side of update1()=\{\}".format(a)) #10\
	a=a+10\
	print("Val of a(Global Variable) in side of update1() after Modi=\{\}".format(a))# 20\
\
def  update2():\
	global a\
	a=a*10\
	print("Val of a(Global Variable) in side of update2() after Modi=\{\}".format(a))#200 \
#main program\
print("Val of a in main program=\{\}".format(a))#10\
update1()\
print("Val of a in main program after update1()=\{\}".format(a))#20\
update2()\
print("Val of a in main program after update2()=\{\}".format(a))#200\
----------------------------------------------------------------------------------------------\
Example:\
--------------------------\
#GlobalVarModEx2.py\
a=10\
b=20\
def   modify1():\
	#global a,b\
	print("val of a--global var=\{\}".format(a)) # 10 \
	print("val of b--global var=\{\}".format(b)) # 20\
	a=a+10\
	b=b+10\
	print("val of a--global var after modification=\{\}".format(a)) # 20\
	print("val of b--global var after modification=\{\}".format(b)) # 30\
\
#main program\
modify1()\
print("val of a--global var after modification in main=\{\}".format(a)) # 20\
print("val of b--global var after modification in main=\{\}".format(b)) # 30\
-----------------------------------------------------------------------------------------------------------\
==============================================\
			Anonymous Functions (or) Lambda Functions\
		===============================================\
=>Anonymous Functions is one of th new Facility in Python Programming\
=>Anonymous Functions are those, which does not contains name explicitly. \
=>Anonymous Functions are used for Perfoming "Instant Operations".\
=>Instant Operations are those which are no longer to use but used at that point         time.\
=>To to develop Anonymous Functions, we use a key word called lambdaand Hence Anonymous Functions are called Lambda Functions.\
=>Anonymous Functions contains contains only one statement and it returns the result automatically. (No need to  use return statement )\
\
-------------------------------------------------------------------\
Syntax for defining Anonymous Functions:\
-------------------------------------------------------------------\
	varname= lambda  params-list :  expression\
------------------\
Explanation:\
------------------\
=>'varname' is one of the valid python variable name and it acts as function name\
=>lambda is key word used for developing or defining Anonymous Functions\
=>params-list represent set variable names used for holding the input coming	          from function call.\
=>expression represents an executable statement aqnd it returns the value            automatically \
===============================X================================\
Example:\
-------------------------------------------------------------------------------\
#anonyfunex1.py\
def   addop(a,b):  # normal Function Def\
	c=a+b\
	return c\
\
kvrop=lambda a,b:a+b   # anonymous Function Def\
\
#main program\
a=float(input("Enter First value:"))\
b=float(input("Enter Second value:"))\
res=addop(a,b)\
print("sum=\{\}".format(res))\
print("=================OR============")\
res=kvrop(a,b)\
print("sum by using lambda=\{\}".format(res))\
res=kvrop("Python","Rossum")\
print("sum by using lambda=\{\}".format(res))\
res=kvrop(True,False)\
print("sum by using lambda=\{\}".format(res))\
res=kvrop(2+3j,3+9.5j)   #         \
print("sum by using lambda=\{\}".format(res))\
=============================================X=====================================================\
=============================================\
			Special Functions in Python\
	=============================================\
=>As part of python programming, In Functions concept, we have 3 special Functions. They are\
\
		a) filter()\
		b) map()\
		c) reduce()\
--------------------------------------x-----------------------------------------------------------------\
=============================\
					filter()\
			=============================\
=>This function isn used for filtering the required elements from given Iterable object by passing a function.\
\
=>Syntax:-          varname=filter(function-name, iterable-object)\
\
=>Explanation:\
----------------------\
=>varname is one object of <class,'filter'>, which containing filtered elements and varname can be converted into any collections data types(list,tuple,set,frozenset..etc)\
=>Function-name can be either Normal Function definition or anonymous                    Function def.\
=>Iterable object an be any object contains multiple values.\
=>The Execution behaviour of filter() is that Each element of Iterbale-object sending to Specified Function-name. If the Function-name returns True  then that element will filtered . if the Function returns False the that element will be neglected.\
=============================X====================================\
======================================\
					map()\
		======================================\
=>map() is used obtaining new Iterable object from existing iterable object by passsing a function with some logic\
=>Syntax:-\
		objname=map(function-name, iterable-object)\
Explnation:\
-----------------\
=>varname is one object of <class,'map'>, which containing new elements and varname can be converted into any collections data types(list,tuple,set,frozenset..etc)\
=>Function-name can be either Normal Function definition or anonymous  Function def.\
=>The Execution behaviour of map() is that  each element of iterable-object is passing to to specified function, processing that element based condition and returned to new iterable object.\
================================\
				reduce()\
		================================\
=>reduce() is used for obtaining a single element / result from given iterable object by applying to a function.\
=>Syntax:-\
			varname=reduce(function-name,iterable-object)\
=>here varname is an object of int, float,bool,complex,str only\
---------------------------------------\
Internal Flow of reduce()\
---------------------------------------\
step-1:- reduce() selects two First values int place them First var and		      Second var \
step-2:- The function-name utilizes the values First var and			     Second var  appled to the specified logic and obtains the result\
Step-3:- reduce () places the result of function-name in First variable			and reduce() selects the succeeding element of Iterable			object and places in second variable\
Step-4: repeat  Step-2 and Step-3 until all elements completed in		     Iterable object and returns the result\
---------------------------------------------------------------------------------------------------\
=>The reduce() belongs to a pre-defined module called" functools".\
=====================================\
		Creating a module in python\
	=====================================\
Step-1:-     Define the common variables, Functions and classes in a			Editor\
Step-2:-   Save the Above Editor Code on some file name with an			extension. py  (FileName.py)\
\
Note:-  Internally the filename.py is treated as filename.pyc and itself		    treated as module name\
\
------------------\
Example1:\
-----------------\
#simpleint.py----File Name and It it treated as Module								Name(simpleint.pyc)\
#program for cal simple interest\
def  simpleintformula():\
	p=float(input("Enter Principle Amount:"))\
	t=float(input("Enter Time:"))\
	r=float(input("Enter Rate of Interest:"))\
	#calculate\
	si=(p*t*r)/100\
	totamt=p+si\
	print("Simple Interest: \{\}".format(si))\
	print("Total Amount to pay: \{\}".format(totamt))\
----------------------------------------------------------------------\
#mathsinfo.py----file name and treated as									module---(mathsinfo.pyc)\
PI=3.14\
E=2.71\
A=34\
-----------------------------------------------------------------------------------------------\
===================================\
			Introduction  and Types of  Modules\
		===================================\
=>We know that Functions concept makes us understannd how to perform the operations and How re-use the function code within the same program.But Functions concept unable to provided re-usability across the Programs.\
=>To re-use the code across the program, In Python  we have a concept called MODULES.\
=>The purpose of Modules is that "To Re-use the code across the Programs ".\
=>Definition of Module:\
-------------------------------------\
=>A Module is a collection of Variables, Functions and Classes.\
-------------------------------------------------------------------------------------------------\
Types of Modules:\
---------------------------\
=>In Python, we have two types of Modules. They are\
		a) Pre-defined (or) Built-in Modules\
		b) Programmer (or) user (or) Custom-defined Modules\
\
a) Pre-defined (or) Built-in Modules\
----------------------------------------------------\
=>These modules are developed by Language Developers and They are available in Python API and whose role is to deal with Universal Requirements.\
\
	Examples:      functools, sys, random, os, re, threading, cx_Oracle\
			     mysql-connector, time....etc\
--------------------------------------------------------------------------------------------\
b) Programmer (or) user (or) Custom-defined Modules\
--------------------------------------------------------------------------------------------\
=>These modules are developed by Language Programmers and They are available in Python Project and whose role is deal with Common Requirements.\
\
Examples:     simpleint, mathsinfo.....etc\
=================================X==============================\
\
=============================================\
			Re-Using the Modules\
		==============================================\
=>Re-Using the Modules in python is nothing but accessing the variables , Functions and classes across the program \
=>We have two Techniques for Re-Using the Modules. They are\
		a) by using import statement\
		b) by using from....import statement.\
-----------------------------------------------------------------------------------------------\
a) by using import statement:\
---------------------------------------------\
=>import is one the keyword in python\
=>import statement is used for re-using the variables, functions and        classes across the programs.\
=>when we import with this approach, the current python can access the variables, functions and classes w.r.t module name otherwise we get SyntaxError.\
				modulename.variable name\
				modulename.function name\
				modulename.class name\
\
--------------------------------------------------------------\
Syntax1 for importing a single module:\
---------------------------------------------------------------\
		import  module name\
------------------------------------------------------------\
Syntax2 for importing multipleModules\
------------------------------------------------------------\
	import  module name1,module name-2,...module name-n\
-------------------------------------------------------------------------------------\
Syntax3 for importing a single module with alias name:\
---------------------------------------------------------------------------------\
		import  module name as alias name\
\
Syntax4 for importing multiple Modules with alias names\
------------------------------------------------------------\
import  module name1 as alias-name1,module name-2 as alias-name-2,...module name-n as alias-name-n \
---------------------------------------------------------------------------------------------\
b) by using from....import statement.\
---------------------------------------------------------\
=>here    'from' and 'import' are keywords\
=>This approach is used for accessing Variables, Functions and Classes across the Programs directly without preceded with Module name.\
\
--------------------------------------------------------------\
Syntax1 for importing a single module:\
---------------------------------------------------------------\
from module name import Variable Name, Function name, class name\
\
--------------------------------------------------------------\
Syntax2 for importing a single module with alias names\
---------------------------------------------------------------\
from module name import Variable Name as alias name, Function name as lias name, class name as alias name\
----------------------------------------------------------------------------------------\
Syntax3 for importing a single module with all \
---------------------------------------------------------------\
	from module name import *\
\
===============================X=======================\
=============================================\
			Package in Python\
	=============================================\
=>The Function concept is used for Performing some operation and provides code re-usability within the same program and unable to provide code re-usability across programs\
\
=>The Modules concept is a collection of Variables, Functions and classes and we can re-use the code across the Programs provided Module name and main program present in same folder but unable to provide code re-usability across the folders / drives / enviroments.\
\
=>The Package Concep is a collection of Modules. \
=>The purpose of Packages is that to provide code re-usability across the folders / drives / enviroments.\
\
=>To deal with the package, we need to the learn the following.\
			a) create a package\
			b) re-use the package\
--------------------------------------------------------------------------------------------------\
a) create a package:\
  ----------------------------\
=>To create a package, we use the following steps.\
		i) create a Folder\
		ii) place / write an empty python file called __init__.py\
		iii) place / write the module(s) in the folder where is it		           considered as Package Name\
\
Example:\
--------------\
			bank           <-----Package Name\
		      -----------\
		              __init__.py    <----Empty Python File\
			      simpleint.py  <--- Module Name\
			      mathsinfo.py  <--- Module Name\
========================================================\
b) re-use the package\
---------------------------------\
=>To the re-use the modules of the packages across  the folders / drives / enviroments, we have to two approaches. They are\
	i) By using sys module\
	ii)by using PYTHONPATH external Variables\
------------------------------------------------------------------------------------------\
i)By using sys module:\
-------------------------------------\
Syntax:\
-----------  sys.path.append("Absolute Path of Package")\
\
=>sys is pre-defined module\
=>path is a pre-defined object / variable\
=>append() is pre-defined function present in path and is used for locating the package name of python( specify the absolute path)\
\
Example:\
\
sys.path.append("E:\\\\KVR-PYTHON-11AM\\\\ACKAGES\\\\BANK")\
-----------------------------------------------------------------------------------------------\
ii)by using PYTHONPATH Enviromental Variables:\
------------------------------------------------------------------------\
=>PYTHONPATH is one of the Enviromental Variable\
Steps for setting PYTHONPATH=E:\\KVR-PYTHON-11AM\\PACKAGES\\BANK\
---------------------------------------------------------------------------------------\
==============================================\
		Introduction to exception handling\
	==============================================\
=>The purpose of exception handling is that "To develop Robust Applications".\
=>In real time, when we develop any project , we need to use certain programming and by using that programming language we develop, compile and execute certain programs.During this development, Compilation and execution, we get 3 types of errors. They are\
		a) Compile time errors.\
		b) Logical Errors\
		c) Runtime Errors.\
\
a) Compile time errors:\
----------------------------------\
=>Compile time errors are those, which are occuring during compile time(.py--->.pyc)\
=>These errors are occuring due to Syntaxes are not followed .\
=>These errors are solved by Programmers during Development Time.\
------------------------------------------------------------------------------------------------------\
b) Logical Errors:\
---------------------------\
=>Logical Errors are those, which are occuring during Execution time(.pyc--->machine understandable code)\
=>Logical Errors are ocuuring due to Wrong representation of Logic.\
=>Logical Errors gives wrong Results\
=>These errors are solved by Programmers during Development Time.\
---------------------------------------------------------------------------------------------------------\
c)Runtime Errors:\
-------------------------------\
=>Runtime Errors are those, which are occuring during Execution time(.pyc--->PVM----->machine understandable code)\
=>Runtime Errors are those occuring due to Wrong  (or) Invalid Input entered by Application User.\
=>Runtime Errors by default gives Technical Error Messages.\
=>In Real Time projects, It is not recommeded to generate Technical Error Messages bcoz They are not understanble by end-users and it is wlays recommened to generate user-frinedly error messages\
-----------------------------------------------------------------------------------------------------\
Points to be rememberable in exception handling\
--------------------------------------------------------------------------\
1) When the application user enters Invalid (or) wrong input then we get Runtime      Error.\
2) Runtime errors by default gives Technical Error Messages.\
\
3) Definition of exception:-\
   -----------------------------------\
   =>Runtime error(s) of a program is called Exception(s)\
	   (Invalid Invalid----->Runtime Error---->Exception)\
   =>Every Invalid Input is considered as Exception.\
4) All exceptions by default generates Technical error messages\
\
5) Def. of exception handling:\
  -------------------------------------------\
  =>The process of Converting Technical error messages into User-Freindly Error messages is called Exception Handling.\
\
6) When an exception occurs in Python Program, Internally 3 points takes place. They are\
		a) PVM terminates the program execution abnormally.\
		b) PVM comes of out of the Program Flow\
		c) By default  PVM generates Technical Error Message.\
\
7) In step-(6), to do (a), (b) and (c), Internally PVM create an object of appropriate	    exception class\
8) When an exception occurs in python program then PVM create an object of appropriate exception class.\
=====================================\
			Types of exceptions\
		=====================================\
=>In python Programming, we have two types of exceptions. They are\
		a) Pre-defined (or) Built-in exceptions\
		b) Programmer/ User / Custom Defined Exceptions\
\
a) Pre-defined (or) Built-in exceptions:\
-------------------------------------------------------\
=>These exceptions are defined and developed by Language Developpers and available in Python API and whose role is that to deal with Universal Problems.\
\
=>Some of the Universal Problems are\
	a) Divsion by zero (ZeroDivisionError)\
	b) Invalid Number Formats ( ValueError)\
	c)Invalid type of arguments ( TypeError)\
	d) Invalid Module Names ( ModuleNotFoundError)\
	e) Invalid indices (IndexError)...etc\
\
b) Programmer/ User / Custom Defined Exceptions:\
------------------------------------------------------------------------------\
=>These exceptions are defined and developed by Language  Programmers and they ara available in Python Project and whose role is to edal with Common Problems\
\
=>Some of the Common Problems are\
	a) Attempting to enter Inva lidPIN in ATM applications.\
	b) Attempting to enter Invalid User  Name and Password .\
	c) Attempting to withdraw more amout than existing bal of account.\
	..............etc\
\
================================X================================\
=======================================\
			Handling the exception in python\
		========================================\
=>Handling the exception in python are nothing but converting Technical Error Messages into User-friendly error messages.\
=>To convert Technical Error Messages into User-friendly error messages, In python  we have 5 keywords. They are\
			a) try\
			b) except \
			c) else\
			d) finally\
			e) raise.\
-----------------------------------------------------\
Syntax for handling the exceptions:\
-----------------------------------------------------\
		try:\
		   ------------------------------\
		   block of statements\
		   generating exceptions\
		   -------------------------------\
		except  exception-class-name-1:\
		    ----------------------------------------\
		    Block of stements-generates\
		    User_Friendly error Messages\
		    -----------------------------------------\
		except  exception-class-name-2:\
		    ----------------------------------------\
		    Block of stements-generates\
		    User_Friendly error Messages\
		    -----------------------------------------\
		except  exception-class-name-n:\
		    ----------------------------------------\
		    Block of stements-generates\
		    User_Friendly error Messages\
		    -----------------------------------------\
		 else:\
		     ----------------------------------------\
		     Block of statements--Recommended \
		     to display Results\
		     ----------------------------------------\
		  finally:\
			--------------------------------------\
			Block of statements--executes compulsority\
			-----------------------------\
=================================================\
			Explanation for keywords of handling the exceptions\
		=================================================\
1) try:\
 ---------\
=>It is the block, in which we write block of statements generating exceptions. In otherwords, what are all the statements generating exceptions, they must written inside of try block and hence try block is called exception monitoring block.\
=>If any exception occurs in try block then PVM comes out of try block and exceute appropriate except block and gives user-friendly error messages.\
=>After executing appropriate except block, PVM control never goes to try block to execute rest of the statements.\
=>Every try block must be immediately followed by except block ( Intermediate statements are not allowed between try and except blocks)\
=>Every try block must contain at least one except block and recommended to write multiple except blocks for generating multiple user-friendly error messages.\
-----------------------------------------------------------------------------------------------------------------\
2) except :\
-------------------\
=>It is this block, in which we write block of statements generates User-friendly error messages. In otherwords, except block supresses the technical error messages and generates user friendly error messges and hence except block is called exception processing block.\
Note:- handling the exception= try block +except block\
=>except block will execute provided when the exception occurs in try block.\
=>even though we write multiple except blocks, at any point time, PVM will execute only appropriate except block depends on type of exception occurs in try block.\
=>The place of writing except block is after try block.\
-------------------------------------------------------------------------------------------------\
3) else:\
---------------\
=>This is the block, in which we write block of statements and they always recommeded to gives results and hence it is called result generated block\
=>else will block will execute when there is no exception occurs in try block.\
=>writing else block is optional\
=>The place of writting else block is after except block.\
------------------------------------------------------------------------------------------------\
4) finally:\
 -------------\
=>It is the block, in which we write block of statements, which are reqliquishing(close / release / clean-up ) the resources ( files / databases ) which are obtained in try block.\
\
=>finally block will execute compulsorily irrespective type of exception occurs.\
\
=>writting finally block is optional.\
=>The place of writting finally block is after else block \
--------------------------------------------x--------------------------------------------------------------\
======================================\
			Various forms except blocks\
		======================================\
=>The Various forms except blocks are\
\
Form1:\
----------\
		try:\
		  --------------\
		  --------------\
		except  exception-class-name-1:\
		    -----------------------------------------\
		    User-frindly error messages\
		    -----------------------------------------\
==================================================================\
Form2: (Multi except exception handling block)\
----------\
try:\
  --------------\
  --------------\
except  (exception-class-name-1,exception-class-name-2...exception-class-name-n:\
		    -----------------------------------------\
		    User-frindly error messages\
		    -----------------------------------------\
==============================================================\
Form3: (handling all exception without user-friendly error messages)\
----------\
try:\
  --------------\
  --------------\
except : \
	print("exception occured")\
-------------------------------------------------------------------------------------------------------\
Form4: (handling all exception with exception-name with alias )\
----------\
try:\
  --------------\
  --------------\
except  exception-class name as alias name: \
	print("exception occured")\
		\
#here alias name stores the default exception generated message.\
============================X===================================\
====================================================\
	Development of Programmer/ User / Custom Defined Exceptions\
	=====================================================\
=>These exceptions are defined and developed by Language  Programmers and they are available in Python Project and whose role is to deal with Common Problems.\
=>Some of the Common Problems are\
	a) Attempting to enter Invalid PIN in ATM applications.\
	b) Attempting to enter Invalid User  Name and Password .\
	c) Attempting to withdraw more amout than existing bal of account.\
	..............etc\
\
------------------------------------------------------------------------------------------------------------\
Steps for developing programmer-defined exceptiona classes\
------------------------------------------------------------------------------------------------\
1) Choose the programmer-defined class name\
2) The Programmer defined must inherit the properties of Exception /                            BaseException . Hence The Programmer-defined class becomes                               programmer-defined exception sub class.\
\
Example:  Develop a a programmer -defined exception for dealing with invalid pin\
\
		class PinError(Exception):pass\
\
Example:  Develop a a programmer -defined exception for dealing with Login problemns\
		class LoginError(BaseException):pass\
----------------------------------------------------------------------------------------------------------------\
================================================\
				raise key word\
	=================================================\
=>raise keyword is used for hitting / raising / generating the exception provided some condition must be satisfied.\
=>Syntax:-     if (Test Cond):\
			      raise   <exception-class-name>\
\
Examples:\
-------------------\
from kvr import KvrDivisionError\
def division(a,b):\
	if(b==0):\
		raise KvrDivisionError\
	else:\
		return (a,b,a/b)\
=================================================\
				Introduction to files\
		==================================================\
=>The main purpose of files is that "To achieve the Data Persistency "\
=>Data Persistency is nothing but storing the data permanently.\
=>In the context of files, we can develop two types of applications. They are\
		a) Non-Persistant Applications\
		b) Persistant Applications.\
a) Non-Persistant Applications:\
-----------------------------------------------\
=>In this application development, we accept the inputs from KBD, stored in main memory(RAM), process the input in main Memory and whose result displayed on Console.\
=>Any Data stored in Main Memory (RAM) is temporary. \
=>All our previous program are comes under  Non-Persistant Applications.\
------------------------------------------------------------------------------------------------------------\
b) Persistant Applications:\
-----------------------------------------\
=>In this application development, we accept the inputs from KBD, stored in main memory(RAM), process the input in main Memory and whose result displayed on Console and the results are Stored Permanently.\
=>In Industry, we have two approaches to store the data permanently. They are\
		a) By using Files\
		b) By using Database Softwares.\
==============================X==============================\
==============================================\
					Operations on files\
		===============================================\
\
=>Definition of File:\
-----------------------------\
=>A file is a collection of Records.\
=>A record is a collection of Field values.\
\
NOTE:-  Every object data becomes record in the file and the record of file becomes an object.\
\
Definition of Stream:\
------------------------------\
=>The flow of data between main memory and file of secondary is called stream\
----------------------------------------------------------------------------------------------------------------\
Operations on Files\
-----------------------------\
=>On files, we can perform two types of Operations. They are\
		a) Write Operation\
		b) Read Operation\
----------------------------\
a) Write Operation:\
----------------------------\
=>The purpose of write operation is that to store the object data of main memory into file of secondary memory.\
=>Steps:\
-------------\
		a). Choose the file name\
		b). Open the file name in write mode\
		c). Perform Cycle of write Operations.\
=>During the write operations, we get the following exceptions.\
		a)EOFError\
		b)IOError\
		c) FileExistError\
--------------------------------------------------------------------------------------------\
b) Read Operation:\
-----------------------------\
=>The purpose of read operation is that to transfer the the data from file of secondary memory into the object of  main memory .\
Steps:\
------------\
	a) Choose the file name\
	b) Open the file name in read mode \
	c) Perform Cycle of Read Operations.\
=>During the read operations, we get the following exceptions.\
	a) FileNotFoundError\
==============================X============================\
========================================\
			Types of Files in python\
		=========================================\
=>In Python , we have two types of files. They are\
		a) Text Files\
		b) Binary Files\
a) Text Files:\
-------------------\
=>This files contains alphabets, special symbols and digits.\
=>Text Files are denoted by a letter 't' \
Examples:   .py   .java    .txt   .c, .cpp...etc\
-------------------------------------------------------------\
b) Binary Files:\
-----------------------\
=>These files contains the information internally in the form of binary (or) pixels\
=>Binary Fils are denoted by a letter 'b'\
\
Examples:   .jpeg, .gif, audio, video files....etc\
\
===============================X========================\
============================================\
					random module\
		=============================================\
=>Python "random" module is an in-built module of python.\
=>The purpose of random module is that to generate random numbers.\
=>random numbers are not truly random but they are selected from the specified list, string..etc objects and they displayed on the console\
=>The random module contains, the following pre-defined functions.\
		a) randrange()\
		b) randint()\
		c) random()\
		d) uniform() \
		e) choice()\
		f) shuffle()\
		g) sample()\
------------------------------------------------------------------------------------------------------------------\
a) randrange():\
 ------------------------\
 =>Syntax:-  random.randrange(start,stop)\
 =>This function is used for generating random integer value from the specified start and stop-1 value(start included and stop value excluded).\
 =>Here start and stop value must be int data but other types are not allowed.\
 ------------------\
 Examples:\
 -----------------\
>>> import random as r\
>>> r.randrange(10,20)--------10\
>>> r.randrange(10,20)--------18\
>>> r.randrange(10,20)-------16\
>>> r.randrange(10,20)----17\
>>> r.randrange(10,20)----19\
>>> r.randrange(10,20)----16\
>>> r.randrange(10,20)-----14\
>>> r.randrange(10,20)-----18\
>>> r.randrange(1000,1500)---1212\
>>> r.randrange(1000,1500)---1457\
>>> r.randrange(1000,1500)--1047\
Examples:\
----------------\
#otp.py\
from random import randrange\
print("Ur OTP=",randrange(0,10),randrange(0,10),randrange(0,10),randrange(0,10),randrange(0,10),randrange(0,10))\
print("----------------")\
print(randrange(100000,999999))\
-------------------------------------------------------------------------------------------------------------------------------\
b) randint():\
------------------\
=>Syntax:-  random.randint(start,stop)\
=>This function is used for generating random integer value from the specified start and stop value(start and  stop values are included).\
 =>Here start and stop value must be int data but other types are not allowed.\
 -----------------\
 Examples:\
 -----------------\
>>> r.randint(1000,9999)---------8127\
>>> r.randint(1000,9999)-----8220\
>>> r.randint(1000,9999)-----7985\
>>> r.randint(1000,9999)-----3792\
>>> r.randint(10000,99999)----19974\
>>> r.randint(10000,99999)----97968\
>>> r.randint(10000,99999)---97781\
>>> r.randint(10000,99999)---26995\
>>> r.randint(10000,99999)---80854\
--------------------------------------------------------------------------------------------------------------------\
c) random()\
--------------------\
=>This function generates floting point random values between 0 to 1 (both excluded)\
=>Syntax:-   random.random()\
\
Examples:\
---------------\
>>> r.random()------0.4373284144678242\
>>> r.random()-----0.19401495196580687\
>>> r.random()------0.01862452100170109\
>>> r.random()-----0.20330848408922564\
\
Examples:\
#ranex1.py\
from random import random\
for i in range(5):\
	print("%.4f" %random())\
(OR)\
#ranex1.py\
from random import random\
for i in range(5):\
	print(random())\
------------------------------------------------------------------------------------------------------------\
d) uniform() :\
------------------------\
=>This function generates floating point random values between start and stop ( both of them are excluded)\
=>Syntax:-   random.uniform(start,stop)\
=>The values of start and stop can be either int or float\
--------------\
Examples\
--------------\
>>> r.uniform(100.5,200.5)--------------157.11114697097324\
>>> r.uniform(100.5,200.5)---------190.95457759732517\
>>> r.uniform(100.5,200.5)---------123.1952434841989\
>>> r.uniform(100.5,200.5)---------104.82161510942237\
>>> r.uniform(1,2)------1.3789457148106403\
>>> r.uniform(1,2)------1.5586482241482948\
>>> r.uniform(1,2)------1.128575716628112\
>>> r.uniform(1,2)-----1.4208894552256035\
>>> r.uniform(1,2)----1.9393817696446607\
>>> r.uniform(1,2)----1.8984870017660347\
>>> r.uniform(-100.5,-200.5)---------136.32077473726284\
>>> r.uniform(-100.5,-200.5)-------112.2432994001467\
>>> rv=r.uniform(-100.5,-200.5)\
>>> print(rv)-------122.58685384954742\
------------------\
Examples:\
------------------\
#ranex2.py\
from random import uniform\
for i in range(3):\
	print("%.3f" %uniform(10.5,20.5))\
----------------------------------------------------------------------------------------------------------\
e) choice():\
------------------\
=>This function is used for obtaining random element  from the given iterable object.\
=>Syntax:-\
---------------\
			random.choice(iterableobj)\
\
Examples:\
---------------\
>>> lst=['a','e','i','o','u']\
>>> print(lst)-------['a', 'e', 'i', 'o', 'u']\
>>> print(r.choice(lst))\
u\
>>> print(r.choice(lst))\
u\
>>> print(r.choice(lst))\
a\
>>> print(r.choice(lst))\
e\
>>> print(r.choice(lst))\
o\
>>> print(r.choice(lst))\
i\
>>> print(r.choice(lst))\
e\
>>> print(r.choice(lst))\
u\
------------------------------------------------\
>>> lst=["python","java","DS","ML","AI",34.56,34,True]\
>>> print(lst)\
['python', 'java', 'DS', 'ML', 'AI', 34.56, 34, True]\
>>> print(r.choice(lst))\
java\
>>> print(r.choice(lst))\
python\
>>> print(r.choice(lst))\
34\
>>> print(r.choice(lst))\
34.56\
>>> print(r.choice(lst))\
DS\
>>> print(r.choice(lst))\
java\
>>> print(r.choice(lst))\
ML\
>>> print(r.choice(lst))\
True\
>>> print(r.choice(lst))\
python\
\
Examples:\
------------------\
#ranex3.py\
from random import choice\
givendata="456AZU24abrE#Q73^#@HUt90rpm*%HK573QPZ1234$"\
for i in range(5):\
	print(choice(givendata),choice(givendata),choice(givendata),choice(givendata),choice(givendata))\
--------------------------------------------------------------------------\
f) shuffle():\
-------------------\
=>This function is used for re-oranizing the order of elements of any mutable objects only.\
=>Syntax:-    random.shuffle(Mutable_Iterable_object)\
\
Examples:\
-----------------\
>>> lst=["python","java","DS","ML","AI",34.56,34,True]\
>>> print(lst)----------['python', 'java', 'DS', 'ML', 'AI', 34.56, 34, True]\
>>> r.shuffle(lst)\
>>> print(lst)----[34, 'java', 'python', 34.56, 'AI', 'DS', 'ML', True]\
>>> r.shuffle(lst)\
>>> print(lst)----[34, 'AI', True, 'ML', 34.56, 'java', 'python', 'DS']\
>>> r.shuffle(lst)\
>>> print(lst)---['ML', True, 'java', 'AI', 34, 'python', 'DS', 34.56]\
>>> print(r.shuffle(lst))---None\
\
Examples:\
-----------------\
#ranex4.py\
from random import shuffle\
lst=["python","java","DS","ML","AI",34.56,34,True]\
for i in range(5):\
	shuffle(lst)\
	print(lst)\
\
-------------------\
Examples:\
------------------\
>>> s="python"\
>>> r.shuffle(s)---------TypeError: 'str' object does not support item assignment\
>>> lst=['a','e','i','o','u']\
>>> r.shuffle(lst)----\
>>> print(lst)--------['a', 'u', 'e', 'o', 'i']\
>>> r.shuffle(lst)\
>>> print(lst)---['u', 'i', 'a', 'o', 'e']\
>>> r.shuffle(lst)\
>>> print(lst)----['a', 'e', 'i', 'u', 'o']\
===================================================================\
g) sample():\
-------------------\
Syntax:-   listobj=random.sample(iterable_object, k )\
=>Here k represents no. of selections to be made randomly from the specified iterable object.\
Examples:\
------------------\
>>> lst=["python","java","DS","ML","AI",34.56,34,True]\
>>> print(lst)----['python', 'java', 'DS', 'ML', 'AI', 34.56, 34, True]\
>>> r.sample(lst,2)\
[34.56, 'DS']\
>>> r.sample(lst,2)\
['AI', 'python']\
>>> r.sample(lst,2)\
['python', 'AI']\
>>> r.sample(lst,2)\
['java', 'ML']\
>>> r.sample(lst,2)\
['AI', 'DS']\
>>> r.sample(lst,3)\
[34, 'java', 'AI']\
>>> r.sample(lst,4)\
[True, 'AI', 34.56, 'python']\
>>> r.sample(lst,4)\
['python', 'DS', 34, 'ML']\
>>> res=r.sample(lst,4)\
>>> print(res)--------[True, 'python', 34.56, 'ML']\
>>> res=r.sample(lst,4)\
>>> print(res)--------------['java', 'ML', 34, 'AI']\
=============================X=========================\
==========================================\
			Syntaxes for opening the files\
		==========================================\
=>In Python, we have 2 syntaxes for opening a file. They are\
\
		a) open()\
		b) with  open()   as \
------------------------------------------------------------------------------------------\
a) open():\
  ---------------\
  Syntax:-   varname=open("filename","file mode")\
Explanation:\
------------------\
=>'varname' represents File Pointer pointing to the file provided the file opened successfully.\
=>open() is used for opening file in specified mode other we get appropriate exception.\
=>File mode represents r, w,a,r+,w+,a+,x .\
=>NOTE:-\
====================X==============================\
==========================================\
			File Opening Modes in Python\
	==========================================\
=>In Python , we have 7 file opening modes. They are\
-------------------------------\
1)  r\
------------------------------\
=>This mode is used opening the file in read mode.\
=> This is one of the default file mode\
------------------------------\
2)  w\
------------------------------\
=>This mode is used for opening the file in write mode by creating newly always.\
=>In otherwords, This mode opens the new file in write mode and write the data newly. if the file already existing then it will be opened by removing existing data and adds new data from the begining of the file.\
------------------------------\
3)  a\
------------------------------\
=>This mode is used for Opening  and Creating the new File in write mode and writes the from the beging.\
=>This mode can also be used for Opening  the Existing File in write mode and writes new data at the end of existing data of file (appending)\
------------------------------\
4)  r+\
------------------------------\
=>This mode is used for opening the file in read mode\
=>This mode makes to perform First read Operation and later we can perform write operation.\
=>While we are opening the file in r+ and if the  file does not exists then we get FileNotFoundError and we can't perform write operationat this time.\
------------------------------\
5)  w+\
------------------------------\
=>This mode is used for opening the file(new and existing file) in write mode by creating newly always.\
=>=>This mode makes to perform First write operation and later we can perform Read Operation .\
=>While we are opening the new file in w+ and if we try to read the data from the new file then we IOError and EOFError\
------------------------------\
6)  a+\
------------------------------\
=>This mode is used for Opening  and Creating the new File in write mode and writes the from the beging.\
=>This mode can also be used for Opening  the Existing File in write mode and writes new data at the end of existing data of file (appending)\
=>Aditionally, we can perform read operation also after write / appending operation otherwise we get EOFError and IOError.\
------------------------------\
7) x \
-------------------------------\
=>This mode is used for opening the file in write mode EXCLUSIVELY.\
=>If we open the existing file in 'x' mode then we get FileExistError\
-------------------------------------------------------------------------------------------------\
===============================x====================================================================\
b) with  open()   as :\
------------------------------\
Syntax:\
------------\
	with    open("FileName","File Mode") as <file-pointer> :\
	            -----------------------------------------------------------------------\
		    -----------------------------------------------------------------------\
		    Block of statements-performing File Operation\
		    -----------------------------------------------------------------------\
		    -----------------------------------------------------------------------\
\
Explanation:\
-----------------------\
=>"with" and 'as' as keywords\
=>open() is pre-defind function used to open a file in the specified mode.\
=>As long as PVM is executing Indentation block of statements of with..open() as .. syntax , File is actively Under Opening  and whose 'closed' property is False.\
=>Once PVM comes out of Indentation block of statements of with..open() as .. syntax, then the 'closed' property is True. In otherwords this syntax closes the file automatically onec PVM comes of Indentation block of statements of with..open() as .. syntax. This Property is called auto-closeable.\
===========================================\
		     Functions for writting the data to the file\
		===========================================\
=>To write the data to the file, we have two functions. They are\
\
			a) write()\
			b)writelines()\
a)write():-\
-------------\
=>This function is used for writting the data to the file in the form of str always.\
\
Syntax:-      	filepointer.write( str data)\
\
Examples:\
------------------\
#FileWriteEx1.py\
with open("person.addr","a") as wp:\
	#accept the address from KBD\
	pname=input("Enter Ur Name:")\
	hno=input("Enter Ur House Number:")\
	streetno=int(input("Enter Ur Street Number:"))\
	city=input("Enter Ur City:")\
	#save the address of person in file \
	wp.write(pname+"\\n")\
	wp.write(hno+"\\n")\
	wp.write(str(streetno)+"\\n")\
	wp.write(city+"\\n")\
	print('\\nAddress Saved In file--verify')\
================================================================\
b)writelines():-\
-------------\
=>This function is used for writting the Iterbale object data to file in the form str\
\
Syntax:-      	filepointer.writelines(  Iterbale object )\
\
---------------------\
Examples:\
---------------------\
#FileWriteEx3.py\
with open("person1.addr","w") as wp:\
	# take addr in list\
	lst=["Ramesh\\n",str(10)+"\\n","Hyd\\n","India\\n"]\
	#save the address of person in file \
	wp.writelines(lst)\
	print('\\nAddress Saved In file--verify')\
\
==================================X============================\
=======================================================\
		  Functions for Reading the data from the file\
	=======================================================\
=>To read the data from the file, we have 4 pre-defined functions. They are\
		a) read()\
		b) read(no. of chars)\
		c) readline()\
		d) readlines()\
-------------------------------------------------------------------------------------------------------------------\
a) read():\
----------------\
=>This function is used for reading the entire data from file and returns in the form of str.\
Syntax:-            varname=filepointer.read()\
=>here 'varname' is of type  <class,'str'>\
\
Examples:\
----------------\
#program for reading the content of the file and display\
#FileReadEx1.py-------------read()---implementation of type command of OS\
fname=input("Enter the file name:")\
try:\
	with open(fname) as fp:\
		filedata=fp.read()\
		print(filedata)\
except FileNotFoundError:\
	print("Files does not exists:")\
-------------------------------------------------------------------------------------------------------------------\
b) read(no. of chars):\
----------------------------------\
=>This function is used for reading the specified number of characters  from file and returns in the form of str.\
Syntax:-            varname=filepointer.read(no. of characters)\
=>here 'varname' is of type  <class,'str'>\
---------------------\
Examples:\
---------------------\
#This program reads some specific number of characters from the file.\
#FileReadEx2.py----read(no. of chars)-----tell()\
#tell() gives current position of filepointer\
#seek(Position) will makes the file pointer to point to the perticular position.\
with open("pyth.info","r") as rp:\
	print("-"*50)\
	print("Initial  Position/Index of rp=\{\}".format(rp.tell())) # 0\
	print("-"*50)\
	#read 6 characters\
	filedata=rp.read(6)\
	print("Data=",filedata)\
	print("-"*50)\
	print("Current Position/Index of rp=\{\}".format(rp.tell())) # 6\
	print("-"*50)\
	#read 10 characters\
	filedata=rp.read(10)\
	print("Data=",filedata)\
	print("-"*50)\
	print("Current Position/Index of rp=\{\}".format(rp.tell())) # 16\
	print("-"*50)\
	#read the rest of the data\
	filedata=rp.read()\
	print("Data=",filedata)\
	print("-"*50)\
	print("Current Position/Index of rp=\{\}".format(rp.tell())) # 105\
	print("-"*50)\
	rp.seek(0)\
	print("Current Position/Index of rp after seek(0)=\{\}".format(rp.tell())) # 0\
	print("-"*50)\
	filedata=rp.read()\
	print("Data=",filedata)\
	print("-"*50)\
================================X=============================\
c) readline()\
-------------------\
=>This function is used for reading One line at a time   from file wherever file pointer  and returns in the form of str.\
Syntax:-            varname=filepointer.readline()\
=>here 'varname' is of type  <class,'str'>\
--------------------\
Examples:\
-------------------\
#This program reads one line at a time from File\
#FileReadEx3.py----readline()\
with open("pyth.info") as rp:\
	filedata=rp.readline()\
	print(filedata)\
	filedata=rp.readline()\
	print(filedata)\
	filedata=rp.readline()\
	print(filedata)\
	filedata=rp.readline()\
	print(filedata)\
	filedata=rp.readline()\
	print(filedata)\
---------------------------------------------------------------------------------------------------\
d) readlines():\
-----------------------\
=>This function is used for reading all the  lines  from file   and returns in the form of list.\
Syntax:-   varname=filepointer.readlines()\
=>here 'varname' is of type  <class,'list'>\
\
Examples:\
--------------------\
#This program reads all lines at a time from File\
#FileReadEx4.py----readlines()\
with open("pyth.info") as rp:\
	filedata=rp.readlines()\
	for line in filedata:\
		print(line, end="")\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
=====================================================\
				Pickling and Un-pickling\
						(or)\
			Object Serialization and Object De-serialization\
	====================================================\
--------------\
Pickling ( Object Serialization)\
--------------\
=>Let us assume there exists an object with mutiple values in main memory. To save / write the object data with write() and writelines() , internally these functions will transfer value by value to the file of secondary memory and takes more execution time. To overcome this  problem, we must use pickling.\
=>The Advantage of pickling concept is that with single write operation we can save (or) writes the object data to the file instead of redundent write operations.\
Definition of Pickling:\
---------------------------------\
The Process of Saving (or) writing the object data of main memory into the file of secondary memory by performing single write Operation is called "Pickling"\
=>Pickling concept participates in write Operation.\
-----------------------------------\
Implementation of Pickling:\
---------------------------------------------\
	a) import pickle\
	b) prepare an object with multiple values\
	c) Choose the file name and open it into write mode\
	d) use dump() of pickle module\
			Syntax:   pickle.dump(object,filepointer)\
	here dump() is used for saving / writing the entire object data into file of secondary memory.\
---------------------------------------------------------\
Un-pickling (Object De-serialization)\
--------------------------------------------------------\
=>Let us assume there  exists a record with  multiple values in a file of secondary memory. To read the entire record content from the file of secondary memory by using read(), read(no.of chars), readline() and readlines() then they will read  the record values value by value and it is one of the time consuming Process /  takes More  execution time. \
=>To over come this problem, we use un-pickling.\
=>The advantage of un-pickling is that with single read operation, we can read entire record content from file of secondary memory into the object of memory. \
-------------------------------------------\
=>Definition of un-pickling:\
-------------------------------------------\
=>The process of reading / transfering the entire record contenf from  file of secondary memory into the object of main memory by perfoming single read operation is called Un-Pickling.\
-----------------------------------------------\
Implementation of Un-Pickling:\
----------------------------------------------\
a) import pickle\
b)Choose the file name and open it into read mode\
c) use load() of pickle module\
\
Syntax:-\
				\
objname=pickle.load(file pointer)\
\
Here load() is used for reading entire record content from file and trnasfered into object of main memory.\
\
=>Hence Pickling and un-pickling provides High Performnce to file operations instead of using normal read and write functions.\
=>Pickling and un-pickling concept always  deal with binary files.\
===============================================X===============================================\
==================================================\
		 Importance of Database softwares in data Persistency.\
		==================================================\
=>The main purpose DataBase Softwares is that "To achieve the Data Persistency"\
=>Data Persistency is nothing but storing the data Permanently.\
=>In Database , the data always stored in the form of Tables.\
=>A table is a collection of Rows and Columns.\
=>Rows are called Records  & Columns are called Fields \
--------------------------------------------------------------\
=>Advantages of database softwares:\
----------------------------------------------------------------\
1) All types of RDBMS  products provides high security Database\
2) Querying the data from database software is easy.\
3) Database software are posssing OS Independncy\
4) Database softwares stores large volume of data.\
========================================================\
=>As a Python, we are communicating with Oracle and MySQL databases.\
=================================================\
		Communication between Python and DataBase Softwares\
		=================================================\
=>In Python Programming, to communicate with any database softwares, First we must install corresponding database module of python.\
=>Suppose, If python programmer wants communicate with Oracle, we must instaall   a pre-defiend module cx_Oracle by using pip tool.(C:\\Users\\nareshit\\AppData\\Local\\Programs\\Python\\Python39\\Scripts)\
\
=>Syntax for installing any module\
		pip  install  module name\
\
=>Example:  install cx_Oracle\
\
				pip install  cx_Oracle\
=>Ensure that cx_Oracle module must be installed.\
\
==============================================================\
Steps for python program to communicate with Oracle Data base:\
-------------------------------------------------------------------------------------------------------\
Step1:-   import  cx_Oracle  module\
---------------------------------------------------------------------------------------------------------\
step-2:- Python Program must obtain Connection from Oracle Database. To get                 this connection, we use connect() , which is present in cx_Oracle			module.\
\
	Syntax:-        varname= cx_Oracle.connect("connection url")\
\
=>varname is one object of <cx.Oracle.Connection> \
=>connection url---->"username/password@DNS/serviceid"\
							(OR)\
=>connection url---->"username/password@IPaddress/serviceid"\
		\
Explanation:-    user name----->user name of Oracle Data Base\
-------------------                       Example: scott\
			   password----->Password of Oracle Data Base		\
						Example:   tiger\
			DNS(Domain naming Service):\
			----------------------------------------------\
=>DNS is nothing but Name of machine where Data base software is installed.\
			=>default DNS of every computer is "localhost"\
=>IPAddress is nothing but The four parts Numerical Address of the machine , where the Data base software is available.\
=>The default IPaddress of every computer is 127.0.0.1 (loop back address)\
\
=>serviceid is nothing alias name of Oracle Database. To get the service id of Oracle Data base , we the following Query. \
\
	SQL> select * from global_name;\
				GLOBAL_NAME\
			--------------------------------------------------------------------------------\
					ORCL\
			-------------------------------------------------------------------\
Here service of Oracle is orcl\
Example:- Get the connection Oracle DB from Python Program\
	\
			import   cx_Oracle\
			con=cx_Oracle.connect("scott/tiger@127.0.0.1/orcl")\
			print("Python obtains connection from Oracle DB")\
------------------------------------------------------------------------------------------------------------------\
3) Create a an object Cursor. To get the ncursor object, we use cursor() which is present in connection object.\
Syntax:-\
			varname=connectionobj.cursor()\
=>here varname is an object of <cx_Oracle.Cursor>\
=>The purpose cursor object is that to takes Query from Python program, send to data base software , executes at database and brings result back to Python Program.\
=>An object of cursor acts as bi-dirctional communication object between Python program and database software.\
-----------------------------------------------------------------------------------------------------------------------\
4) Design the query and execute . To execute the query from Python program , we use a pre-defined function called execute(), which is present in cursor object\
		cursorobj.execute(query)\
=>here query represents either DDL, DML and DRL \
--------------------------------------------------------------------------------------------------------------------\
======================================\
			Types of query Database softwares\
		======================================\
=>A query  is a statement and it is treated as a Request / Question to data base from Python Program\
=>We have the following queries.\
		1) DDL Queries (Data Definition Language):\
		     --------------------------------------------------------------\
		          a) create    b) alter   c) drop\
\
		2) DML Queries (Data Manipulation Language):\
		   ---------------------------------------------------------------------\
			   a) insert    b) delete   c) update\
\
		3) DRL Queries ( Data Retrieval Language):\
		   ---------------------------------------------------------------------\
		   a) select  \
------------------------------------------------------------------------------------------------------------------\
1) DDL Queries (Data Definition Language):\
    --------------------------------------------------------------\
	a) create    b) alter   c) drop\
\
The DDL Quesries is that to define the structure of table on Oracle.\
----------------\
a) create:\
---------------\
=>It is used for creating  a table \
\
Syntax:\
-------------\
SQL> create table <table-name>(colname1 datatype1, colname2  datatype2.....colname-n  datatype-n);\
\
Examples:   create a student table with stno, sname and marks\
----------------\
SQL>create table student (stno number(3), name varchar2(15), marks number(5,2))\
-------------------------------------------------------------------X------------------------------------------\
b) alter  :\
------------------\
=>It is used for adding new columns to table\
=>It is also used for modifying  column size of table\
\
Syntax1:    alter   table  <table-name> add (new-column-name1  data type1...)\
\
Syntax2:    alter   table  <table-name> modify (existing-column-name1  data												type1...)\
\
Examples:-  add new column  name  "exp" to the Faculty table \
\
	  alter   table  Faculty  add ( exp   number(2) )\
\
Examples:-  modify   column  size of fname as 20 in  Faculty table \
\
	  alter   table  Faculty  modify ( fname varchar2(20))\
\
----------------------------------------------------------------------------------------------------------\
c) drop:\
--------------\
=>It is used for removing the table permanently from Database\
Syntax:-     drop   table  <table-name>\
\
Examples:      drop table   name   faculty\
-----------------\
			SQL>   drop  table   faculty\
--------------------------------------------------------------------------------------------------\
2) DML Queries (Data Manipulation Language):\
 ---------------------------------------------------------------------\
=>These Queries are used for Perfoming operations on records.\
=>When we do any DML Operation on the records of table then we must commit()  the database for permanent changes.\
=>If we don't permanent changes then we must do rollback()\
=>commit() and rollback() are present in connection object.\
=>We have 3 types of DML statements. They are\
		a) insert\
		b) delete\
		c) update()\
---------------------------------------------------------------------------------------------------------\
a) insert():\
---------------\
=>It is used for inserting a record into table.\
=>Syntax:\
SQL> insert into <table-name> values(val1, val2...val-n)\
\
Example:- SQL>insert into student values(30,'Rushi',45.67)\
-----------------------------------------------------------------------------------  \
b) delete:\
---------------\
=>It is used for deleting a record(s) from the table\
=>Syntax:-\
------------------     delete from <table-name>;\
\
\
=>Syntax:-    delete from   <table-name>   where condition;\
------------------   \
\
Example:  delete all the records from student table\
			SQL>delete from student;\
\
Example:  delete all the records from student table where marks less than 50\
			SQL>delete from student  where marks<50;\
-----------------------------------------------------------------------------------------------------------------\
3)update():\
------------------\
=>It is used for updating  a record(s) in a table\
=>Syntax-1:- \
update   <table>   set  colname1=val1,colname2=val2...colname-n=val-n\
											where  condition;\
--------------\
Syntax-2:\
---------------\
update   <table>   set  colname1=val1,colname2=val2...colname-n=val-n;\
==================================================\
		 Importance of Database softwares in data Persistency.\
		==================================================\
=>The main purpose DataBase Softwares is that "To achieve the Data Persistency"\
=>Data Persistency is nothing but storing the data Permanently.\
=>In Database , the data always stored in the form of Tables.\
=>A table is a collection of Rows and Columns.\
=>Rows are called Records  & Columns are called Fields \
--------------------------------------------------------------\
=>Advantages of database softwares:\
----------------------------------------------------------------\
1) All types of RDBMS  products provides high security Database\
2) Querying the data from database software is easy.\
3) Database software are posssing OS Independncy\
4) Database softwares stores large volume of data.\
========================================================\
=>As a Python, we are communicating with Oracle and MySQL databases.\
=================================================\
		Communication between Python and MySql DataBase Softwares\
		=================================================\
=>In Python Programming, to communicate with any database softwares, First we must install corresponding database module of python.\
=>Suppose, If python programmer wants communicate with MYSQL, we must instaall   a pre-defiend module mysql-connector by using pip tool.(C:\\Users\\nareshit\\AppData\\Local\\Programs\\Python\\Python39\\Scripts)\
\
=>Syntax for installing any module\
		\
		pip  install  module name\
\
=>Example:  install mysql-connector\
\
				pip install  mysql-connector\
\
=>Ensure that mysql-connector module must be installed.\
\
==============================================================\
Steps for python program to communicate with MYSQL Data base:\
-------------------------------------------------------------------------------------------------------\
Step1:-   import  mysql.connector  module\
---------------------------------------------------------------------------------------------------------\
step-2:- Python Program must obtain Connection fromMySQL Database. To get                 this connection, we use connect() , which is present in mysql.connector module.\
\
Syntax:-  varname=mysql.connector .connect(host="DNS / IP address ",\
                                                                                      user="User name of MYSQL",\
										      passwd="password of MYSQL",\
\
		\
Example:- Get the connection MYSQL DB from Python Program\
	\
			import   mysql.connector\
			con=mysql.connector.connect(host="localhost",\
										  user="root",\
										  passwd="root")\
			print("Python obtains connection from MySQL DB")\
------------------------------------------------------------------------------------------------------------------\
3) Create a an object Cursor. To get the cursor object, we use cursor() which is present in connection object.\
Syntax:-\
			varname=connectionobj.cursor()\
\
=>here varname is an object of <mysql.connector.Cursor>\
=>The purpose cursor object is that to takes Query from Python program, send to data base software , executes at database and brings result back to Python Program.\
=>An object of cursor acts as bi-dirctional communication object between Python program and database software.\
-----------------------------------------------------------------------------------------------------------------------\
4) Design the query and execute . To execute the query from Python program , we use a pre-defined function called execute(), which is present in cursor object\
		cursorobj.execute(query)\
=>here query represents either DDL, DML and DRL \
--------------------------------------------------------------------------------------------------------------------\
5) Process the result of the query which is present ion cur object\
==============================X=================================\
============================================\
		Introduction to regular Expression\
	============================================\
\
=>Regular Expression is one of the programming language Independent concept.\
=>The applications of regular Expressions are \
		a) Development of Operating Systems\
		b) Development of language Compilers and Interpreters\
		c) Development of Universal Protocols(Http,ftp,smtp,nmpt..etc)\
		d) development of Electronic Circuits....etc\
\
=>To deal with regular expressions, we use a pre-defined module called "re".\
Definition of Regular Expression:\
---------------------------------------------------\
Regular Expression is one of the Search Pattern (comibination of alphabets, digits, special symbols) and it used to search / matching / finding  in Given data for obtaining desired result.\
==================================================================================================\
		Programmer-Defined Character Classes in Python\
	======================================================\
=>Programmer-Defined Character Classes are developed by Python programmers ,which are used in preparing search patterns  and they are used for searching in  given data obtains desired result.\
\
Syntax:-       [ search pattern ]\
\
1) [abc]----->Searching for either 'a' or 'b'  or 'c' only\
\
2) [^abc]----->Searching for all    except   'a' or 'b'  or 'c' only\
\
3)[a-z]-------> Searching for all small / lower case  alphabets only \
\
4) [^a-z]-------> Searching for all  except small / lower case  alphabets \
\
5) [A-Z]-----> Searching for all Upper  case  alphabets only \
\
6) [^A-Z]-----> Searching for all  except Upper  case  alphabets\
\
7) [A-Za-z]----> Searching for all Upper and Lower  case  alphabets only \
\
8) [^A-Za-z]----> Searching for all  exept Upper and Lower  case  alphabets \
\
9) [0-9]----->Search for all digits only\
\
10) [^0-9]----->Search for all  except digits \
\
11)[A-Za-z0-9]--->Searching for all   Upper and Lower  case  alphabets and digits\
\
12) [^A-Za-z0-9]--->Searching for all special symbols (except alphabets and					digits)\
=====================================================\
		Pre-Defined Character Classes in Python\
	======================================================\
=>Pre-Defined Character Classes are developed by Python Language developpers and they are available in Python Software ,which are used in preparing search patterns  and they are used for searching in  given data obtains desired result.\
\
Syntax:-       "\\Pre-Defined Character Class"\
\
=>The following are the essential Pre-Defined Character Classes in Python. \
\
1) "\\s"---->Searching for space character only \
\
2) "\\S"--->Searching for all  except space character\
\
3) "\\w"---->Searching any word Character    (OR) [A-Za-z0-9]\
\
4) "\\W"---->Searching for all special symbols (except word								character--[^A-Za-z0-9]\
\
5)  "\\d"---->Searching for any digit (  [0-9] )\
\
6) "\\D"----->Searching for all except digit (  [^0-9])\
-------------------------------------------------------------------------------------\
Note:- \
--------------\
a) [0-9][0-9][0-9[0-9]  (or)    \\dddd       or   \\d\{4\}----search for 4 digit number\
b) \\d\{2,4\}----searching for min 2 digit numbers and max 4 digit number\
c) \\dd.\\dd----search for 3 digit integer part and 2 digit decimal part.\
-----------------------------------------------------------------------------------------------------------\
=========================================\
			Quantifiers in Regular Expressions\
		=========================================\
=>Quantifiers in Regular Expressions are used for searching number of occurences of the specified search pattern in the given data and obtains desired result.\
\
\
1)  "k"------->It search for only one 'k' at a time\
2) "k+"------>It search for either one 'k' more 'k' s\
3) "k*"------>It search for either zero 'k'  or one 'k'  and  more 'k' s\
========================================== \
				Functions in re module\
		==========================================\
=>The 're' module contains the follwing essential Functions.\
----------------------------------------------------------------------------------------------\
1) finditer():\
-------------------------------------------------------------------------------------------		\
Syntax:-       varname=re.finditer("search-pattern","Given data")\
=>here varname is an object of type <class,'Callable_Itetaror'>\
\
 =>This function is used for searching the search pattern in given data iteratively and it returns  table of entries which contains start index , end index and matched value based on the search pattern.\
-----------------------------------------------------------------------------------------------\
2) group():\
----------------------------------------------------------------------------------------------\
=>This function is used obtaining matched value by the findIter()\
Syntax:-     varname=matchtabobj.group()\
----------------------------------------------------------------------------------------------\
3) start():\
----------------------------------------------------------------------------------------------\
=>This function is used obtaining obtaining starting index of matched value\
Syntax:     varname=matchobj.start()\
----------------------------------------------------------------------------------------------\
4) end():\
----------------------------------------------------------------------------------------------\
=>This function is used obtaining  end index+1 of matched value\
Syntax:     varname=matchobj.end()\
\
----------------------------------------------------------------------------------------------\
5) search():\
----------------------------------------------------------------------------------------------\
Syntax:-      varname=re.search("search-pattern","Given data")\
=>here varname is an object of <class,'match'>\
\
=>This function is used for searching the search pattern in  given data for first occuence / match only.\
=>if the search pattern found in  given data then it returns an object of match which contains matched value and start and end index values and it indicates  search is successful.\
=>if the search pattern not found in  given data then it returns None and it indicates search is un-successful\
-------------------------------------------------------------------------------------------------------------------------\
6) findall():\
----------------------------------------------------------------------------------------------\
Syntax:-      varname=re.findall("search-pattern","Given data")\
=>here varname is an object of <class,'list'>\
\
=>This function is used for searching the search pattern in  entire given data and find all  occurences / matches  and it returns all the matched values in the form an object <class,'list'>\
-------------------------------------------------------------------------------------------------------------------------\
==========================================\
						Numpy\
		==========================================\
Introduction to Numpy:\
-------------------------------------\
=>Numpy stands for Numerical Python.\
=>Numpy is one of the pre-defined third party module / Library.\
=>To use numpy as a part of our python program, we must install  numpy      \
     module explicitly by using a tool called pip and it present in  (C:\\Users\\nareshit\\AppData\\Local\\Programs\\Python\\Python39\\Scripts)\
=>Syntax for installing any module:\
\
			pip    install    module-name\
		    \
=>Example: Install  numpy module\
			pip   install   numpy\
		\
=>To use numpy as part of our program, we must import numpy module.\
=>A Numpy module is a collection of Variables, Functions and Classes.\
===============================================================\
History of Numpy:\
------------------------------\
=>Numpy was developed by studying existing module called "Numeric Library"(origin for development of numpy module)\
=>The Numeric Library was developed by JIM HUNGUNIN\
=>The Numeric Library was not able to solve  complex maths calculations.\
=>Numpy module developed by TRAVIS OLIPHANT\
=>Numpy Module developed in the year 2005\
=>Numpy Module developed in C and PYTHON languages.\
==============================================================\
===================================================\
		Python Traditional List  VS  Numpy Module\
	===================================================\
Similarities of python  Traditional List  VS  Numpy Module:\
-----------------------------------------------------------------------------------------\
=>An object of list used to store multiple values of same type or different type and both types (unique +duplicates) in single object.\
=>In Numpy Programming, the data is organized in the object of "ndarray", which is one of the prte-defined class in numpy module.\
=>The objects of numpy and list are mutable (changes can takes place)\
-------------------------------------------------------------------------------------------------------------------\
Differences between Python Traditional List  and  Numpy Module:\
-------------------------------------------------------------------------------------------------------------------\
=>An object of list contains both homogeneous  and hetrogeneous values where as an object of ndarray of numpy can store only similar type of values(even we store different values, internally they are treated as similar type).\
=>On the object of list, we can't perform Vetor Operations. where as on the object of ndarray, we can perform Vector based operations.\
=>In large sampling of data, List based applications takes more memory space where ndarray object takes less memory space.\
=>List based applications are not effiecient where numpy based applications are efficient. \
=>List object cant perform complex mathematical operations where an object ndarray can peffrom complex mathematical operations.\
=========================================\
			Numpy--Arithmetic Operations\
	=========================================\
=>To perform Arithmetic Operations on the objects of ndarray in numpy programming, we use the following functions.\
		a) add()\
		b) subtract()\
		c) multiply()\
		d) divide()\
\
a) add():\
--------------\
Syntax:-    varname=numpy.add(ndarrayobj1, ndarrayobj2)\
=>This function is used for adding elements of ndarrayobj1, ndarrayobj2 and result can be displayed\
Examples:\
-----------------\
>>> l1=[[10,20],[30,40]]\
>>> l2=[[1,2],[3,4]]\
>>> a=np.array(l1)\
>>> b=np.array(l2)\
>>> a\
array([[10, 20],\
       [30, 40]])\
>>> b\
array([[1, 2],\
       [3, 4]])\
>>> c=np.add(a,b)\
>>> c\
array([[11, 22],\
       [33, 44]])\
       >>> x=np.array([[1,2,3],[4,5,6]])\
>>> x\
array([[1, 2, 3],\
       [4, 5, 6]])\
>>> y=np.array([4,4,4])\
>>> y\
array([4, 4, 4])\
>>> z=x+y\
>>> z\
array([[ 5,  6,  7],\
       [ 8,  9, 10]])\
>>> z=np.add(x,y)\
>>> z\
array([[ 5,  6,  7],\
       [ 8,  9, 10]])\
>>> x\
array([[1, 2, 3],\
       [4, 5, 6]])\
>>> k=np.array([[2,3],[4,5]])\
>>> k\
array([[2, 3],\
       [4, 5]])\
>>> kvr=np.add(x,k)----ValueError: operands could not be broadcast together						with shapes (2,3) (2,2)\
---------------------\
>>> l1=[[10,20],[30,40]]\
>>> l2=[[1,2],[3,4]]\
>>> a=np.array(l1)\
>>> b=np.array(l2)\
>>> a\
array([[10, 20],\
       [30, 40]])\
>>> b\
array([[1, 2],\
       [3, 4]])\
>>> c=a+b  # we used operator + instead of add()\
>>> c\
array([[11, 22],\
       [33, 44]])\
=================================\
b) subtract()\
Syntax:-    varname=numpy.subtract(ndarrayobj1, ndarrayobj2)\
=>This function is used for subtracting elements of ndarrayobj1, ndarrayobj2 and result can be displayed\
\
Examples:\
------------------\
>>> l1=[[10,20],[30,40]]\
>>> l2=[[1,2],[3,4]]\
>>> a=np.array(l1)\
>>> b=np.array(l2)\
>>> a\
array([[10, 20],\
       [30, 40]])\
>>> b\
array([[1, 2],\
       [3, 4]])\
>>> c=np.subtract(a,b)\
>>> c\
array([[ 9, 18],\
       [27, 36]])\
-----------------------------------\
>>> d=a-b\
>>> d\
array([[ 9, 18],\
       [27, 36]])\
===================================\
c) multiply():\
-----------------------\
Syntax:-    varname=numpy.multiply(ndarrayobj1, ndarrayobj2)\
=>This function is used for performing element-wise multiplication of ndarrayobj1, ndarrayobj2 and result can be displayed\
Note:- To perform Matrix Multiplication we dot()\
            Syntax:     varname=numpy.dot(ndarrayobj1, ndarrayobj2)\
\
Examples:\
>>> l1=[[1,2],[3,4]]\
>>> l2=[[5,6],[4,3]]\
>>> a=np.array(l1)\
>>> b=np.array(l2)\
>>> a\
array([[1, 2],\
       [3, 4]])\
>>> b\
array([[5, 6],\
       [4, 3]])\
>>> c=np.multiply(a,b)\
>>> c\
array([[ 5, 12],\
       [12, 12]])\
>>> e=a*b\
>>> e\
array([[ 5, 12],\
       [12, 12]])\
------------------------------------------\
>>> d=np.dot(a,b)\
>>> d\
array([[13, 12],\
       [31, 30]])\
-----------------------------------------------------------------------------\
d) divide()\
Syntax:-    varname=numpy.divide(ndarray1,ndarry2)\
=>This function is used for performing element-wise division of ndarrayobj1, ndarrayobj2 and result can be displayed\
\
>>> l1=[[10,20],[30,40]]\
>>> l2=[[1,2],[3,4]]\
>>> a=np.array(l1)\
>>> b=np.array(l2)\
>>> a\
array([[10, 20],\
       [30, 40]])\
>>> b\
array([[1, 2],\
       [3, 4]])\
>>> c=np.divide(a,b)\
>>> c\
array([[10., 10.],\
       [10., 10.]])\
>>> d=a/b\
>>> d\
array([[10., 10.],\
       [10., 10.]])\
---------------------------------------------\
>>> e=a%b\
>>> e\
array([[0, 0],\
            [0, 0]],     dtype=int32)\
>>> f=a**b\
>>> f\
array([[     10,     400],\
       [  27000, 2560000]],    dtype=int32)\
==================================X==========================\
=========================================\
				Numpy--Statistical Operations.\
			=========================================\
=>The most essential Statistical Operations can be performed by using the following Functions. \
			a) amax()\
			b) amin()\
			c) mean()\
			d) median()\
			e) var()\
			f) std()\
Note:-   mode() is not present in numpy module. But mode(), multimode is present in Statistics module.\
--------------------------------------------------------------------------------------------------------------\
a) amax():\
-----------------\
=>This function is used for finding maximum element from any nd array object.\
Syntax:-     numpy.amax(ndarrayobj, axis )\
\
=>Here when we specify axis=0 then it will be considered as Columns \
=>Here when we specify axis=1 then it will be considered as Rows\
Examples:\
-----------------\
>>> l1=[[10,20,30],[40,90,60],[12,15,18],[45,13,89]]\
>>> a=np.array(l1)\
>>> a\
array([[10, 20, 30],\
       [40, 90, 60],\
       [12, 15, 18],\
       [45, 13, 89]])\
>>> np.amax(a)\
90\
>>> np.amax(a,axis=0)\
array([45, 90, 89])\
>>> np.amax(a,axis=1)\
array([30, 90, 18, 89])\
-----------------------------------------------------------------------------------\
==========================X==================================\
================================\
					ndarray\
		================================\
=>'ndarray' is one of the pre-defined class present in numpy module\
=>An object of 'ndarray' allows  us to store the data in the form of single (or) one dimensional  and  multi dimesional  in the entire numpy module.\
=>To create an object of ndarray, we have 7 approaches.\
		1) array()\
		2) arange()      \
		3) zeros()\
		4) ones()\
		5) full()\
		6) eye()\
		7) identity()\
=>All the above functions are present in numpy module.\
--------------------------------------------------------------------------------\
1) array():\
   ----------------\
=>It is used for connverting an iterable object into an object of ndarray.\
=>Syntax:-\
  ---------------\
		varname=numpy.array(Iterable-object, dtype)\
\
=>varname is represents an object of ndarray.\
=>numpy is a module name\
=>array() is a pre-defined function present in numpy module.\
=>Iterable-object can be any Collection Types (list, tuple,set,frozenset,dict..)\
------------------\
Examples:\
-----------------\
>>> l1=[10,20,30,40]\
>>> print(l1,type(l1))----------[10, 20, 30, 40] <class 'list'>\
>>> a=np.array(l1)\
>>> print(a, type(a))---------[10 20 30 40] <class 'numpy.ndarray'>\
>>> a-------array([10, 20, 30, 40])\
>>> print(a.ndim)----1\
>>> print(a.shape)----(4,)\
-------------------------------------------\
>>> l1=[10,20,30,40]\
>>> a=np.array(l1,dtype='float')\
>>> print(a,type(a))----[10. 20. 30. 40.] <class 'numpy.ndarray'>\
>>> a--------------array([10., 20., 30., 40.])\
>>> l1=[12.3,34.5,56.78]\
>>> a=np.array(l1,dtype='float')\
>>> print(a, type(a))--------[12.3  34.5  56.78] <class 'numpy.ndarray'>\
>>> a------------array([12.3 , 34.5 , 56.78])\
>>> print(a.ndim)-------1\
>>> print(a.shape)-------(3,)\
>>> print(a.dtype)------float64\
-----------------\
>>> l1=[10,10.25,24,23.45,30]\
>>> a=np.array(l1)\
>>> print(a)------[10.   10.25 24.   23.45 30.  ]\
>>> a---------array([10.  , 10.25, 24.  , 23.45, 30.  ])\
>>> print(a.dtype)-------float64\
>>> l2=[10,20,30]\
>>> a=np.array(l2)\
>>> a---------array([10, 20, 30])\
>>> print(a.dtype)--------int32\
---------------------------------\
>>> l1=["RS","RT","JG"]\
>>> a=np.array(l1)\
>>> a\
array(['RS', 'RT', 'JG'], dtype='<U2')\
>>> print(a.dtype)----<U2\
>>> l1=["Rossum","RT","JG"]\
>>> a=np.array(l1)\
>>> a\
array(['Rossum', 'RT', 'JG'], dtype='<U6')\
----------------------------------\
>>> l1=[10,"KVR",23.45,True,2+3j]\
>>> a=np.array(l1)\
>>> print(a)----['10' 'KVR' '23.45' 'True' '(2+3j)']\
>>> print(a.ndim)------1\
>>> print(a.shape)----(5,)\
>>> print(a.dtype)---- <U64\
-------------------------------------------------------------------\
>>> l1=[ [10,20], [30,40] ]\
>>> a=np.array(l1)\
>>> a------->array([[10, 20],\
			       [30, 40]])\
>>> print(a.ndim)\
2\
>>> print(a.shape)\
(2, 2)\
>>> print(a.dtype)\
int32\
-------------------------------------\
>>> l1=[[10,20,30], [40,50,60],[70,80,90]]\
>>> a=np.array(l1)\
>>> a\
array([[10, 20, 30],\
       [40, 50, 60],\
       [70, 80, 90]])\
>>> print(a.ndim)\
2\
>>> print(a.shape)\
(3, 3)\
>>> print(a.dtype)\
int32\
------------------------------------------------------\
>>> l1=[[10,20,30], [40,50,60]]\
>>> a=np.array(l1)\
>>> a\
array([[10, 20, 30],\
       [40, 50, 60]])\
>>> print(a.ndim)\
2\
>>> print(a.shape)\
(2, 3)\
>>> b=a.reshape(3,2)\
>>> b\
array([[10, 20],\
       [30, 40],\
       [50, 60]])\
>>> print(b.ndim)\
2\
>>> print(b.shape)\
(3, 2)\
>>> l1=[[[10,20],[30,40]],[[50,60],[70,80]] ]\
>>> a=np.array(l1)\
>>> a\
array([[[10, 20],\
             [30, 40]],\
\
            [[50, 60],\
             [70, 80]]])\
>>> print(a.ndim)\
3\
>>> print(a.shape)\
(2, 2, 2)\
>>> print(a[0])\
			[[10 20]\
			 [30 40]]\
>>> print(a[1])\
			[[50 60]\
			 [70 80]]\
-------------------------------------------------------------------\
2) arange():\
--------------------\
=>Syntax:-    ndarrayobjname=numpy.arange(begin,end,step, dtype)\
\
=>This is function is used for generating 1-Dimensional Array of Values but we can't create 2-Dimensional Array.\
=>To convert 1-Dimensional Array of Values of ndarray object into 2-Dimensional Array, we use reshape().\
---------------------\
=>Examples:\
---------------------\
>>> a=np.arange(9)\
>>> print(a)----------[0 1 2 3 4 5 6 7 8]\
>>> a-------array([0, 1, 2, 3, 4, 5, 6, 7, 8])\
>>> print(type(a))----<class 'numpy.ndarray'>\
>>> print(a.ndim)\
1\
>>> print(a.shape)\
(9,)\
>>> print(a.dtype)\
int32\
>>> b=a.reshape(3,3)\
>>> print(b)\
[[0 1 2]\
 [3 4 5]\
 [6 7 8]]\
>>> b\
array([[0, 1, 2],\
       [3, 4, 5],\
       [6, 7, 8]])\
>>> print(b.ndim,b.shape,b.dtype)----2  (3, 3)   int32\
---------------------------------------\
>>> a=np.arange(10,22)\
>>> print(a)\
[10 11 12 13 14 15 16 17 18 19 20 21]\
>>> a\
array([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\
>>> print(a.ndim,a.shape)\
1 (12,)\
>>> b=a.reshape(4,3)\
>>> b\
array([[10, 11, 12],\
       [13, 14, 15],\
       [16, 17, 18],\
       [19, 20, 21]])\
>>> c=a.reshape(3,4)\
>>> c\
array([[10, 11, 12, 13],\
       [14, 15, 16, 17],\
       [18, 19, 20, 21]])\
>>> print(b.ndim,b.shape)\
2 (4, 3)\
>>> print(c.ndim,c.shape)\
2 (3, 4)\
>>> d=a.reshape(2,6)\
>>> d\
array([[10, 11, 12, 13, 14, 15],\
       [16, 17, 18, 19, 20, 21]])\
>>> e=a.reshape(6,2)\
>>> e\
array([[10, 11],\
       [12, 13],\
       [14, 15],\
       [16, 17],\
       [18, 19],\
       [20, 21]])\
>>> f=a.reshape(12,1)\
>>> f\
array([[10],\
       [11],\
       [12],\
       [13],\
       [14],\
       [15],\
       [16],\
       [17],\
       [18],\
       [19],\
       [20],\
       [21]])\
--------------------------------------------------------------------\
) zeros():\
-----------------\
=>This function is used for building zero matrix (or) creating ndarray objct with zeros by specfying its shape.\
---------------\
Syntax:-\
---------------\
	ndarrayobj=numpy.zeros(shape,dtype)\
Here shape can be either 1-dimensional (or) 2-dimensional\
here specfying dtype is optional.\
--------------------\
Examples:\
--------------------\
>>> a=np.zeros(6)\
>>> a\
array([0., 0., 0., 0., 0., 0.])\
>>> b=a.reshape(3,2)\
>>> b\
array([[0., 0.],\
       [0., 0.],\
       [0., 0.]])\
>>> c=b.reshape(2,3)\
>>> c\
array([[0., 0., 0.],\
       [0., 0., 0.]])\
>>> a=np.zeros(12,dtype=int)\
>>> a\
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\
>>> b=a.reshape(3,4)\
>>> c=a.reshape(4,3)\
>>> print(b)\
[[0 0 0 0]\
 [0 0 0 0]\
 [0 0 0 0]]\
>>> print(c)\
[[0 0 0]\
 [0 0 0]\
 [0 0 0]\
 [0 0 0]]\
>>> print(type(a),type(b),type(c))\
<class 'numpy.ndarray'> <class 'numpy.ndarray'> <class 'numpy.ndarray'>\
>>> a=np.zeros((3,3) )\
>>> a=np.zeros(shape=(3,3),dtype=int )\
>>> a\
array([[0, 0, 0],\
       [0, 0, 0],\
       [0, 0, 0]])\
>>> a=np.zeros(shape=(2,3),dtype=int )\
>>> a\
array([[0, 0, 0],\
       [0, 0, 0]])\
>>> a=np.zeros(shape=(4,2),dtype=int )\
>>> a\
array([[0, 0],\
       [0, 0],\
       [0, 0],\
       [0, 0]])\
-------------------------------------------------------------------------------------------------\
4)ones()\
--------------\
=>This function is used building a matrix with 1's (or) creating an object ndarray by initlizing with all  1's.\
\
=>Syntax:-         ndarrayobj=numpy.ones(shape,dtype)\
\
Examples:\
-----------------\
>>> a=np.ones(6)\
>>> print(a,type(a))\
[1. 1. 1. 1. 1. 1.] <class 'numpy.ndarray'>\
>>> print(a.ndim,a.shape,a.dtype)\
1 (6,) float64\
>>> print(a.reshape(3,2))\
[[1. 1.]\
 [1. 1.]\
 [1. 1.]]\
>>> print(a.reshape(2,3))\
[[1. 1. 1.]\
 [1. 1. 1.]]\
>>> a=np.ones(8,dtype=int)\
>>> print(a,type(a))\
[1 1 1 1 1 1 1 1] <class 'numpy.ndarray'>\
>>> print(a.reshape(4,2))\
[[1 1]\
 [1 1]\
 [1 1]\
 [1 1]]\
>>> a=np.ones( (3,4),dtype=int)\
>>> a\
array([[1, 1, 1, 1],\
       [1, 1, 1, 1],\
       [1, 1, 1, 1]])\
>>> print(a.reshape(4,3))\
[[1 1 1]\
 [1 1 1]\
 [1 1 1]\
 [1 1 1]]\
>>> a=np.ones( (2,3,4),dtype=int)\
>>> a\
array([[[1, 1, 1, 1],\
        [1, 1, 1, 1],\
        [1, 1, 1, 1]],\
\
       [[1, 1, 1, 1],\
        [1, 1, 1, 1],\
        [1, 1, 1, 1]]])\
>>> a=np.ones( (3,3,4),dtype=int)\
>>> a\
array([[[1, 1, 1, 1],\
        [1, 1, 1, 1],\
        [1, 1, 1, 1]],\
\
       [[1, 1, 1, 1],\
        [1, 1, 1, 1],\
        [1, 1, 1, 1]],\
\
       [[1, 1, 1, 1],\
        [1, 1, 1, 1],\
        [1, 1, 1, 1]]])\
>>> print(a.ndim)\
3\
>>> print(a.shape)\
(3, 3, 4)\
-----------------------------------------------------------------------------------\
5) full():\
------------\
=>Syntax:-    ndarrayobj=numpy.full(shape, fill_value, dtype)\
\
=>This function is used for generating a matrix by specifying  user choice value (or) building an object of ndarray with our value.\
=>"fill_value" is programmer-defined value\
--------------------\
Examples:\
--------------------\
>>> a=np.full(3,4,dtype=int)\
>>> print(a, type(a))\
[4 4 4] <class 'numpy.ndarray'>\
>>> a=np.full(12,6,dtype=int)\
>>> print(a, type(a))\
[6 6 6 6 6 6 6 6 6 6 6 6] <class 'numpy.ndarray'>\
>>> print(a.reshape(4,3))\
[[6 6 6]\
 [6 6 6]\
 [6 6 6]\
 [6 6 6]]\
>>> a.reshape(3,4)\
array([[6, 6, 6, 6],\
       [6, 6, 6, 6],\
       [6, 6, 6, 6]])\
>>> a=np.full((4,5),8, dtype=int)\
>>> a\
array([[8, 8, 8, 8, 8],\
       [8, 8, 8, 8, 8],\
       [8, 8, 8, 8, 8],\
       [8, 8, 8, 8, 8]])\
>>> a=np.full((3,2,2),8, dtype=int)\
>>> a\
array([[[8, 8],\
        [8, 8]],\
\
       [[8, 8],\
        [8, 8]],\
\
       [[8, 8],\
        [8, 8]]])\
--------------------------------------------------------------------------------------------------\
6) eye()\
-----------------\
Syntax:-    ndarrayobj=numpy.eye(N,M=None,K=0,dtype)\
=>Here N represents No. of Rows\
=>Here M represents No. of Columns. If we don't specify the M value then N \
value will be considered as M value.\
=>If we take M value explicitly then It will form Possible Identity matrix (NXM)and remaining elements  filled with zeros.\
=>Here K represents Principal Diagnal\
	( if K=0 then it is Pricipal Diagnal and it is default)\
	( if K=-1,-2...then it is considered as bellow Principal Diagnal)\
	(if K=1,2  ...then it is considered as  above Principal Diagnal)\
Examples:\
------------------\
>>> np.eye(3)\
array([[1., 0., 0.],\
       [0., 1., 0.],\
       [0., 0., 1.]])\
>>> np.eye(3,dtype=int)\
array([[1, 0, 0],\
       [0, 1, 0],\
       [0, 0, 1]])\
\
>>> np.eye(3,4,dtype=int)\
array([[1, 0, 0, 0],\
            [0, 1, 0, 0],\
            [0, 0, 1, 0]])\
\
>>> np.eye(4,3,dtype=int)\
array([[1, 0, 0],\
	      [0, 1, 0],\
	      [0, 0, 1],\
	      [0, 0, 0]])\
>>> np.eye(5,6,dtype=int)\
array([[1, 0, 0, 0, 0, 0],\
       [0, 1, 0, 0, 0, 0],\
       [0, 0, 1, 0, 0, 0],\
       [0, 0, 0, 1, 0, 0],\
       [0, 0, 0, 0, 1, 0]])\
>>> np.eye(5,6,k=-1,dtype=int)\
array([[0, 0, 0, 0, 0, 0],\
       [1, 0, 0, 0, 0, 0],\
       [0, 1, 0, 0, 0, 0],\
       [0, 0, 1, 0, 0, 0],\
       [0, 0, 0, 1, 0, 0]])\
>>> np.eye(5,6,k=-2,dtype=int)\
array([[0, 0, 0, 0, 0, 0],\
       [0, 0, 0, 0, 0, 0],\
       [1, 0, 0, 0, 0, 0],\
       [0, 1, 0, 0, 0, 0],\
       [0, 0, 1, 0, 0, 0]])\
>>> np.eye(5,6,k=-3,dtype=int)\
array([[0, 0, 0, 0, 0, 0],\
       [0, 0, 0, 0, 0, 0],\
       [0, 0, 0, 0, 0, 0],\
       [1, 0, 0, 0, 0, 0],\
       [0, 1, 0, 0, 0, 0]])\
>>> np.eye(5,6,k=1,dtype=int)\
array([[0, 1, 0, 0, 0, 0],\
       [0, 0, 1, 0, 0, 0],\
       [0, 0, 0, 1, 0, 0],\
       [0, 0, 0, 0, 1, 0],\
       [0, 0, 0, 0, 0, 1]])\
>>> np.eye(5,6,k=2,dtype=int)\
array([[0, 0, 1, 0, 0, 0],\
       [0, 0, 0, 1, 0, 0],\
       [0, 0, 0, 0, 1, 0],\
       [0, 0, 0, 0, 0, 1],\
       [0, 0, 0, 0, 0, 0]])\
>>> np.eye(5,6,k=3,dtype=int)\
array([[0, 0, 0, 1, 0, 0],\
       [0, 0, 0, 0, 1, 0],\
       [0, 0, 0, 0, 0, 1],\
       [0, 0, 0, 0, 0, 0],\
       [0, 0, 0, 0, 0, 0]])\
>>> np.eye(5,6,k=4,dtype=int)\
array([[0, 0, 0, 0, 1, 0],\
       [0, 0, 0, 0, 0, 1],\
       [0, 0, 0, 0, 0, 0],\
       [0, 0, 0, 0, 0, 0],\
       [0, 0, 0, 0, 0, 0]])\
------------------------------------------------------------------------------\
7)identity()\
------------------\
=>This function generates only Square Identity Matrix\
Syntax:-    ndarrayobj=numpy.identity(n,dtype)\
\
Here 'n' represent nxn identity matrix and it will be considered as Rows and columns.\
\
Example:\
---------------\
>>> a=np.identity(3)\
>>> print(a, type(a))\
[[1. 0. 0.]\
 [0. 1. 0.]\
 [0. 0. 1.]] <class 'numpy.ndarray'>\
>>> a\
array([[1., 0., 0.],\
       [0., 1., 0.],\
       [0., 0., 1.]])\
>>> a=np.identity(3,dtype=int)\
>>> a\
array([[1, 0, 0],\
       [0, 1, 0],\
       [0, 0, 1]])\
>>> a=np.identity(4,dtype=int)\
>>> a\
array([[1, 0, 0, 0],\
       [0, 1, 0, 0],\
       [0, 0, 1, 0],\
       [0, 0, 0, 1]])\
======================================================\
\
==================================================\
				Object Oriented Principles in Python \
		==================================================\
=>In real time, To develop any project, we need to choose a  language and it can satisfy any of the following principles.\
	1) Procedure Oriented Principles (or Functional Programming)\
	2) Object Oriented Principles \
=>Python Programming satisfied both Functional Programming Princoples and  object oriented principles.\
=>Even though Python satisfies both both Functional Programming Princoples and  object oriented principles, internally Every thing treated as "object"\
\
	Benifits treating "Every Thing is an Object "\
	---------------------------------------------------------------------\
=>It allows us to store large volume data\
=>The data transfered between two remote application in the form Cipher text /      Encrypted format   and hence secuity in enhanced.\
=>The large volme of data can be transfered all at once between two remote            applications.\
=>The Data is always stored in the form of Objects and on the objects we can perform the operations  by using corresponding Functions.\
\
=>To say a programming language is an Object Oriented then it has to satisfy Object Oriented Principles.\
=>Python Programming 7 OOPs Principles. They are.\
\
		1) Classes\
		2) Objects\
		3) Data Encapsulation\
		4) Data Abstraction\
		5) Inheritance\
		6) Polymorphism\
		7) Message Passing\
\
=====================================\
					Classes\
		=====================================\
=>The purpose of classes concept is that "To develop Programmer-defined Data type + To Develop any Real Time Application"\
=>The reason for developing Programming-defined Data type is that to decide what values to store and what operation to perform.\
=>To develop any Programmer-defined data type by using classes concept, we use a key word called 'class'.\
=>Programatically, Every Class name is treated as data type.\
-----------------------\
Def. of Class:-\
-----------------------\
=>A class is a collection of Data Members and Methods \
=>When we define a class, we never get memory space for Data Members and Methods but we get the memory space for Data Members and Methods when we create an object w.r.t  class.\
============================================\
			Types of Data Members in Class\
		============================================\
=>In a class of python, we can define two types of Data Members. They are\
		a) Instance Data Members\
		b) Class Level Data Members\
		c) Static Methods\
-------------------------------------------\
a) Instance Data Members:\
--------------------------------------------\
=>Instance Data Members are always used for storing Specific Values\
=>Instance Data Members Memory space is created Every Time when we	\
     create an object and hence they are also object Level data members\
=>Instance Data Members will be created as part Instance Methods  and Constructors Only by using "self". here "self" is one of the implicit object which contains id of explicit object (or) current object.\
			self.Instance Data member name=value\
						(OR)\
			object.Instance Data member name=value\
=>Instance Data Members are always accessed either w.r.t object name or self.\
		self.Instance Data member name\
				(OR)\
		objectname.Instance Data member name\
---------------------------------------------------------------------------------------------------------------\
b) Class Level Data Members:\
------------------------------------------------\
=>Class Level  Data Members are always used for storing Common Values.\
=>Class Level Data Members memory space created only once irrespective of \
     number of objects are created.\
=>Class Level Data Members will be created as part Class Level Methods Only by using "cls" or "classname" (or) we can define inside of Class Definition.\
		Syntax:      cls.ClassLevel data member=value\
				     classname.ClassLevel data member=value\
\
=>Class Data Members are always accessed either w.r.t classname (or) cls (or) object name(or) self.\
	\
		classname.Class Level Data member name\
				(or)\
		cls.Class Level Data member name\
				(or)\
		self.Class Level Data member name\
				(OR)\
		objectname.Class Level Data member name Data member name\
c) Static Method:\
---------------------------\
=>These methods are used for performing Utility Operation (Universal Operations (or) Independent Operations ).\
=>Static Methos must be accessed w.r.t Class Name (or) Object Name (or) self\
=>Static Methods definition must be preceded with a pre-defined decorator @staticmethod and this will not take "self" or "cls"\
\
=>Syntax:-\
			@staticmethod\
			def    staticmethodname(list of formal params if any):\
			            ------------------------------------------------\
				    ------------------------------------------------\
				    ------------------------------------------------\
===================================================X===============================================\
===================================================\
				objects in Python\
	===================================================\
=>When we define a class, memory space is not created for Data Members and Methods but whose memory is created when we create an object w.r.t class name.\
=>To do any Data Processing, It is mandatory to create an object. \
=>To create an object, there must exists a class Definition otherwise we get NameError\
\
Definition of object:\
-----------------------------------\
=>Instance of a class is called object ( Instance is nothing but allocating sufficient memory space for the Data Members and Methods of a class)\
-------------------------------------------------\
Syntax for creating an object\
-------------------------------------------------\
			  varname=classname()                                 \
\
Examples:  create an object of Student\
			\
			so=Student()\
Example:-  create an object Employee\
\
			eo=Employee()\
-----------------------------------------------------------------------------------------------\
\
Differenced Betwen Classes and Objects\
-----------------------------------------------------------------------\
Class:\
------------\
1) A class is a collection of Data Members and Methods\
2) When we define a class, memory space is not created for Data Members and Methods and it can be treated as specification / model for real time application.\
3) Definition of a perticular exists only once\
4) When we develop any Program with OOPs principles, Class Loaded First only once in main memory.\
---------------\
Objects:\
--------------\
1) Instance of a class is called Object\
\
2) When we create an object, we get the memory space for Data members and Methods.\
3)w.r.t One class Definition, we can create multiple objects.\
4)we can crate an object after loading the class definition otherwise we get             NameError  \
===============================X=============================================================\
=========================================\
			Data Structures used in Pandas\
		=========================================\
=>In Pandas programming, we can store the data in 3 types of Data structures. They are.\
		a) Series\
		b) DataFrame\
		c) Panel\
\
=>The best of way of thinking of these data structires is that The higher dimensional Data Structire is a container of its lower dimensional  data structure.\
Examples:\
--------------\
=>Series is part of DataFrame\
=>DataFrame is a part of Panel.\
-------------------------------------------------------------------------------\
Series\
-----------\
\
================================\
					Series\
			================================\
=>Series is one of the One-Dimensional Labelled array , which is capable storing / holding Homogeneous/Hetrogeneous  data (Internally treated as same type) \
=>The axis labels are collectively called as Index\
=>The series in pandas is nothing but a column in excel sheet \
=>The values of Series are mutable.\
		\
		======================================\
				Creating Series object\
		======================================\
=>A series object can be created by using the following Syntax:\
\
			import pandas as pd\
			varname=pd.Series(object,index, dtype)\
--------------------\
Explanation:\
--------------------\
=>here varname is an object of type <class, pandas.core.series.Series>\
=>pd is an alias name of pandas module\
=>Series() is a Function present in Series class and it be used for creating One-Dimensional Labelled array whose object can store Homogeneous/Hetrogeneous  data (Internally treated as same type) \
=>object represents either collections types and ndarry.\
=>dtype represents data type of pandas \
=>Index represents numerical Integer data starts from 0 to numbervalues-1\
   by default and programatically, we can give our own index.\
-----------------------------------------------------------------------------------------------------------------\
Examples:----Creating a Series  object by using Collection type like list\
-----------------\
>>> import pandas as pd\
>>> import numpy as np\
>>> l1=[10,20,30,40,50]\
>>> s=pd.Series(l1)\
>>> s\
0    10\
1    20\
2    30\
3    40\
4    50\
dtype: int64\
>>> s=pd.Series(l1,dtype="float")\
>>> s\
0    10.0\
1    20.0\
2    30.0\
3    40.0\
4    50.0\
dtype: float64\
>>> s=pd.Series([100,200,300,400,500])\
>>> s\
0    100\
1    200\
2    300\
3    400\
4    500\
dtype: int64\
>>> s=pd.Series([100,200,300,400,500],dtype="float")\
>>> s\
0    100.0\
1    200.0\
2    300.0\
3    400.0\
4    500.0\
dtype: float64\
-----------------------------------------------------------------------------------\
Examples:---->Creating a Series  object by using ndarray object\
-----------------\
>>> lst=[100,200,10,20,400]\
>>> a=np.array(lst)\
>>> a\
array([100, 200,  10,  20, 400])\
>>> print(a,type(a))\
[100 200  10  20 400] <class 'numpy.ndarray'>\
>>> s=pd.Series(a)\
>>> s\
0    100\
1    200\
2     10\
3     20\
4    400\
dtype: int32\
>>> print(s,type(s))\
0    100\
1    200\
2     10\
3     20\
4    400\
dtype: int32 <class 'pandas.core.series.Series'>\
>>> s=pd.Series(a,dtype="float")\
>>> s\
0    100.0\
1    200.0\
2     10.0\
3     20.0\
4    400.0\
dtype: float64\
-----------------------------------------------------------------------------------------------\
Examples:--Create a Series with different values of list and ndarray\
------------------\
>>> lst=[10,"Rossum",34.56,"Python"]\
>>> print(lst,type(lst))\
[10, 'Rossum', 34.56, 'Python'] <class 'list'>\
>>> s=pd.Series(lst)\
>>> print(s,type(s))\
0        10\
1    Rossum\
2     34.56\
3    Python\
dtype: object <class 'pandas.core.series.Series'>\
>>> s[0]\
10\
>>> s[1]\
'Rossum'\
>>> s[0:2]\
0        10\
1    Rossum\
dtype: object\
>>> s[::]\
0        10\
1    Rossum\
2     34.56\
3    Python\
dtype: object\
>>> s[0]=100\
>>> s[::]\
0       100\
1    Rossum\
2     34.56\
3    Python\
dtype: object\
>>> lst=[10,"Rossum",34.56,"Python"]\
>>> a=np.array(lst)\
>>> s=pd.Series(a)\
>>> s\
0        10\
1    Rossum\
2     34.56\
3    Python\
dtype: object\
>>> s=pd.Series(["Rossum","Gosling","Oliphant","McKinney"])\
>>> s\
0      Rossum\
1     Gosling\
2    Oliphant\
3    McKinney\
dtype: object\
--------------------------------------------------------------------------------------\
Example: Creating a Series object with Programmer-defined index:\
----------------------------------------------------------------------\
>>> lst=[100,200,10,20,400]\
>>> s=pd.Series(lst,index=[1,2,3,4,5],dtype="float")\
>>> s\
1    100.0\
2    200.0\
3     10.0\
4     20.0\
5    400.0\
dtype: float64\
>>> tpl=(100,200,10,20,400)\
>>> s=pd.Series(tpl,index=[1,2,3,4,5],dtype="float")\
>>> s\
1    100.0\
2    200.0\
3     10.0\
4     20.0\
5    400.0\
dtype: float64\
>>> s=pd.Series(tpl,index=["1.5","2:5","3:5","4:5","5:5"],dtype="float")\
>>> s\
1.5    100.0\
2:5    200.0\
3:5     10.0\
4:5     20.0\
5:5    400.0\
dtype: float64\
>>> s=pd.Series(tpl,index=["1:5","2:5","3:5","4:5","5:5"],dtype="float")\
>>> s\
1:5    100.0\
2:5    200.0\
3:5     10.0\
4:5     20.0\
5:5    400.0\
dtype: float64\
>>> s=pd.Series(tpl,index=["val1","val2","val3","val3","val5"],dtype="float")\
>>> s\
val1    100.0\
val2    200.0\
val3     10.0\
val3     20.0\
val5    400.0\
dtype: float64\
\
>>> s=pd.Series(["Rossum","Gosling","Oliphant","McKinney"],index=[100,110,120,130])\
>>> s\
100      Rossum\
110     Gosling\
120    Oliphant\
130    McKinney\
dtype: object\
>>> s=pd.Series(["Rossum","Gosling","Oliphant","McKinney"],index=["Name1","Name2","Name3","Name4"])\
>>> s\
Name1      Rossum\
Name2     Gosling\
Name3    Oliphant\
Name4    McKinney\
dtype: object\
---------------------------------------------------------------------------------------------\
>>> bank_int_rates=[6.5,7.75,6.0,7.5]\
>>> bank_names=["SBI","ICICI","HDFC","AXIS"]\
>>> s=pd.Series(bank_int_rates,bank_names)\
>>> s\
SBI      6.50\
ICICI    7.75\
HDFC     6.00\
AXIS     7.50\
dtype: float64\
>>> print("Intrest Rate SBI=",s["SBI"])\
Intrest Rate SBI= 6.5\
>>> print("Intrest Rate SBI=",s[0])\
Intrest Rate SBI= 6.5\
------------------------------------------------------------------------------------------------------\
Creating a series object with dict \
---------------------------------------------------------------------------\
=>We can also create a series object from dict object also.\
=>When we use dict object for creating Series object then all keys are treated as Indices (Or indexex) and values are treated as data \
\
Examples:\
------------------\
>>> d=\{10:"Apple",20:"Mango",30:"Kiwi",40:"Guava"\}\
>>> print(d,type(d))\
\{10: 'Apple', 20: 'Mango', 30: 'Kiwi', 40: 'Guava'\} <class 'dict'>\
>>> s=pd.Series(d)\
>>> s\
10    Apple\
20    Mango\
30     Kiwi\
40    Guava\
dtype: object\
>>> print(s[10])\
Apple\
>>> d=\{"sub1":"Python","sub2":"Data Sci","sub3":"ML","sub4":"DL","sub5":"AI"\}\
>>> s=pd.Series(d)\
>>> s\
sub1      Python\
sub2    Data Sci\
sub3          ML\
sub4          DL\
sub5          AI\
dtype: object\
>>> print("Subject 5=\{\}".format(s["sub5"]))\
Subject 5=AI\
>>> print("Subject 5=\{\}".format(s[4]))\
Subject 5=AI\
================================================================\
		Accessing the Data from Series object\
=====================================================\
=>To access the data from Series object, we have two approaches . They are\
		a) By using Index / Postions--->(Indexing, Slicing)\
		b) By using Labels (Programmer defined)\
\
a) By using Index / Postions--->(Indexing, Slicing):\
-----------------------------------------------------------------------------\
Syntax1:-   seriesobj[index]\
\
Syntax2:-   seriesobj[Begin index:End index]\
\
Syntax2:-   seriesobj[Begin index:End index: Step]\
\
Examples:\
------------------\
>>> s=pd.Series([10,20,30,40,50,60,70,80,90])\
>>> s\
0    10\
1    20\
2    30\
3    40\
4    50\
5    60\
6    70\
7    80\
8    90\
dtype: int64\
>>> print(s[0])\
10\
>>> print(s[9])---KeyError\
>>> print(s[6])\
70\
>>> print(s[3:8])\
3    40\
4    50\
5    60\
6    70\
7    80\
dtype: int64\
>>> print(s[0:8:2])\
0    10\
2    30\
4    50\
6    70\
dtype: int64\
>>> print(s[::2])\
0    10\
2    30\
4    50\
6    70\
8    90\
dtype: int64\
-----------------------------------------------------------------------------------------\
>>> d=\{"sub1":"Python","sub2":"Data Sci","sub3":"ML","sub4":"DL","sub5":"AI"\}\
>>> s=pd.Series(d)\
>>> s\
sub1      Python\
sub2    Data Sci\
sub3          ML\
sub4          DL\
sub5          AI\
dtype: object\
>>> print(s[::-1])\
sub5          AI\
sub4          DL\
sub3          ML\
sub2    Data Sci\
sub1      Python\
dtype: object\
>>> print(s[::])\
sub1      Python\
sub2    Data Sci\
sub3          ML\
sub4          DL\
sub5          AI\
dtype: object\
>>> print(s[::2])\
sub1    Python\
sub3        ML\
sub5        AI\
dtype: object\
=============================================================================================\
==============================================\
				DataFrame in Pandas\
		==============================================\
=>A DataFrame is a Two-Dimensional Data Structure to organize the data \
		(OR)\
=>A DataFrame organizes the data in the tabular form and int contains Rows \
    and  Columns.\
=>The size of the DataFrame is mutable\
----------------------------------------------------------------------------------------------------------\
	Number of approaches to create DataFrame in pandas\
----------------------------------------------------------------------------------------------------------\
=>To create DataFrame in Pandas, we use DataFrame(), which is present in pandas module and gives an object of DataFrame class.\
=>To create a DataFrame, we have 4 approaches. They are\
		a) list\
		b) dict\
		c) Series\
		d) ndarray\
-----------------------------------------------------------------------------------------\
Syntax for creating DataFrame in Pandas:\
--------------------------------------------------------------------\
		varname=pandas.DataFrame(object, index,columns,dtype)\
Explanation:\
---------------------\
=>here varname is an object of <class,'pandas.core.frame.DataFrame'>\
=>object represents List types,dict type, Series and ndarray types\
=>index represents row indices (Axis=1) and by default whose indices starts \
    from 0 to n-1\
=>columns represents column indices (Axis=0)  and by default whose indices \
    0,1,....\
=>Here Both Row and Column Indices can  Programmer defined also.\
=>dtype represents Column data type and it depends on column value.\
==============================================================\
Example:-   DataFrame object with list data\
---------------------------------------------------------------------------\
>>> import pandas as pd\
>>> import numpy as np\
>>> lst=[100,200,300,400]\
>>> df=pd.DataFrame(lst)\
>>> df\
     0\
0  100\
1  200\
2  300\
3  400\
>>> print(df)\
     0\
0  100\
1  200\
2  300\
3  400\
>>> lst=[[10,20,30,40],["RS","JG","RT","MCK"]]\
>>> df=pd.DataFrame(lst)\
>>> df\
    0   1   2    3\
0  10  20  30   40\
1  RS  JG  RT  MCK\
>>> lst=[[10,"RS"],[20,"JG"],[30,"RT"],[40,"MCK"]]\
>>> df=pd.DataFrame(lst)\
>>> print(df)\
     0      1\
0  10   RS\
1  20   JG\
2  30   RT\
3  40  MCK\
>>> lst=[[10,"RS"],[20,"JG"],[30,"RT"],[40,"MCK"]]\
>>> df=pd.DataFrame(lst,columns=["stno","name"])\
>>> df\
   stno name\
0    10   RS\
1    20   JG\
2    30   RT\
3    40  MCK\
>>> df=pd.DataFrame(lst,index=[1,2,3,4],columns=["stno","name"])\
>>> df\
   stno name\
1    10   RS\
2    20   JG\
3    30   RT\
4    40  MCK\
\
>>> lst=[["Rossum",75],["Gosling",85],["Ritche",90]]\
>>> df=pd.DataFrame(lst)\
>>> print(df)\
         0   1\
0   Rossum  75\
1  Gosling  85\
2   Ritche  90\
>>> df=pd.DataFrame(lst,index=["rec1","rec2","rec3"],columns=["Name","Age"])\
>>> print(df)\
         Name  Age\
rec1   Rossum   75\
rec2  Gosling   85\
rec3   Ritche   90\
---------------------------------------------------------------------------\
\
>>> d=\{"subcodes":[10,20,30,40],"subjects":["Python","DataSci","ML","DL"] \}\
>>> print(d)\
\{'subcodes': [10, 20, 30, 40], 'subjects': ['Python', 'DataSci', 'ML', 'DL']\}\
>>> df=pd.DataFrame(d)\
>>> print(df)\
   subcodes subjects\
0        10   Python\
1        20  DataSci\
2        30       ML\
3        40       DL\
>>> df=pd.DataFrame(d,index=[1,2,3,4])\
>>> df\
   subcodes subjects\
1        10   Python\
2        20  DataSci\
3        30       ML\
4        40       DL\
>>> d=\{"Names":["JG","RS","RT","MC"],"sub":["Java","Python","C","Pandas"] \}\
>>> df=pd.pandas(d)\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
TypeError: 'module' object is not callable\
>>> df=pd.DataFrame(d)\
>>> df\
  Names     sub\
0    JG    Java\
1    RS  Python\
2    RT       C\
3    MC  Pandas\
\
>>> df=pd.DataFrame(d,index=[1,2,3,4])\
>>> df\
  Names     sub\
1    JG    Java\
2    RS  Python\
3    RT       C\
4    MC  Pandas\
----------------------------------------------------------------------------------------\
>>> data=\{"one":pd.Series([10,20,30,40], index=['a','b','c','d']), "two":pd.Series([100,200,300,400],index=['a','b','c','d'])\}\
>>> df=pd.DataFrame(data)\
>>> print(df)\
   one  two\
a   10  100\
b   20  200\
c   30  300\
d   40  400\
---------------------------------------------------------------------\
>>> data=\{"one":pd.Series([10,20,30,40], index=['a','b','c','d']), "two":pd.Series([100,200,300,400],index=[1,2,3,4])\}\
>>> df=pd.DataFrame(data)\
>>> print(df)\
    one    two\
a  10.0    NaN\
b  20.0    NaN\
c  30.0    NaN\
d  40.0    NaN\
1   NaN  100.0\
2   NaN  200.0\
3   NaN  300.0\
4   NaN  400.0\
-------------------------------------------------------------------------------------\
\
>>> df['three']=pd.Series([1,2,3,4],index=['a','b','c','d'])\
>>> print(df)\
   one  two  three\
a   10  100      1\
b   20  200      2\
c   30  300      3\
d   40  400      4\
>>> df['total']=df['one']+df['two']+df['three']\
>>> print(df)\
   one  two  three  total\
a   10  100      1    111\
b   20  200      2    222\
c   30  300      3    333\
d   40  400      4    444\
================================\
>>> import pandas\
>>> import pandas as pd\
>>> import numpy as np\
>>> l=[[10,20,30],["RS","RT","MCK"]]\
>>> a=np.array(l)\
>>> a\
array([['10', '20', '30'],\
       ['RS', 'RT', 'MCK']], dtype='<U11')\
>>> print(a,type(a))\
[['10' '20' '30']\
 ['RS' 'RT' 'MCK']] <class 'numpy.ndarray'>\
>>> df=pd.DataFrame(a)\
>>> print(df)\
    0   1    2\
0  10  20   30\
1  RS  RT  MCK\
=========================\
==========================================\
				Multi Threading in Python\
		===========================================\
=>In OS, we have the concept called Multi Tasking. The Multi tasking concept \
of OS brought into Python on the Name of Multi Threading.\
=>Hence Multi Threading is one of the specilized form of Multi Tasking of OS.\
=>The aim / purpose of Multi Threading is that "To achieve Concurrent \
Execution (or) Parallel (or) Simulatneous execution". So that we get Fastest \
Execution.\
=>Definiton of Thread:-  A flow of control is called Thread.\
=>The purpose creating a thread is that "To perform certain operations \
simultaneously / concurrently.\
-------------------------------------------------------------------------------------------\
=>In Real time , we have two types applications. They are\
		a) Process Based Applications\
		b) Thread Based Applications.\
------------------------------------------------------------------------------------------------------------------\
a)  Process Based Applications / Single Threaded Modeling Languages:\
------------------------------------------------------------------------------------------------------------------\
=>These Applications contains  execution environment Single Thread\
=>These Applications Provides Sequential Execution.\
=>These Applications Takes More Execution time.\
=>All Process Based Applications are considered as Heavy weight \
    components.\
Examples:-   C,Cpp ...etc \
----------------------------------------------------------------------------------------\
a)  Thread Based Applications / Multi Threaded Modeling Languages:\
------------------------------------------------------------------------------------------------------------------\
=>These Applications  execution environment contains multiple Thread\
=>These Applications Provides Concurrent Execution.\
=>These Applications Takes Less / fastest Execution time.\
=>All Thread Based Applications are considered as light weight \
    components.\
Examples:-  Python, Java, C#.NET...etc\
--------------------------------------------\
========================================\
			Module Name----> threading\
		========================================\
=>To develop thread based applications, In python Programming, we muse a pre-defined module called "threading".\
=>In Thread Based Applications, we have two types of therads. They are\
	a) main thread\
	b) child / Fore ground threads\
=>By Default , A Python Program contain a single thread called "main thread"\
=>Programatically, In a Python Program, we  can create multiple Threads  called "Child / Fore ground Threads"  and they are all monitored by Main Thread.\
=>Hence Programatically, we can two types of threads. they are\
	a) Main Thread\
	b) Child / Fore ground threads\
=>The purpose of main thread is that to create Child threads and monitering \
      their execution status.\
=>The purpose of Child / Fore ground threads is that "To execute the logic of \
     the program which is written in the form of Functions / Methods concurrently ".\
------------------------------------------------------------------------------------------------------------\
Module Name---->threading:\
------------------------------------------------------------------------\
=>We Know that a module is a collection of Varibales,Functions and Classes.\
-------------------\
Functions in threading module:\
-------------------------------------------------\
1)currentThread()  or current_thread():\
  -----------------------------------------------------------\
  This Function is used for which thread is currently executing\
\
2) active_count():\
    ------------------------\
    This Function is used for finding number of threads which are actively executing in python program.\
=======================================================\
threading  Module contains a pre-defined class called  "Thread"\
---------------------------------------------------------------------------------------------------\
Thread class:\
---------------------\
1) Therad(target,args)\
 ----------------------------------\
 =>It is used for creating Child / Sub / Fore ground threads\
 =>here "target" represents the function name, which is  to  be executed by \
     Child Thread where it contains logic.\
=>here "args" repressents the values to the Function name in the form of tuple \
Example:\
			t1=Thread(target=hello)   \
			t2=Thread(target=hi, args=("Rossum",) )\
\
2) start():\
  -------------\
  =>This function is used for dispatching the child Threads.\
-------------\
Syntax:-\
--------------\
		threadobj.start()\
====================================================\
		Number of approaches to create a thread\
	====================================================\
=>In Python Programming, we have 3 approaches to develop Thread based application (or) to cerate threads.\
\
 I) Developing Thread Based Application By using Functional Approach.\
II) Developing Thread Based Application By Using Sub Class of Thread                    class(with OOPs).\
III) Developing Thread Based Application By Non-Sub class of Thread class(with      OOPs).\
================================================================\
 I) Developing Thread Based Application By using Functional Approach.\
 -------------------------------------------------------------------------------------------------------------------\
Steps:\
-----------\
		1) import threading module\
		2) Define The programmer-defined Function, which contains logic\
		3) create the child thread by using pre-defined class Thread, which is       present in threading module.\
		4) dispatch the child thread(s) by using start()\
\
Examples:\
------------------\
#approach1.py\
from threading  import *\
def   hello():\
	print("\\nName of thread executed by hello()=",current_thread().name) \
	print("Hello, Good Morning")\
\
def  hi(a):\
	print("\\nName of thread executed by hi()=",current_thread().name)\
	print("Hi, Good Eveining:",a)\
\
#main program\
print("Name of main thread=",current_thread().name)\
print("----------------------------------------------------------")\
#create two child threads\
t1=Thread(target=hello)   \
t2=Thread(target=hi, args=("Rossum",) )\
#set the User-friendly name to the child threads\
t1.name="Rakesh"\
t2.name="Ram"\
#dispatch the child threads\
t1.start()\
t2.start()\
==================================X=============================\
================================================\
			Synchronization in Multi Threading\
	================================================\
=>When multiple threads are operating / working on the same resource(function / method) then by default we get dead lock result / race condition / wrong result.\
=>To overcome this dead lock problems, we must apply the concept Synchronization conncept.\
=>The advantage of synchronization concept is that to avoid dead lock result and provides Thread Safety Result.\
=>In Python Programming, we can obtain synchronization concept by using locking and un-locking concept.\
--------------------------------------------------------------------------------------\
=>Steps for implementing Synchronization Concept:\
--------------------------------------------------------------------------------------\
1) obtain / create an object of Lock class, which is present in threading module.\
	Stntax:-\
	----------------\
				lockobj=threading.Lock()\
2) To obtain the lock on the sharable resource, we must use acquire()\
		Syntax:\
		--------------\
				lockobj.acquire()\
	Once current object acquire the lock, other objects are made wait until curent object releases the lock.\
3) To un-lock the sharable resource/current object, we must use release()\
	Syntax:\
	-------------\
				lockobj.release()\
\
	Once current object releases the lock, other objects are permitted into shrable resource. This process of aquiring the releasing the lock will be continued until all the objects completed their execution.\
============================================\
			Networking Programming in Python\
		============================================\
=>The purpose of Network Programming is that "To share the data between multiple machines(clients) where the common data present in one centalized machine(Server)".\
=>In Network Programming, we have to write two types of Programs. They are\
			a) Server Side Program\
			b) Client Side Program\
--------------------------------------------------------------------------------------------------\
a)Server Side Program:\
   -------------------------------\
=>This program ,which receives the client side program request, Process the request and gives Response back to client.\
---------------------------------\
b) Client Side Program\
---------------------------------\
=>This Program always makes requests to the server side program and receives  the responses from server side program.\
-----------------------------------------------------\
Def. of DNS(Domain Naming Service)--Host machine:\
-------------------------------------------------------------------------\
=>It is the name of machine, where the server side program resides.\
=>The Default DNS of a machine is "localhost".\
-----------------------------------------------------------------------------\
Def of IP Address:\
------------------------------\
=>It is the Four Parts Numerical Address, where the server side program resides.\
=>The default IP address of the machine is 127.0.0.1\
------------------------------------------------------------------------\
Def. of Port number:\
------------------------------\
=>It is the logical  numerical Id, where server side program is running.\
--------------------------------------------------------------------------------------------------\
Steps for developing Server Side Program:\
--------------------------------------------------------------\
1.Every Server Side Program must resides at DNS / IP Address and runs at Unique \
   Port number.\
2. Server Side Program must ACCEPT the Client Side Program request.\
3. Server Side Program must READ the client side program request, PROCESS the \
    client side  program request ( decode() ).\
4. Server Side program must SEND the response back to Client Side Program( \
    encode() )\
Note:\
---------\
=>As long as Client Side Program makes a request , the Server side program  performs steps(2)(3) and (4)\
--------------------------------------------------------------------------------------------\
Steps for developing Client Side Program:\
-------------------------------------------------------------------\
1) Every Client Side Program must get CONNECTION from Server side Program by passing   DNS/IP address and port number.\
2) Client Side Program must SEND a request to the server side Program ( encode() ).\
3) Client Side Program RECEIVE the response from Server Side Program ( decode() ).\
------------\
NOTE:\
------------\
=>If the Client Side Program want to make multiple Requests and receives multiple responses then perform steps(2) and (3) \
============================X==================================\
===========================================\
			Module Name in Networking Programming \
		============================================\
=>To deal with Networking in python, we use a pre-defined module called "socket".\
=>The module socket contains functions for developing both client and server side \
    programs.\
-------------------------------------------------------------------------------------------------------------------\
Functions of socket module used in Server Side Program\
----------------------------------------------------------------------------------------\
1) Socket():\
  -----------------\
=>This function is used for creating an object of Socket and it acts as Bi-directional communication Entity between Client Side Program and Server Side Program.          \
\
Syntax:-\
		sockobj=socket.socket()\
------------------------------------------------------------------------------------------------------\
2) bind():\
  ------------\
=>This function is used making the program as Server Side Program by passing DNS (or) IP address and port number in the form tuple that program acts as server side program.\
Syntax:- sockobj.bind( (DNS, portno)  )\
\
Examples:--\
		sockobj.bind( ("localhost", 99999)  )\
			(or)\
		sockobj.bind("127.0.0.1", 88888)\
	  print("Server Side Program is ready to accept any client side request")\
------------------------------------------------------------------------------------------------	  \
3) listen():\
---------------\
=>This function is used for configuring the Server Side program in such way that how many requests can handle and can provide responses to client side program(s).\
\
   Syntax:-    sockobj.listen(no. of clients)\
   Example:-     sockobj.listen(4)\
-------------------------------------------------------------------------------------------\
4) accept():\
-------------------\
=>This function is used for accepting the request of Client Side Program.\
=>This function returns an object of tuple (Connection,address), which contains address of client side program and obtains connection to client side program by the server side program.\
\
Syntax:-    var1,var2=sockobj.accept()\
here var1, and var2 represents connection and address of Client Side Program.\
\
Examples:-    conn,addr=sockobj.accept()\
------------------------------------------------------------------------------------------------------\
5) recv():<-----decode()\
  -------------\
=>This function is used for receving the  data of client side program at server side (request receiving ) program and it can be in client side program for receiving server side program data (response receiving )\
=>The function receives data of size 1024 bytes (or) 2048 bytes  (or) 4096  bytes etc.\
=>while we are applying the recv(), data must be decoded with decode() and it returns \
   the data in the form of str.\
Syntax:-    \
			strdata=sockobj.recv(1024).decode()\
-----------------------------------------------------------------------\
6) send():\
--------------\
=>This Function is used for sending the data of the client(request) and sending the data of server(response)  to the client by encoding.\
Syntax:-   sockobj.send("clientdata".encode()) \
-----------------------------------------------------------------------\
7) connect():\
---------------------------\
=>This function is used for getting the coinnection by client side program from server side program by passing DNS and Portno.\
\
Syntax:-   sockobj.connect( ("DNS/IP address", portno) )\
\
Examples:    sockobj.connect("localhost",9999)\
                   print("client program obtains connection with Server Side Program")\
============================X======================================\
========================================\
			String Handling in Python\
		=========================================\
=>We know that a String is a collection / sequence of  Characters enclosed within single / double  Quotes  (or)  triple single / double Quotes.\
=>String data is of type <class,'str'>\
\
=>To do various opereations on String data, we have to use the following the functions.\
---------------------------------------------------\
1) capitalize():\
----------------------\
=>This function is used for capitalizing the given str data\
=>Syntax:     varname=strobj.capitalize()\
-----------------\
Examples:\
-----------------\
>>> s="python is an oop lang"\
>>> print(s,type(s))---------python is an oop lang <class 'str'>\
>>> cs=s.capitalize()\
>>> print(cs,type(cs))----  Python is an oop lang <class 'str'>\
>>> print(s,type(s))----     python is an oop lang <class 'str'>\
---------------------------------------------------------------------------------\
2) title():\
--------------\
=>This Function is used for all words First Characters as capital.\
=>Syntax:-       varname=strobj.title()\
Examples:\
----------------\
>>> s="python is an oop lang"\
>>> ts=s.title()\
>>> print(ts,type(ts))--------Python Is An Oop Lang <class 'str'>\
>>> print(s,type(s))-----python is an oop lang <class 'str'>\
------------------------------------------------------------------------------\
3) find():\
 -------------\
 =>This function is used for finding an index of the first occurance of specified str data  in the given str data.\
 =>If the data found then it returns Its  +ve index value\
 =>If the data not found then it returns  -1\
\
Syntax:-    varname=strobj.find(str data)\
Examples:\
-----------------\
>>> s="python is an oop lang"\
>>> print(s,type(s))\
python is an oop lang <class 'str'>\
>>> ind=s.find("python")\
>>> print(ind)------0\
>>> ind=s.find("n")\
>>> print(ind)------5\
>>> ind=s.find("k")\
>>> print(ind)-------     -1\
>>> ind=s.find("o")\
>>> print(ind)-------4\
Examples:\
-----------------\
      for let in s:\
             ind=s.find(let)\
	     print(ind)\
--------------------------------------------------------------------------\
4) isalnum():\
---------------------\
=>This Function returns True Provided str data contains "Alphabets with digits or only with digits or only with alphabets"\
=>This Function returns False Provided str data is a combination of "Alphabets and numbers with any special Symbols"\
\
Syntax:-  varname=strobj.isalnum()\
				(or)\
		strobj.isalnum()\
-------------------\
Examples:\
-----------------\
>>> s="12345"\
>>> b=s.isalnum()\
>>> print(b)------------True\
>>> s="python12345"\
>>> s.isalnum()----------True\
>>> s="python12345#"\
>>> s.isalnum()---------False\
>>> s="python  12345"\
>>> s.isalnum()----------False\
>>> s="Python is an oop lang"\
>>> s.isalnum()-----------False\
>>> s="python"\
>>> s.isalnum()--------True\
-------------------------------------------------------------------------------------------------\
5) isalpha():\
  ----------------\
  =>This Function returns True provided str data contains only Alphabets otherwise it returns False.\
\
=>Syntax:-          varname=strobj.isalpha()	\
\
Examples:\
-----------------\
>>> s="Python"\
>>> b=s.isalpha()\
>>> print(b)------------True\
>>> s="1234"\
>>> print(s.isalpha())--------False\
>>> s="python1234"\
>>> print(s.isalpha())-------False\
>>> s="python_1234"\
>>> print(s.isalpha())-------False\
------------------------------------------------------------------------------\
6) isdigit():\
-------------------\
=>This Function returns True provided str data contains only purly digits(0-9) otherwise it returns False.\
Syntax:-   varname=strobj.isdigit()\
			or\
		strobj.isdigit()\
Examples:\
-----------------\
>>> a="1234"\
>>> print(a.isdigit())------------True\
>>> a="pyth1234"\
>>> print(a.isdigit())--------False\
>>> a="python"\
>>> print(a.isdigit())------False\
>>> a="pyth#$123"\
>>> print(a.isdigit())---------False\
------------------------------------------------------------------------------\
7) islower() :\
--------------------\
=>This Function returns True provided the str data is completely available in lowercase otherwise it returns False.\
\
Syntax:-   varname=strobj.islower()\
			or\
		strobj.islower()\
Examples:\
-----------------\
>>> s="python"\
>>> print(s.islower())----------True\
>>> s="Python"\
>>> print(s.islower())---------False\
>>> s="python is an oop lang"\
>>> print(s.islower())----True\
>>> s="python is An oop lang"\
>>> print(s.islower())-------False\
------------------------------------------------------------------------------\
7) isupper() :\
--------------------\
=>This Function returns True provided the str data is completely available in upper case otherwise it returns False.\
\
Syntax:-   varname=strobj.isupper()\
			or\
		strobj.isupper()\
\
Examples:\
------------------\
>>> s="Python"\
>>> print(s.isupper())----------False\
>>> s="PYTHON"\
>>> print(s.isupper())-------True\
>>> s="python is an oop lang"\
>>> print(s.isupper())---------False\
>>> s="PYTHON IS AN OOP LANG"\
>>> print(s.isupper())-------True\
--------------------------------------------------------------------------------\
9) isspace()\
-------------------\
=>This Function returns True provided str data contains purely space otherwise it returns False.\
=>Syntax:-       varname=strobj.isapce()\
					(or)\
				strobj.isapce()\
\
Examples:\
-----------------\
>>> s="Python is an oop"\
>>> print(s.isspace())--------False\
>>> s=" "\
>>> print(s.isspace())--------True\
>>> s="    "\
>>> print(s.isspace())--------True\
>>> s="123 345"\
>>> print(s.isspace())---False\
---------------------------------------------------------------------------------------			\
10) upper():\
--------------------\
=>This Function is used for converting lower case data into upper case data.\
Syntax:-    varname=strobj.upper()\
\
11) lower():\
--------------------\
=>This Function is used for converting upper case data into lower case data.\
Syntax:-    varname=strobj.lower()\
\
Examples:\
-----------------\
>>> s="python is an oop lang"\
>>> uc=s.upper()\
>>> print(uc)-------PYTHON IS AN OOP LANG\
>>> print(s)-------python is an oop lang\
>>> print(uc)---- PYTHON IS AN OOP LANG\
>>> lc=uc.lower()\
>>> print(lc)-------- python is an oop lang\
--------------------------------------------------------------------------------\
12) join():\
--------------\
=>This Function is used concatinating all the sequence of values which are available in the form str\
Syntax:-   varname=strobj1.join(iterable obj)\
\
Examples-:\
----------------\
>>> print(tpl, type(tpl))--('java', 'python', 'Data Science') <class 'tuple'>\
>>> s2=""\
>>> s3=s2.join(tpl)\
>>> print(s3)---->javapythonData Science\
---------------------------------------------------------------------------------------\
13)split():\
--------------------\
=>This function is used for splitting the given str data into different tokens based spitting value. The default splitting value is space\
=>This Function returns splitting values in the form of list.\
\
Syntax:-   listobj=strobj.split()\
		\
		  listobj=strobj.split("spliting value")\
Examples:\
----------------\
>>> s="Python is an oop lang"\
>>> s.split()---------  ['Python', 'is', 'an', 'oop', 'lang']\
>>> s="9-11-2021"\
>>> l=s.split("-")\
>>> print(l)----------['9', '11', '2021']\
>>> s="apple#kiwi#guava-banana"\
>>> l=s.split("#")\
>>> print(l)----------['apple', 'kiwi', 'guava-banana']\
>>> l[2].split("-")--------['guava', 'banana']\
============================X====================================\
14) len():\
---------------\
=>This functions is used for finding number of values present in str data\
\
Syntax:-  len(strobj)\
		varname=len(strobj)\
\
Example:\
----------------\
>>> s1="python"\
>>> len(s1)\
6\
--------------------------------------------------------------------------------------------------\
15) max():- Used for finding max letter from str data\
Syntax:-    max(strobj)		\
\
16) min():- Used for finding min letter from str data\
\
Syntax:-     min(strobj)\
\
Examples:\
------------------\
>>> s="PYTHON"\
>>> max(s)-------------'Y'\
>>> min(s)------------'H'\
----------------------------------------------------------------------------------------\
========================================\
				Constructors in Python\
		=========================================\
=>The purpose of constructors in Python is that "To Initlize the object"\
=>Initlizing the object is nothing but placing our own values without keeping object empty\
---------------------------------------\
Definition of Constructor:\
---------------------------------------\
=>A constructor is one of the Special Method which is automatically / implicitly called by PVM during Object Creation and whose purpose is To Initlize the object with our own values( Without empty).\
-------------\
Syntax:\
-------------\
		def    __init__(self,list formal params if any):\
		         ------------------------------\
			 block of stmts--Initlization\
			 ------------------------------\
\
=======================================================\
=>Properties / Characterstics of Constructors:\
------------------------------------------------------------------------------------\
1) It is calling automatically during object creation.\
2) The name of the constructor is always   __init__(self,...)\
3) In Python, Constructors can be inherited.\
4) In Python, Constructors can be Overridden \
=======================================================\
Differences  between methods and  Constructors:\
------------------------------------------------------------------------------------\
=>Methods:\
  ----------------\
1) Methods are used for Performing Operations on some data.\
2) Methods must be called Explicitly / Manually\
3) Methods name can be any valid python variable name\
---------------------------\
=>Constructors:\
------------------------\
1) Constructors are used for Initlizing the Object\
2) Constructors called by PVM automatically during object creation\
3) Constructor name must be  __init__(self....)\
-------------------------------------------------------------------------\
====================================\
			Types of Constructors in Python\
		====================================\
=>In Python Programming, we have two types of Constructors. They are\
	1) Default / Parameter Less Constructor\
	2) Parameterized Constructor\
\
1) Default / Parameter Less Constructor:\
-----------------------------------------------------------------\
=>A Constructor is said to be a Default Constructor if and only if it never takes any parameters.\
\
=>The purpose of default Constructor is that  "To Initlize multiple objects of same class with same values."\
\
=>Syntax:-		 def     __init__(self):  \
                                          -----------------------------\
				          -----------------------------\
				          Block of statements\
				          -------------------------------\
\
#consex1.py\
class Test:\
	def __init__(self): # Default Constructor\
		self.a=10\
		self.b=20\
		print("Val of a=\{\}".format(self.a))\
		print("Val of b=\{\}".format(self.b))\
\
\
#main program\
print("Object T1 Values:")\
t1=Test()\
print("Object T2 Values:")\
t2=Test()\
print("Object T3 Values:")\
t3=Test()\
=============================================================\
1)  Parameterized Constructor:\
-----------------------------------------------------------------\
=>A Constructor is said to be a  Parameterized Constructor if and only if it always takes  parameters.\
\
=>The purpose of Parameterized Constructor is that  "To Initlize multiple objects of same class with Different values."\
\
=>Syntax:-		 def     __init__(self, list of formal params ):  \
                                          -----------------------------\
				          -----------------------------\
				          Block of statements\
				          -------------------------------\
\
#consex2.py\
class Test:\
	def __init__(self, sno,sname):  # Parameterized constructor\
		self.sno=sno\
		self.name=sname\
		print("Student Number:\{\}".format(self.sno))\
		print("Student Name:\{\}".format(self.name))\
		\
\
#main program\
print("Object T1 Values:")\
t1=Test(10,"RS")\
print("Object T2 Values:")\
t2=Test(20,"JG")\
print("Object T3 Values:")\
t3=Test(30,"DR")\
============================================================\
=>In class of python, we can't define both default and parameterized constructors. But we can achieve the functionality of both default and parameterized constructors with default parameter passing mechanism.\
\
#consex3.py\
class Employee:\
	"""def   __init__(self):     Don't write this\
		self.eno=1\
		self.ename="Rossum"""\
\
	def   __init__(self,eno=1,ename="Rossum"):\
		self.eno=eno\
		self.ename=ename\
		print("Emp Number:\{\}".format(self.eno))\
		print("Emp Name:\{\}".format(self.ename))\
\
\
#main program\
print("Object eo1 Values:")\
eo1=Employee()\
print("Object eo2 Values:")\
eo2=Employee(10,"Gosling")\
print("Object eo3 Values:")\
eo3=Employee(20,"Ritche")\
========================================\
				Destructors in Python\
		========================================\
=>Destructor is one of the program / Function / Method, which is automatically called by Garbage Collector once program execution completed .\
=>A Garbage Collector is one of the program, which is running behind of Python Program which collecting un-used memory space. \
=>A Garbage Collector is internally calling a pre-defined function called __del__(self)\
=>We can make the Garbage Collector forcibly  to call __del__(self) by making object  value as None.( Syntax: objname=None )\
\
=>Syntax:-        def    __del__(self):\
                                     -------------------------------\
				     -------------------------------\
=>It is not recommemded to define our  own  __del __(self) bcoz automatically Garbarge Collector calls its own   __del__(self) for de-allocating memory space of the program (object memory space) after completion of Program execution.\
========================================================\
gc module:\
-------------------\
=>here 'gc' is the pre-defined module.\
=>this module contains the following functions.\
		1.disable()\
		2.enable()\
		3.isenabled()\
=>Function-(1)  is used for disabling the running process of garbage collector.\
     Even we call disable() in our program, internally Garbage collecor calls its own  __del__(self) and there is no effective  this function internally.\
=>Function-(2) is used for enabling the functionality of Garbage Collector\
=>Function-(3) returns True provided Garbage collector is running otherwise it returns False.\
============================================\
			Introduction to Inheritance\
	============================================\
=>The purpose of Inheritance is that "To build Re-usable Applications".\
----------------------------------\
=>Def. of Inheritance:\
----------------------------------\
=>The process of obtaining the Data Members and Methods(Features) from one class into another class .\
\
=>The class which is giving Data Members and Methods to another class is called "Base or Super or Parent class".\
=>The class which is taking the Data Members and Methods from another class is called "Derived or sub or Child Class".\
=>Inheritance Principle always follows Logical Memory Management. This memory management says that Neither we define Data Members and Methods nor Taking Physical Memory space.\
-----------------------------------------------------------\
Advantages of Inheritance:\
-----------------------------------------------------------\
=>Application development time is less.\
=>Application Memory space is Less.\
=>Application Execution time is less.\
=>Redundency(duplication) of the code is minimized.\
=>Application Performance is Enhanced.\
=============================X==========================\
=========================================\
				Types of Inheritances\
	=========================================\
=>Types of Inheritances makes us to understand, how to re-use the features from one class into another class.\
=>We have 5 types of Inheritances. They are\
\
		1) Single Inheritance\
		2) Multi Level Inheritance\
		3) Hierarchical Inheritance\
		4) Multiple Inheritance\
		5) Hybrid Inheritance\
-----------------------------------------------------------------------------------------------------\
=====================================================\
		Inheriting the features of Base class into Derived Class\
	======================================================\
=>Features of a class are nothing but Data Members, Methods and \
    constructors.\
=>To Inherit the Data Members, Methods and constructors from Base class into Derived class, we use the following syntax:\
-------------	\
Syntax:\
------------\
class <clsname-1>:  # Base Class-1\
        -------------------\
	-------------------\
\
class <clsname-2>: # Base Class-2\
        -------------------\
	-------------------\
class <clsname-n>: # Base Class-n\
        -------------------\
	-------------------\
\
class <clsname-n+1> (clsname-1,clsname-2......clsname-n):\
               ---------------------------------------------------\
	       ----------------------------------------------------\
\
-----------------------\
Exaplanation:\
----------------------\
=>Here clsname-1,clsname-2......clsname-n are called Base Classes.\
=>here clsname-n+1 is called Derived class.\
=>When we develop any inheritance application, It is always recommended to create an object of Bottom most derived class bcoz it inheritance all features of Base Class and Intermediate Base classes.\
===================X====================================\
==================================\
				Method Overriding\
		==================================\
=>Method Overriding=Method Heading is same + Method Body is different\
			(OR)\
=>The process of re-defining the original method of base class into various derived classes for performing Various Operations is calld Method Overriding.\
=>To use Method Overriding in Python Program , we must apply Inheritance Process.\
=>The Method Overriding Programming Facility used in Polymorphism Principle.\
=======================================\
			calling Original Method From Overridden Methods\
		=======================================\
=>To call Original Method From Overridden Methods, we use the super().\
=>super() is used for calling Original Method (Base Class) from Overridden methods (Derived Classes).\
\
=>Syntax1:-         super().methodname(list of values if any)\
=>Syntax2:-         super().__init__(list of values if any)\
\
=>With super() we can the methods Level by Level only (Bottom Most Derived Class can its immediate Intermediate Base class and It inturns calls its base class so on...) but unable call to the methods to according to Programmer choice (Example: Bottom Most derived class want to call Top most base class method-----not possible). \
=>To call the base classes original methods according to programmer Choice, we use the following Syntax:\
\
	Syntax1:-      classname.methodname(self, list of values if any)\
	Syntax2:-      classname.__init__(self, list of values if any)\
\
----------------------------------\
==================================\
				Polymorphism\
		==================================\
=>Polymorphism is one of the distinct fearure of OOPs\
=>The main purpose of Polymorphism is that "To get Effcient Memeory Management (Less Memory Space)"\
-------------------------------\
=>Def of Polymorphism:\
-------------------------------\
=>The Process of Representing "One Form in Multiple Forms"  is called Polymorphism.\
\
=>The polymorphism principle  implemented (bring into action) by a programming facility called "Method Overriding". \
=>In the definition of polymorphism, One Form represents Original Method and multiple forms represents Overridden Methods.\
=>A FORM is nothing State of existence of method. If a method is existing in base class then it is called Original Method and if it is existing  in derived classes then it is called Overridden methods.\
===============================================\
		Data Encapsulation  and Data Abstraction\
	================================================\
=>The Process of Hiding the data members  and methods of a class from external programmers  is called Data Encapsulation.\
=>Data Hinding is fundamental purpose of Data Encapsulation.\
=>In python, to Implement Data Encapsulation, the data memebrs and methods of the class must be preceded with  __\
\
Syntax:-         __Data Member Name=value\
\
			def    __methodname(self, list of formal params if any):\
			                  --------------------------------\
					  --------------------------------\
\
\
---------------\
Example:\
--------------\
#account.py--File name and acts as Module name\
class Account:\
	def __init__(self):\
		self.__acno=1111\
		self.cname="Rossum"\
		self.__bal=3.4\
		self.bname="SBI"\
		self.__pin=1234\
	def  __openpin(self):\
		print("i am from openpin()")\
	\
----------------------------------------------------------------------------\
=>The process of retrieving the essential details without considering Hidden details is called Data Abstraction.\
\
#others.py\
from account import Account\
ao=Account()\
#print("Account Number=",ao.acno)-----> can't access \
print("Account Holder Name=",ao.cname)\
#print("Account Balance=",ao.bal)----->can't access\
print("Account Branch Name=",ao.bname)\
#print("Account Pin=",ao.pin)---->can't access\
\
#ao.openpin()-----> can't access \
\pard\pardeftab720\qc\partightenfactor0

\f1\b\fs22 \cf4 \cb1 \strokec4 \shad\shadx0\shady-20\shadr0\shado1 \shadc0 \
\pard\pardeftab720\partightenfactor0

\f0\b0\fs28 \cf0 \cb2 \strokec3 \shad0 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\
\
}